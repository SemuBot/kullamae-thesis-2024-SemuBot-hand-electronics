
STM32_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f14  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080070a8  080070a8  000080a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070e0  080070e0  000090e8  2**0
                  CONTENTS
  4 .ARM          00000000  080070e0  080070e0  000090e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080070e0  080070e0  000090e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070e0  080070e0  000080e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070e4  080070e4  000080e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  080070e8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000090e8  2**0
                  CONTENTS
 10 .bss          00000298  200000e8  200000e8  000090e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000380  20000380  000090e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000090e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012d54  00000000  00000000  00009118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bdc  00000000  00000000  0001be6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001010  00000000  00000000  0001ea48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c8a  00000000  00000000  0001fa58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021d6c  00000000  00000000  000206e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015f2e  00000000  00000000  0004244e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc9e1  00000000  00000000  0005837c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00124d5d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004248  00000000  00000000  00124da0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00128fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000e8 	.word	0x200000e8
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007090 	.word	0x08007090

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200000ec 	.word	0x200000ec
 80001d0:	08007090 	.word	0x08007090

080001d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b08a      	sub	sp, #40	@ 0x28
 80001d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001da:	f107 0314 	add.w	r3, r7, #20
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]
 80001e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001ea:	4b40      	ldr	r3, [pc, #256]	@ (80002ec <MX_GPIO_Init+0x118>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	4a3f      	ldr	r2, [pc, #252]	@ (80002ec <MX_GPIO_Init+0x118>)
 80001f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80001f4:	6153      	str	r3, [r2, #20]
 80001f6:	4b3d      	ldr	r3, [pc, #244]	@ (80002ec <MX_GPIO_Init+0x118>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80001fe:	613b      	str	r3, [r7, #16]
 8000200:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000202:	4b3a      	ldr	r3, [pc, #232]	@ (80002ec <MX_GPIO_Init+0x118>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	4a39      	ldr	r2, [pc, #228]	@ (80002ec <MX_GPIO_Init+0x118>)
 8000208:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800020c:	6153      	str	r3, [r2, #20]
 800020e:	4b37      	ldr	r3, [pc, #220]	@ (80002ec <MX_GPIO_Init+0x118>)
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000216:	60fb      	str	r3, [r7, #12]
 8000218:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800021a:	4b34      	ldr	r3, [pc, #208]	@ (80002ec <MX_GPIO_Init+0x118>)
 800021c:	695b      	ldr	r3, [r3, #20]
 800021e:	4a33      	ldr	r2, [pc, #204]	@ (80002ec <MX_GPIO_Init+0x118>)
 8000220:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000224:	6153      	str	r3, [r2, #20]
 8000226:	4b31      	ldr	r3, [pc, #196]	@ (80002ec <MX_GPIO_Init+0x118>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800022e:	60bb      	str	r3, [r7, #8]
 8000230:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000232:	4b2e      	ldr	r3, [pc, #184]	@ (80002ec <MX_GPIO_Init+0x118>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	4a2d      	ldr	r2, [pc, #180]	@ (80002ec <MX_GPIO_Init+0x118>)
 8000238:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800023c:	6153      	str	r3, [r2, #20]
 800023e:	4b2b      	ldr	r3, [pc, #172]	@ (80002ec <MX_GPIO_Init+0x118>)
 8000240:	695b      	ldr	r3, [r3, #20]
 8000242:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000246:	607b      	str	r3, [r7, #4]
 8000248:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR1_DIR_Pin|MOTOR1_EN_Pin|CS_ENC_2_Pin, GPIO_PIN_RESET);
 800024a:	2200      	movs	r2, #0
 800024c:	2186      	movs	r1, #134	@ 0x86
 800024e:	4828      	ldr	r0, [pc, #160]	@ (80002f0 <MX_GPIO_Init+0x11c>)
 8000250:	f001 fce6 	bl	8001c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR2_EN_Pin|MOTOR2_DIR_Pin|LD2_Pin|MOTOR3_EN_Pin
 8000254:	2200      	movs	r2, #0
 8000256:	f241 31b2 	movw	r1, #5042	@ 0x13b2
 800025a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800025e:	f001 fcdf 	bl	8001c20 <HAL_GPIO_WritePin>
                          |CS_ENC_3_Pin|CS_ENC_1_Pin|MOTOR4_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_ENC_4_Pin|MOTOR4_EN_Pin|MOTOR5_DIR_Pin|MOTOR5_EN_Pin
 8000262:	2200      	movs	r2, #0
 8000264:	f24d 4150 	movw	r1, #54352	@ 0xd450
 8000268:	4822      	ldr	r0, [pc, #136]	@ (80002f4 <MX_GPIO_Init+0x120>)
 800026a:	f001 fcd9 	bl	8001c20 <HAL_GPIO_WritePin>
                          |CS_ENC_5_Pin|MOTOR3_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800026e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000272:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000274:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800027a:	2300      	movs	r3, #0
 800027c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800027e:	f107 0314 	add.w	r3, r7, #20
 8000282:	4619      	mov	r1, r3
 8000284:	481a      	ldr	r0, [pc, #104]	@ (80002f0 <MX_GPIO_Init+0x11c>)
 8000286:	f001 fb41 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = MOTOR1_DIR_Pin|MOTOR1_EN_Pin|CS_ENC_2_Pin;
 800028a:	2386      	movs	r3, #134	@ 0x86
 800028c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800028e:	2301      	movs	r3, #1
 8000290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000292:	2300      	movs	r3, #0
 8000294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000296:	2300      	movs	r3, #0
 8000298:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800029a:	f107 0314 	add.w	r3, r7, #20
 800029e:	4619      	mov	r1, r3
 80002a0:	4813      	ldr	r0, [pc, #76]	@ (80002f0 <MX_GPIO_Init+0x11c>)
 80002a2:	f001 fb33 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MOTOR2_EN_Pin|MOTOR2_DIR_Pin|LD2_Pin|MOTOR3_EN_Pin
 80002a6:	f241 33b2 	movw	r3, #5042	@ 0x13b2
 80002aa:	617b      	str	r3, [r7, #20]
                          |CS_ENC_3_Pin|CS_ENC_1_Pin|MOTOR4_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ac:	2301      	movs	r3, #1
 80002ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b0:	2300      	movs	r3, #0
 80002b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002b4:	2300      	movs	r3, #0
 80002b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002b8:	f107 0314 	add.w	r3, r7, #20
 80002bc:	4619      	mov	r1, r3
 80002be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002c2:	f001 fb23 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = CS_ENC_4_Pin|MOTOR4_EN_Pin|MOTOR5_DIR_Pin|MOTOR5_EN_Pin
 80002c6:	f24d 4350 	movw	r3, #54352	@ 0xd450
 80002ca:	617b      	str	r3, [r7, #20]
                          |CS_ENC_5_Pin|MOTOR3_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002cc:	2301      	movs	r3, #1
 80002ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d0:	2300      	movs	r3, #0
 80002d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002d4:	2300      	movs	r3, #0
 80002d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002d8:	f107 0314 	add.w	r3, r7, #20
 80002dc:	4619      	mov	r1, r3
 80002de:	4805      	ldr	r0, [pc, #20]	@ (80002f4 <MX_GPIO_Init+0x120>)
 80002e0:	f001 fb14 	bl	800190c <HAL_GPIO_Init>

}
 80002e4:	bf00      	nop
 80002e6:	3728      	adds	r7, #40	@ 0x28
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	40021000 	.word	0x40021000
 80002f0:	48000800 	.word	0x48000800
 80002f4:	48000400 	.word	0x48000400

080002f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002fc:	f001 f918 	bl	8001530 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000300:	f000 f826 	bl	8000350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000304:	f7ff ff66 	bl	80001d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000308:	f001 f824 	bl	8001354 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800030c:	f000 fd2c 	bl	8000d68 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000310:	f000 fc08 	bl	8000b24 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000314:	f000 fcb2 	bl	8000c7c <MX_TIM2_Init>
  MX_TIM4_Init();
 8000318:	f000 fd9c 	bl	8000e54 <MX_TIM4_Init>
  MX_TIM8_Init();
 800031c:	f000 fe10 	bl	8000f40 <MX_TIM8_Init>
  MX_SPI2_Init();
 8000320:	f000 f9ac 	bl	800067c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  USART_init();
 8000324:	f001 f8a8 	bl	8001478 <USART_init>
  SPI_init();
 8000328:	f000 fa48 	bl	80007bc <SPI_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MOTOR_main();
 800032c:	f000 f900 	bl	8000530 <MOTOR_main>
	  SPI_read_all();
 8000330:	f000 fb2c 	bl	800098c <SPI_read_all>

	  if (USART_drdy()){
 8000334:	f001 f888 	bl	8001448 <USART_drdy>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d0f6      	beq.n	800032c <main+0x34>
		  USART_reset_drdy();
 800033e:	f001 f88f 	bl	8001460 <USART_reset_drdy>
		  MOTOR_set_all(USART_get_buffer());
 8000342:	f001 f8c1 	bl	80014c8 <USART_get_buffer>
 8000346:	4603      	mov	r3, r0
 8000348:	4618      	mov	r0, r3
 800034a:	f000 f90f 	bl	800056c <MOTOR_set_all>
	  MOTOR_main();
 800034e:	e7ed      	b.n	800032c <main+0x34>

08000350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b0a6      	sub	sp, #152	@ 0x98
 8000354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000356:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800035a:	2228      	movs	r2, #40	@ 0x28
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f006 fe6a 	bl	8007038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000364:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000368:	2200      	movs	r2, #0
 800036a:	601a      	str	r2, [r3, #0]
 800036c:	605a      	str	r2, [r3, #4]
 800036e:	609a      	str	r2, [r3, #8]
 8000370:	60da      	str	r2, [r3, #12]
 8000372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	2258      	movs	r2, #88	@ 0x58
 8000378:	2100      	movs	r1, #0
 800037a:	4618      	mov	r0, r3
 800037c:	f006 fe5c 	bl	8007038 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000380:	2302      	movs	r3, #2
 8000382:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000384:	2301      	movs	r3, #1
 8000386:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000388:	2310      	movs	r3, #16
 800038a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800038e:	2302      	movs	r3, #2
 8000390:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000394:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000398:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800039c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80003a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003a4:	2300      	movs	r3, #0
 80003a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003aa:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80003ae:	4618      	mov	r0, r3
 80003b0:	f001 fc4e 	bl	8001c50 <HAL_RCC_OscConfig>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003ba:	f000 f831 	bl	8000420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003be:	230f      	movs	r3, #15
 80003c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c2:	2302      	movs	r3, #2
 80003c4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c6:	2300      	movs	r3, #0
 80003c8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003ce:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d0:	2300      	movs	r3, #0
 80003d2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003d4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80003d8:	2102      	movs	r1, #2
 80003da:	4618      	mov	r0, r3
 80003dc:	f002 fc8c 	bl	8002cf8 <HAL_RCC_ClockConfig>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003e6:	f000 f81b 	bl	8000420 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 80003ea:	4b0c      	ldr	r3, [pc, #48]	@ (800041c <SystemClock_Config+0xcc>)
 80003ec:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM8|RCC_PERIPHCLK_TIM2
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003ee:	2300      	movs	r3, #0
 80003f0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80003f2:	2300      	movs	r3, #0
 80003f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 80003f6:	2300      	movs	r3, #0
 80003f8:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80003fa:	2300      	movs	r3, #0
 80003fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80003fe:	2300      	movs	r3, #0
 8000400:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	4618      	mov	r0, r3
 8000406:	f002 fead 	bl	8003164 <HAL_RCCEx_PeriphCLKConfig>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000410:	f000 f806 	bl	8000420 <Error_Handler>
  }
}
 8000414:	bf00      	nop
 8000416:	3798      	adds	r7, #152	@ 0x98
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	00303002 	.word	0x00303002

08000420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000424:	b672      	cpsid	i
}
 8000426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000428:	bf00      	nop
 800042a:	e7fd      	b.n	8000428 <Error_Handler+0x8>

0800042c <MOTOR_set_one>:
};




void static MOTOR_set_one(motor_st* motor, int8_t speed, uint8_t steps){
 800042c:	b580      	push	{r7, lr}
 800042e:	b084      	sub	sp, #16
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
 8000434:	460b      	mov	r3, r1
 8000436:	70fb      	strb	r3, [r7, #3]
 8000438:	4613      	mov	r3, r2
 800043a:	70bb      	strb	r3, [r7, #2]
	motor->steps_left = steps*MOTOR_STEPS_PER_REVOLUTION+1;
 800043c:	78bb      	ldrb	r3, [r7, #2]
 800043e:	b29b      	uxth	r3, r3
 8000440:	461a      	mov	r2, r3
 8000442:	0092      	lsls	r2, r2, #2
 8000444:	4413      	add	r3, r2
 8000446:	461a      	mov	r2, r3
 8000448:	0091      	lsls	r1, r2, #2
 800044a:	461a      	mov	r2, r3
 800044c:	460b      	mov	r3, r1
 800044e:	4413      	add	r3, r2
 8000450:	015b      	lsls	r3, r3, #5
 8000452:	b29b      	uxth	r3, r3
 8000454:	3301      	adds	r3, #1
 8000456:	b29a      	uxth	r2, r3
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	835a      	strh	r2, [r3, #26]

	HAL_GPIO_WritePin(motor->dir_port, motor->dir_pin, speed > 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	68d8      	ldr	r0, [r3, #12]
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	8859      	ldrh	r1, [r3, #2]
 8000464:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000468:	2b00      	cmp	r3, #0
 800046a:	bfcc      	ite	gt
 800046c:	2301      	movgt	r3, #1
 800046e:	2300      	movle	r3, #0
 8000470:	b2db      	uxtb	r3, r3
 8000472:	461a      	mov	r2, r3
 8000474:	f001 fbd4 	bl	8001c20 <HAL_GPIO_WritePin>
	speed = speed > 0 ? speed : -speed;
 8000478:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800047c:	2b00      	cmp	r3, #0
 800047e:	bfb8      	it	lt
 8000480:	425b      	neglt	r3, r3
 8000482:	b2db      	uxtb	r3, r3
 8000484:	70fb      	strb	r3, [r7, #3]
	motor->timer->Instance->PSC = 0x8000 >> speed; // Mingi LUT
 8000486:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800048a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800048e:	411a      	asrs	r2, r3
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	695b      	ldr	r3, [r3, #20]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	629a      	str	r2, [r3, #40]	@ 0x28
	for (uint8_t i = 0; i < 254; i++){
 8000498:	2300      	movs	r3, #0
 800049a:	73fb      	strb	r3, [r7, #15]
 800049c:	e003      	b.n	80004a6 <MOTOR_set_one+0x7a>
		asm("nop");
 800049e:	bf00      	nop
	for (uint8_t i = 0; i < 254; i++){
 80004a0:	7bfb      	ldrb	r3, [r7, #15]
 80004a2:	3301      	adds	r3, #1
 80004a4:	73fb      	strb	r3, [r7, #15]
 80004a6:	7bfb      	ldrb	r3, [r7, #15]
 80004a8:	2bfd      	cmp	r3, #253	@ 0xfd
 80004aa:	d9f8      	bls.n	800049e <MOTOR_set_one+0x72>
	}
	if (motor->steps_left){
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	8b5b      	ldrh	r3, [r3, #26]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d00d      	beq.n	80004d0 <MOTOR_set_one+0xa4>
		HAL_GPIO_WritePin(motor->en_port, motor->en_pin, GPIO_PIN_SET);
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	6898      	ldr	r0, [r3, #8]
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	881b      	ldrh	r3, [r3, #0]
 80004bc:	2201      	movs	r2, #1
 80004be:	4619      	mov	r1, r3
 80004c0:	f001 fbae 	bl	8001c20 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start_IT(motor->timer, TIM_CHANNEL_1);
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	695b      	ldr	r3, [r3, #20]
 80004c8:	2100      	movs	r1, #0
 80004ca:	4618      	mov	r0, r3
 80004cc:	f003 fff4 	bl	80044b8 <HAL_TIM_PWM_Start_IT>
	}
}
 80004d0:	bf00      	nop
 80004d2:	3710      	adds	r7, #16
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <MOTOR_update>:

void static MOTOR_update(motor_st* motor){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	if (motor->pulse_finished){
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	7f1b      	ldrb	r3, [r3, #28]
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d01d      	beq.n	8000526 <MOTOR_update+0x4e>
		if (motor->steps_left){
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	8b5b      	ldrh	r3, [r3, #26]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d00b      	beq.n	800050a <MOTOR_update+0x32>
			motor->steps_left--;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	8b5b      	ldrh	r3, [r3, #26]
 80004f6:	3b01      	subs	r3, #1
 80004f8:	b29a      	uxth	r2, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	835a      	strh	r2, [r3, #26]
			motor->timer->Instance->CCR1 = MOTOR_CCR1_START_VALUE;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	224b      	movs	r2, #75	@ 0x4b
 8000506:	635a      	str	r2, [r3, #52]	@ 0x34
 8000508:	e00a      	b.n	8000520 <MOTOR_update+0x48>
		} else{
			motor->timer->Instance->CCR1 = 0;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2200      	movs	r2, #0
 8000512:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_TIM_PWM_Stop_IT(motor->timer, TIM_CHANNEL_1);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	695b      	ldr	r3, [r3, #20]
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f004 f924 	bl	8004768 <HAL_TIM_PWM_Stop_IT>
		}
		motor->pulse_finished = false;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2200      	movs	r2, #0
 8000524:	771a      	strb	r2, [r3, #28]
	}
}
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
	...

08000530 <MOTOR_main>:

void MOTOR_main(){
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	MOTOR_update(&motor1);
 8000534:	4808      	ldr	r0, [pc, #32]	@ (8000558 <MOTOR_main+0x28>)
 8000536:	f7ff ffcf 	bl	80004d8 <MOTOR_update>
	MOTOR_update(&motor2);
 800053a:	4808      	ldr	r0, [pc, #32]	@ (800055c <MOTOR_main+0x2c>)
 800053c:	f7ff ffcc 	bl	80004d8 <MOTOR_update>
	MOTOR_update(&motor3);
 8000540:	4807      	ldr	r0, [pc, #28]	@ (8000560 <MOTOR_main+0x30>)
 8000542:	f7ff ffc9 	bl	80004d8 <MOTOR_update>
	MOTOR_update(&motor4);
 8000546:	4807      	ldr	r0, [pc, #28]	@ (8000564 <MOTOR_main+0x34>)
 8000548:	f7ff ffc6 	bl	80004d8 <MOTOR_update>
	MOTOR_update(&motor5);
 800054c:	4806      	ldr	r0, [pc, #24]	@ (8000568 <MOTOR_main+0x38>)
 800054e:	f7ff ffc3 	bl	80004d8 <MOTOR_update>
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	20000000 	.word	0x20000000
 800055c:	20000020 	.word	0x20000020
 8000560:	20000040 	.word	0x20000040
 8000564:	20000060 	.word	0x20000060
 8000568:	20000080 	.word	0x20000080

0800056c <MOTOR_set_all>:

void MOTOR_init(){
	HAL_TIM_PWM_Start_IT(motor1.timer, TIM_CHANNEL_1);
}

void MOTOR_set_all(usart_buffer_st* buf){
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	MOTOR_set_one(&motor1, buf->m1_speed, buf->m1_steps);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	f993 1003 	ldrsb.w	r1, [r3, #3]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	791b      	ldrb	r3, [r3, #4]
 800057e:	461a      	mov	r2, r3
 8000580:	4815      	ldr	r0, [pc, #84]	@ (80005d8 <MOTOR_set_all+0x6c>)
 8000582:	f7ff ff53 	bl	800042c <MOTOR_set_one>
	MOTOR_set_one(&motor2, buf->m2_speed, buf->m2_steps);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	f993 1005 	ldrsb.w	r1, [r3, #5]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	799b      	ldrb	r3, [r3, #6]
 8000590:	461a      	mov	r2, r3
 8000592:	4812      	ldr	r0, [pc, #72]	@ (80005dc <MOTOR_set_all+0x70>)
 8000594:	f7ff ff4a 	bl	800042c <MOTOR_set_one>
	MOTOR_set_one(&motor3, buf->m3_speed, buf->m3_steps);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	f993 1007 	ldrsb.w	r1, [r3, #7]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	7a1b      	ldrb	r3, [r3, #8]
 80005a2:	461a      	mov	r2, r3
 80005a4:	480e      	ldr	r0, [pc, #56]	@ (80005e0 <MOTOR_set_all+0x74>)
 80005a6:	f7ff ff41 	bl	800042c <MOTOR_set_one>
	MOTOR_set_one(&motor4, buf->m4_speed, buf->m4_steps);
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	f993 1009 	ldrsb.w	r1, [r3, #9]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	7a9b      	ldrb	r3, [r3, #10]
 80005b4:	461a      	mov	r2, r3
 80005b6:	480b      	ldr	r0, [pc, #44]	@ (80005e4 <MOTOR_set_all+0x78>)
 80005b8:	f7ff ff38 	bl	800042c <MOTOR_set_one>
	MOTOR_set_one(&motor5, buf->m5_speed, buf->m5_steps);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	f993 100b 	ldrsb.w	r1, [r3, #11]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	7b1b      	ldrb	r3, [r3, #12]
 80005c6:	461a      	mov	r2, r3
 80005c8:	4807      	ldr	r0, [pc, #28]	@ (80005e8 <MOTOR_set_all+0x7c>)
 80005ca:	f7ff ff2f 	bl	800042c <MOTOR_set_one>
}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000000 	.word	0x20000000
 80005dc:	20000020 	.word	0x20000020
 80005e0:	20000040 	.word	0x20000040
 80005e4:	20000060 	.word	0x20000060
 80005e8:	20000080 	.word	0x20000080

080005ec <MOTOR_interrupt>:

void MOTOR_interrupt(TIM_HandleTypeDef* htim){
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	if (htim == motor1.timer){
 80005f4:	4b16      	ldr	r3, [pc, #88]	@ (8000650 <MOTOR_interrupt+0x64>)
 80005f6:	695b      	ldr	r3, [r3, #20]
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	429a      	cmp	r2, r3
 80005fc:	d102      	bne.n	8000604 <MOTOR_interrupt+0x18>
		motor1.pulse_finished = true;
 80005fe:	4b14      	ldr	r3, [pc, #80]	@ (8000650 <MOTOR_interrupt+0x64>)
 8000600:	2201      	movs	r2, #1
 8000602:	771a      	strb	r2, [r3, #28]
	}
	if (htim == motor2.timer){
 8000604:	4b13      	ldr	r3, [pc, #76]	@ (8000654 <MOTOR_interrupt+0x68>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	429a      	cmp	r2, r3
 800060c:	d102      	bne.n	8000614 <MOTOR_interrupt+0x28>
		motor2.pulse_finished = true;
 800060e:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <MOTOR_interrupt+0x68>)
 8000610:	2201      	movs	r2, #1
 8000612:	771a      	strb	r2, [r3, #28]
	}
	if (htim == motor3.timer){
 8000614:	4b10      	ldr	r3, [pc, #64]	@ (8000658 <MOTOR_interrupt+0x6c>)
 8000616:	695b      	ldr	r3, [r3, #20]
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	429a      	cmp	r2, r3
 800061c:	d102      	bne.n	8000624 <MOTOR_interrupt+0x38>
		motor3.pulse_finished = true;
 800061e:	4b0e      	ldr	r3, [pc, #56]	@ (8000658 <MOTOR_interrupt+0x6c>)
 8000620:	2201      	movs	r2, #1
 8000622:	771a      	strb	r2, [r3, #28]
	}
	if (htim == motor4.timer){
 8000624:	4b0d      	ldr	r3, [pc, #52]	@ (800065c <MOTOR_interrupt+0x70>)
 8000626:	695b      	ldr	r3, [r3, #20]
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	429a      	cmp	r2, r3
 800062c:	d102      	bne.n	8000634 <MOTOR_interrupt+0x48>
		motor4.pulse_finished = true;
 800062e:	4b0b      	ldr	r3, [pc, #44]	@ (800065c <MOTOR_interrupt+0x70>)
 8000630:	2201      	movs	r2, #1
 8000632:	771a      	strb	r2, [r3, #28]
	}
	if (htim == motor5.timer){
 8000634:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <MOTOR_interrupt+0x74>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	429a      	cmp	r2, r3
 800063c:	d102      	bne.n	8000644 <MOTOR_interrupt+0x58>
		motor5.pulse_finished = true;
 800063e:	4b08      	ldr	r3, [pc, #32]	@ (8000660 <MOTOR_interrupt+0x74>)
 8000640:	2201      	movs	r2, #1
 8000642:	771a      	strb	r2, [r3, #28]
	}

}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	20000000 	.word	0x20000000
 8000654:	20000020 	.word	0x20000020
 8000658:	20000040 	.word	0x20000040
 800065c:	20000060 	.word	0x20000060
 8000660:	20000080 	.word	0x20000080

08000664 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef* htim){
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	MOTOR_interrupt(htim);
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f7ff ffbd 	bl	80005ec <MOTOR_interrupt>
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
	...

0800067c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000680:	4b1b      	ldr	r3, [pc, #108]	@ (80006f0 <MX_SPI2_Init+0x74>)
 8000682:	4a1c      	ldr	r2, [pc, #112]	@ (80006f4 <MX_SPI2_Init+0x78>)
 8000684:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000686:	4b1a      	ldr	r3, [pc, #104]	@ (80006f0 <MX_SPI2_Init+0x74>)
 8000688:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800068c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800068e:	4b18      	ldr	r3, [pc, #96]	@ (80006f0 <MX_SPI2_Init+0x74>)
 8000690:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000694:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000696:	4b16      	ldr	r3, [pc, #88]	@ (80006f0 <MX_SPI2_Init+0x74>)
 8000698:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 800069c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800069e:	4b14      	ldr	r3, [pc, #80]	@ (80006f0 <MX_SPI2_Init+0x74>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006a4:	4b12      	ldr	r3, [pc, #72]	@ (80006f0 <MX_SPI2_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006aa:	4b11      	ldr	r3, [pc, #68]	@ (80006f0 <MX_SPI2_Init+0x74>)
 80006ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006b0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <MX_SPI2_Init+0x74>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006b8:	4b0d      	ldr	r3, [pc, #52]	@ (80006f0 <MX_SPI2_Init+0x74>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006be:	4b0c      	ldr	r3, [pc, #48]	@ (80006f0 <MX_SPI2_Init+0x74>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	@ (80006f0 <MX_SPI2_Init+0x74>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80006ca:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <MX_SPI2_Init+0x74>)
 80006cc:	2207      	movs	r2, #7
 80006ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006d0:	4b07      	ldr	r3, [pc, #28]	@ (80006f0 <MX_SPI2_Init+0x74>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006d6:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <MX_SPI2_Init+0x74>)
 80006d8:	2208      	movs	r2, #8
 80006da:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006dc:	4804      	ldr	r0, [pc, #16]	@ (80006f0 <MX_SPI2_Init+0x74>)
 80006de:	f002 ff5f 	bl	80035a0 <HAL_SPI_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 80006e8:	f7ff fe9a 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000104 	.word	0x20000104
 80006f4:	40003800 	.word	0x40003800

080006f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	@ 0x28
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a26      	ldr	r2, [pc, #152]	@ (80007b0 <HAL_SPI_MspInit+0xb8>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d146      	bne.n	80007a8 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800071a:	4b26      	ldr	r3, [pc, #152]	@ (80007b4 <HAL_SPI_MspInit+0xbc>)
 800071c:	69db      	ldr	r3, [r3, #28]
 800071e:	4a25      	ldr	r2, [pc, #148]	@ (80007b4 <HAL_SPI_MspInit+0xbc>)
 8000720:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000724:	61d3      	str	r3, [r2, #28]
 8000726:	4b23      	ldr	r3, [pc, #140]	@ (80007b4 <HAL_SPI_MspInit+0xbc>)
 8000728:	69db      	ldr	r3, [r3, #28]
 800072a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	4b20      	ldr	r3, [pc, #128]	@ (80007b4 <HAL_SPI_MspInit+0xbc>)
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	4a1f      	ldr	r2, [pc, #124]	@ (80007b4 <HAL_SPI_MspInit+0xbc>)
 8000738:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800073c:	6153      	str	r3, [r2, #20]
 800073e:	4b1d      	ldr	r3, [pc, #116]	@ (80007b4 <HAL_SPI_MspInit+0xbc>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	4b1a      	ldr	r3, [pc, #104]	@ (80007b4 <HAL_SPI_MspInit+0xbc>)
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	4a19      	ldr	r2, [pc, #100]	@ (80007b4 <HAL_SPI_MspInit+0xbc>)
 8000750:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000754:	6153      	str	r3, [r2, #20]
 8000756:	4b17      	ldr	r3, [pc, #92]	@ (80007b4 <HAL_SPI_MspInit+0xbc>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PA10     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000762:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000768:	2302      	movs	r3, #2
 800076a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000770:	2303      	movs	r3, #3
 8000772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000774:	2305      	movs	r3, #5
 8000776:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	4619      	mov	r1, r3
 800077e:	480e      	ldr	r0, [pc, #56]	@ (80007b8 <HAL_SPI_MspInit+0xc0>)
 8000780:	f001 f8c4 	bl	800190c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000784:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078a:	2302      	movs	r3, #2
 800078c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000792:	2303      	movs	r3, #3
 8000794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000796:	2305      	movs	r3, #5
 8000798:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	4619      	mov	r1, r3
 80007a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a4:	f001 f8b2 	bl	800190c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80007a8:	bf00      	nop
 80007aa:	3728      	adds	r7, #40	@ 0x28
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40003800 	.word	0x40003800
 80007b4:	40021000 	.word	0x40021000
 80007b8:	48000400 	.word	0x48000400

080007bc <SPI_init>:
    .enc_4 = {.cs_pin = CS_ENC_4_Pin, .cs_port = CS_ENC_4_GPIO_Port}, // Encoder 4
    .enc_5 = {.cs_pin = CS_ENC_5_Pin, .cs_port = CS_ENC_5_GPIO_Port}  // Encoder 5
};


void SPI_init(){
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(encoders.enc_1.cs_port, encoders.enc_1.cs_pin, GPIO_PIN_SET);
 80007c0:	4b14      	ldr	r3, [pc, #80]	@ (8000814 <SPI_init+0x58>)
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	4a13      	ldr	r2, [pc, #76]	@ (8000814 <SPI_init+0x58>)
 80007c6:	8891      	ldrh	r1, [r2, #4]
 80007c8:	2201      	movs	r2, #1
 80007ca:	4618      	mov	r0, r3
 80007cc:	f001 fa28 	bl	8001c20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(encoders.enc_2.cs_port, encoders.enc_2.cs_pin, GPIO_PIN_SET);
 80007d0:	4b10      	ldr	r3, [pc, #64]	@ (8000814 <SPI_init+0x58>)
 80007d2:	695b      	ldr	r3, [r3, #20]
 80007d4:	4a0f      	ldr	r2, [pc, #60]	@ (8000814 <SPI_init+0x58>)
 80007d6:	8a11      	ldrh	r1, [r2, #16]
 80007d8:	2201      	movs	r2, #1
 80007da:	4618      	mov	r0, r3
 80007dc:	f001 fa20 	bl	8001c20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(encoders.enc_3.cs_port, encoders.enc_3.cs_pin, GPIO_PIN_SET);
 80007e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <SPI_init+0x58>)
 80007e2:	6a1b      	ldr	r3, [r3, #32]
 80007e4:	4a0b      	ldr	r2, [pc, #44]	@ (8000814 <SPI_init+0x58>)
 80007e6:	8b91      	ldrh	r1, [r2, #28]
 80007e8:	2201      	movs	r2, #1
 80007ea:	4618      	mov	r0, r3
 80007ec:	f001 fa18 	bl	8001c20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(encoders.enc_4.cs_port, encoders.enc_4.cs_pin, GPIO_PIN_SET);
 80007f0:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <SPI_init+0x58>)
 80007f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007f4:	4a07      	ldr	r2, [pc, #28]	@ (8000814 <SPI_init+0x58>)
 80007f6:	8d11      	ldrh	r1, [r2, #40]	@ 0x28
 80007f8:	2201      	movs	r2, #1
 80007fa:	4618      	mov	r0, r3
 80007fc:	f001 fa10 	bl	8001c20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(encoders.enc_5.cs_port, encoders.enc_5.cs_pin, GPIO_PIN_SET);
 8000800:	4b04      	ldr	r3, [pc, #16]	@ (8000814 <SPI_init+0x58>)
 8000802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000804:	4a03      	ldr	r2, [pc, #12]	@ (8000814 <SPI_init+0x58>)
 8000806:	8e91      	ldrh	r1, [r2, #52]	@ 0x34
 8000808:	2201      	movs	r2, #1
 800080a:	4618      	mov	r0, r3
 800080c:	f001 fa08 	bl	8001c20 <HAL_GPIO_WritePin>
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	200000a0 	.word	0x200000a0

08000818 <UART2_SendData>:
void UART2_SendData(uint8_t *data, uint16_t size) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	460b      	mov	r3, r1
 8000822:	807b      	strh	r3, [r7, #2]
    HAL_UART_Transmit(&huart2, data, size, HAL_MAX_DELAY);
 8000824:	887a      	ldrh	r2, [r7, #2]
 8000826:	f04f 33ff 	mov.w	r3, #4294967295
 800082a:	6879      	ldr	r1, [r7, #4]
 800082c:	4803      	ldr	r0, [pc, #12]	@ (800083c <UART2_SendData+0x24>)
 800082e:	f005 f98d 	bl	8005b4c <HAL_UART_Transmit>
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200002e4 	.word	0x200002e4

08000840 <checksum_check>:

static bool checksum_check(uint16_t value){
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	80fb      	strh	r3, [r7, #6]
	uint8_t odd_parity = 1 << 1 & value;
 800084a:	88fb      	ldrh	r3, [r7, #6]
 800084c:	b2db      	uxtb	r3, r3
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	73fb      	strb	r3, [r7, #15]
	uint8_t even_parity = 1 & value;
 8000854:	88fb      	ldrh	r3, [r7, #6]
 8000856:	b2db      	uxtb	r3, r3
 8000858:	f003 0301 	and.w	r3, r3, #1
 800085c:	73bb      	strb	r3, [r7, #14]
	for (uint8_t even_i = 3, odd_i = 2; even_i < 16; even_i++, odd_i++){
 800085e:	2303      	movs	r3, #3
 8000860:	737b      	strb	r3, [r7, #13]
 8000862:	2302      	movs	r3, #2
 8000864:	733b      	strb	r3, [r7, #12]
 8000866:	e021      	b.n	80008ac <checksum_check+0x6c>
		odd_parity ^= value & 1 << odd_i;
 8000868:	88fb      	ldrh	r3, [r7, #6]
 800086a:	b25a      	sxtb	r2, r3
 800086c:	7b3b      	ldrb	r3, [r7, #12]
 800086e:	2101      	movs	r1, #1
 8000870:	fa01 f303 	lsl.w	r3, r1, r3
 8000874:	b25b      	sxtb	r3, r3
 8000876:	4013      	ands	r3, r2
 8000878:	b25a      	sxtb	r2, r3
 800087a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800087e:	4053      	eors	r3, r2
 8000880:	b25b      	sxtb	r3, r3
 8000882:	73fb      	strb	r3, [r7, #15]
		even_parity ^= value & 1 << even_i;
 8000884:	88fb      	ldrh	r3, [r7, #6]
 8000886:	b25a      	sxtb	r2, r3
 8000888:	7b7b      	ldrb	r3, [r7, #13]
 800088a:	2101      	movs	r1, #1
 800088c:	fa01 f303 	lsl.w	r3, r1, r3
 8000890:	b25b      	sxtb	r3, r3
 8000892:	4013      	ands	r3, r2
 8000894:	b25a      	sxtb	r2, r3
 8000896:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800089a:	4053      	eors	r3, r2
 800089c:	b25b      	sxtb	r3, r3
 800089e:	73bb      	strb	r3, [r7, #14]
	for (uint8_t even_i = 3, odd_i = 2; even_i < 16; even_i++, odd_i++){
 80008a0:	7b7b      	ldrb	r3, [r7, #13]
 80008a2:	3301      	adds	r3, #1
 80008a4:	737b      	strb	r3, [r7, #13]
 80008a6:	7b3b      	ldrb	r3, [r7, #12]
 80008a8:	3301      	adds	r3, #1
 80008aa:	733b      	strb	r3, [r7, #12]
 80008ac:	7b7b      	ldrb	r3, [r7, #13]
 80008ae:	2b0f      	cmp	r3, #15
 80008b0:	d9da      	bls.n	8000868 <checksum_check+0x28>
	}
	return ((value >> 15) == odd_parity)&((value >> 14) == odd_parity);
 80008b2:	88fb      	ldrh	r3, [r7, #6]
 80008b4:	0bdb      	lsrs	r3, r3, #15
 80008b6:	b29a      	uxth	r2, r3
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	429a      	cmp	r2, r3
 80008be:	bf0c      	ite	eq
 80008c0:	2301      	moveq	r3, #1
 80008c2:	2300      	movne	r3, #0
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	88fb      	ldrh	r3, [r7, #6]
 80008c8:	0b9b      	lsrs	r3, r3, #14
 80008ca:	b299      	uxth	r1, r3
 80008cc:	7bfb      	ldrb	r3, [r7, #15]
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	4299      	cmp	r1, r3
 80008d2:	bf0c      	ite	eq
 80008d4:	2301      	moveq	r3, #1
 80008d6:	2300      	movne	r3, #0
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	4013      	ands	r3, r2
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	b2db      	uxtb	r3, r3
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3714      	adds	r7, #20
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <SPI_read_data>:

void SPI_read_data(encoder_st* encoder){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(encoder->cs_port, encoder->cs_pin, GPIO_PIN_RESET);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6898      	ldr	r0, [r3, #8]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	889b      	ldrh	r3, [r3, #4]
 8000900:	2200      	movs	r2, #0
 8000902:	4619      	mov	r1, r3
 8000904:	f001 f98c 	bl	8001c20 <HAL_GPIO_WritePin>
	(&hspi2, encoder->value, sizeof(encoders.enc_1.value), HAL_MAX_DELAY);
	HAL_SPI_Receive(&hspi2, encoder->value, sizeof(encoders.enc_2.value), HAL_MAX_DELAY);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	881b      	ldrh	r3, [r3, #0]
 800090c:	4619      	mov	r1, r3
 800090e:	f04f 33ff 	mov.w	r3, #4294967295
 8000912:	2202      	movs	r2, #2
 8000914:	481c      	ldr	r0, [pc, #112]	@ (8000988 <SPI_read_data+0x98>)
 8000916:	f002 feee 	bl	80036f6 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi2, encoder->value, sizeof(encoders.enc_3.value), HAL_MAX_DELAY);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	881b      	ldrh	r3, [r3, #0]
 800091e:	4619      	mov	r1, r3
 8000920:	f04f 33ff 	mov.w	r3, #4294967295
 8000924:	2202      	movs	r2, #2
 8000926:	4818      	ldr	r0, [pc, #96]	@ (8000988 <SPI_read_data+0x98>)
 8000928:	f002 fee5 	bl	80036f6 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi2, encoder->value, sizeof(encoders.enc_4.value), HAL_MAX_DELAY);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	881b      	ldrh	r3, [r3, #0]
 8000930:	4619      	mov	r1, r3
 8000932:	f04f 33ff 	mov.w	r3, #4294967295
 8000936:	2202      	movs	r2, #2
 8000938:	4813      	ldr	r0, [pc, #76]	@ (8000988 <SPI_read_data+0x98>)
 800093a:	f002 fedc 	bl	80036f6 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi2, encoder->value, sizeof(encoders.enc_5.value), HAL_MAX_DELAY);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	4619      	mov	r1, r3
 8000944:	f04f 33ff 	mov.w	r3, #4294967295
 8000948:	2202      	movs	r2, #2
 800094a:	480f      	ldr	r0, [pc, #60]	@ (8000988 <SPI_read_data+0x98>)
 800094c:	f002 fed3 	bl	80036f6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(encoder->cs_port, encoder->cs_pin, GPIO_PIN_SET);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6898      	ldr	r0, [r3, #8]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	889b      	ldrh	r3, [r3, #4]
 8000958:	2201      	movs	r2, #1
 800095a:	4619      	mov	r1, r3
 800095c:	f001 f960 	bl	8001c20 <HAL_GPIO_WritePin>
	encoder->is_valid = checksum_check(encoder->is_valid);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	789b      	ldrb	r3, [r3, #2]
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff ff6b 	bl	8000840 <checksum_check>
 800096a:	4603      	mov	r3, r0
 800096c:	461a      	mov	r2, r3
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	709a      	strb	r2, [r3, #2]
    UART2_SendData(encoder->value, sizeof(encoder->value));
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	881b      	ldrh	r3, [r3, #0]
 8000976:	2102      	movs	r1, #2
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff ff4d 	bl	8000818 <UART2_SendData>
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000104 	.word	0x20000104

0800098c <SPI_read_all>:

void SPI_read_all(){
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
	encoder_st* ptr = &encoders;
 8000992:	4b0d      	ldr	r3, [pc, #52]	@ (80009c8 <SPI_read_all+0x3c>)
 8000994:	603b      	str	r3, [r7, #0]
	for (uint8_t i=0;i<sizeof(encoders)/sizeof(encoder_st);i++){
 8000996:	2300      	movs	r3, #0
 8000998:	71fb      	strb	r3, [r7, #7]
 800099a:	e00d      	b.n	80009b8 <SPI_read_all+0x2c>
		SPI_read_data(&ptr[i]);
 800099c:	79fa      	ldrb	r2, [r7, #7]
 800099e:	4613      	mov	r3, r2
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	4413      	add	r3, r2
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	461a      	mov	r2, r3
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	4413      	add	r3, r2
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff9f 	bl	80008f0 <SPI_read_data>
	for (uint8_t i=0;i<sizeof(encoders)/sizeof(encoder_st);i++){
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	3301      	adds	r3, #1
 80009b6:	71fb      	strb	r3, [r7, #7]
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	2b04      	cmp	r3, #4
 80009bc:	d9ee      	bls.n	800099c <SPI_read_all+0x10>
	}
}
 80009be:	bf00      	nop
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	200000a0 	.word	0x200000a0

080009cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <HAL_MspInit+0x44>)
 80009d4:	699b      	ldr	r3, [r3, #24]
 80009d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000a10 <HAL_MspInit+0x44>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6193      	str	r3, [r2, #24]
 80009de:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <HAL_MspInit+0x44>)
 80009e0:	699b      	ldr	r3, [r3, #24]
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ea:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <HAL_MspInit+0x44>)
 80009ec:	69db      	ldr	r3, [r3, #28]
 80009ee:	4a08      	ldr	r2, [pc, #32]	@ (8000a10 <HAL_MspInit+0x44>)
 80009f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f4:	61d3      	str	r3, [r2, #28]
 80009f6:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <HAL_MspInit+0x44>)
 80009f8:	69db      	ldr	r3, [r3, #28]
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a02:	2007      	movs	r0, #7
 8000a04:	f000 feca 	bl	800179c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40021000 	.word	0x40021000

08000a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <NMI_Handler+0x4>

08000a1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <HardFault_Handler+0x4>

08000a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <MemManage_Handler+0x4>

08000a2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <BusFault_Handler+0x4>

08000a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <UsageFault_Handler+0x4>

08000a3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a6a:	f000 fda7 	bl	80015bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a78:	4802      	ldr	r0, [pc, #8]	@ (8000a84 <TIM1_CC_IRQHandler+0x10>)
 8000a7a:	f003 ff5f 	bl	800493c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000168 	.word	0x20000168

08000a88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a8c:	4802      	ldr	r0, [pc, #8]	@ (8000a98 <TIM2_IRQHandler+0x10>)
 8000a8e:	f003 ff55 	bl	800493c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200001b4 	.word	0x200001b4

08000a9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000aa0:	4802      	ldr	r0, [pc, #8]	@ (8000aac <TIM3_IRQHandler+0x10>)
 8000aa2:	f003 ff4b 	bl	800493c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000200 	.word	0x20000200

08000ab0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ab4:	4802      	ldr	r0, [pc, #8]	@ (8000ac0 <TIM4_IRQHandler+0x10>)
 8000ab6:	f003 ff41 	bl	800493c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	2000024c 	.word	0x2000024c

08000ac4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000ac8:	4802      	ldr	r0, [pc, #8]	@ (8000ad4 <SPI2_IRQHandler+0x10>)
 8000aca:	f003 f96d 	bl	8003da8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000104 	.word	0x20000104

08000ad8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000adc:	4802      	ldr	r0, [pc, #8]	@ (8000ae8 <USART2_IRQHandler+0x10>)
 8000ade:	f005 f903 	bl	8005ce8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200002e4 	.word	0x200002e4

08000aec <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000af0:	4802      	ldr	r0, [pc, #8]	@ (8000afc <TIM8_CC_IRQHandler+0x10>)
 8000af2:	f003 ff23 	bl	800493c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000298 	.word	0x20000298

08000b00 <SystemInit>:
/**
 * @brief  Setup the microcontroller system
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
	/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8000b04:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <SystemInit+0x20>)
 8000b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b0a:	4a05      	ldr	r2, [pc, #20]	@ (8000b20 <SystemInit+0x20>)
 8000b0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b09a      	sub	sp, #104	@ 0x68
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b2a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b38:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b44:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
 8000b54:	615a      	str	r2, [r3, #20]
 8000b56:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	222c      	movs	r2, #44	@ 0x2c
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f006 fa6a 	bl	8007038 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b64:	4b43      	ldr	r3, [pc, #268]	@ (8000c74 <MX_TIM1_Init+0x150>)
 8000b66:	4a44      	ldr	r2, [pc, #272]	@ (8000c78 <MX_TIM1_Init+0x154>)
 8000b68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 8000b6a:	4b42      	ldr	r3, [pc, #264]	@ (8000c74 <MX_TIM1_Init+0x150>)
 8000b6c:	2204      	movs	r2, #4
 8000b6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b70:	4b40      	ldr	r3, [pc, #256]	@ (8000c74 <MX_TIM1_Init+0x150>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 150;
 8000b76:	4b3f      	ldr	r3, [pc, #252]	@ (8000c74 <MX_TIM1_Init+0x150>)
 8000b78:	2296      	movs	r2, #150	@ 0x96
 8000b7a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b7c:	4b3d      	ldr	r3, [pc, #244]	@ (8000c74 <MX_TIM1_Init+0x150>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b82:	4b3c      	ldr	r3, [pc, #240]	@ (8000c74 <MX_TIM1_Init+0x150>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b88:	4b3a      	ldr	r3, [pc, #232]	@ (8000c74 <MX_TIM1_Init+0x150>)
 8000b8a:	2280      	movs	r2, #128	@ 0x80
 8000b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b8e:	4839      	ldr	r0, [pc, #228]	@ (8000c74 <MX_TIM1_Init+0x150>)
 8000b90:	f003 fbda 	bl	8004348 <HAL_TIM_Base_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000b9a:	f7ff fc41 	bl	8000420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ba2:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ba4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4832      	ldr	r0, [pc, #200]	@ (8000c74 <MX_TIM1_Init+0x150>)
 8000bac:	f004 f8fa 	bl	8004da4 <HAL_TIM_ConfigClockSource>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000bb6:	f7ff fc33 	bl	8000420 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bba:	482e      	ldr	r0, [pc, #184]	@ (8000c74 <MX_TIM1_Init+0x150>)
 8000bbc:	f003 fc1b 	bl	80043f6 <HAL_TIM_PWM_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000bc6:	f7ff fc2b 	bl	8000420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bd6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4825      	ldr	r0, [pc, #148]	@ (8000c74 <MX_TIM1_Init+0x150>)
 8000bde:	f004 fe37 	bl	8005850 <HAL_TIMEx_MasterConfigSynchronization>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000be8:	f7ff fc1a 	bl	8000420 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bec:	2360      	movs	r3, #96	@ 0x60
 8000bee:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 75;
 8000bf0:	234b      	movs	r3, #75	@ 0x4b
 8000bf2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c00:	2300      	movs	r3, #0
 8000c02:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c04:	2300      	movs	r3, #0
 8000c06:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c08:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4818      	ldr	r0, [pc, #96]	@ (8000c74 <MX_TIM1_Init+0x150>)
 8000c12:	f003 ffb3 	bl	8004b7c <HAL_TIM_PWM_ConfigChannel>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000c1c:	f7ff fc00 	bl	8000420 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c38:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000c46:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	4619      	mov	r1, r3
 8000c54:	4807      	ldr	r0, [pc, #28]	@ (8000c74 <MX_TIM1_Init+0x150>)
 8000c56:	f004 fe87 	bl	8005968 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000c60:	f7ff fbde 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c64:	4803      	ldr	r0, [pc, #12]	@ (8000c74 <MX_TIM1_Init+0x150>)
 8000c66:	f000 faab 	bl	80011c0 <HAL_TIM_MspPostInit>

}
 8000c6a:	bf00      	nop
 8000c6c:	3768      	adds	r7, #104	@ 0x68
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000168 	.word	0x20000168
 8000c78:	40012c00 	.word	0x40012c00

08000c7c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08e      	sub	sp, #56	@ 0x38
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c82:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c90:	f107 031c 	add.w	r3, r7, #28
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c9c:	463b      	mov	r3, r7
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	611a      	str	r2, [r3, #16]
 8000caa:	615a      	str	r2, [r3, #20]
 8000cac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cae:	4b2d      	ldr	r3, [pc, #180]	@ (8000d64 <MX_TIM2_Init+0xe8>)
 8000cb0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cb4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 480-1;
 8000cb6:	4b2b      	ldr	r3, [pc, #172]	@ (8000d64 <MX_TIM2_Init+0xe8>)
 8000cb8:	f240 12df 	movw	r2, #479	@ 0x1df
 8000cbc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cbe:	4b29      	ldr	r3, [pc, #164]	@ (8000d64 <MX_TIM2_Init+0xe8>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 150;
 8000cc4:	4b27      	ldr	r3, [pc, #156]	@ (8000d64 <MX_TIM2_Init+0xe8>)
 8000cc6:	2296      	movs	r2, #150	@ 0x96
 8000cc8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cca:	4b26      	ldr	r3, [pc, #152]	@ (8000d64 <MX_TIM2_Init+0xe8>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cd0:	4b24      	ldr	r3, [pc, #144]	@ (8000d64 <MX_TIM2_Init+0xe8>)
 8000cd2:	2280      	movs	r2, #128	@ 0x80
 8000cd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cd6:	4823      	ldr	r0, [pc, #140]	@ (8000d64 <MX_TIM2_Init+0xe8>)
 8000cd8:	f003 fb36 	bl	8004348 <HAL_TIM_Base_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000ce2:	f7ff fb9d 	bl	8000420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ce6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cea:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	481c      	ldr	r0, [pc, #112]	@ (8000d64 <MX_TIM2_Init+0xe8>)
 8000cf4:	f004 f856 	bl	8004da4 <HAL_TIM_ConfigClockSource>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000cfe:	f7ff fb8f 	bl	8000420 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d02:	4818      	ldr	r0, [pc, #96]	@ (8000d64 <MX_TIM2_Init+0xe8>)
 8000d04:	f003 fb77 	bl	80043f6 <HAL_TIM_PWM_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000d0e:	f7ff fb87 	bl	8000420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d1a:	f107 031c 	add.w	r3, r7, #28
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4810      	ldr	r0, [pc, #64]	@ (8000d64 <MX_TIM2_Init+0xe8>)
 8000d22:	f004 fd95 	bl	8005850 <HAL_TIMEx_MasterConfigSynchronization>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000d2c:	f7ff fb78 	bl	8000420 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d30:	2360      	movs	r3, #96	@ 0x60
 8000d32:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 75;
 8000d34:	234b      	movs	r3, #75	@ 0x4b
 8000d36:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d40:	463b      	mov	r3, r7
 8000d42:	2200      	movs	r2, #0
 8000d44:	4619      	mov	r1, r3
 8000d46:	4807      	ldr	r0, [pc, #28]	@ (8000d64 <MX_TIM2_Init+0xe8>)
 8000d48:	f003 ff18 	bl	8004b7c <HAL_TIM_PWM_ConfigChannel>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000d52:	f7ff fb65 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d56:	4803      	ldr	r0, [pc, #12]	@ (8000d64 <MX_TIM2_Init+0xe8>)
 8000d58:	f000 fa32 	bl	80011c0 <HAL_TIM_MspPostInit>

}
 8000d5c:	bf00      	nop
 8000d5e:	3738      	adds	r7, #56	@ 0x38
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	200001b4 	.word	0x200001b4

08000d68 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08e      	sub	sp, #56	@ 0x38
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d7c:	f107 031c 	add.w	r3, r7, #28
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d88:	463b      	mov	r3, r7
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]
 8000d94:	611a      	str	r2, [r3, #16]
 8000d96:	615a      	str	r2, [r3, #20]
 8000d98:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d9a:	4b2c      	ldr	r3, [pc, #176]	@ (8000e4c <MX_TIM3_Init+0xe4>)
 8000d9c:	4a2c      	ldr	r2, [pc, #176]	@ (8000e50 <MX_TIM3_Init+0xe8>)
 8000d9e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000da0:	4b2a      	ldr	r3, [pc, #168]	@ (8000e4c <MX_TIM3_Init+0xe4>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da6:	4b29      	ldr	r3, [pc, #164]	@ (8000e4c <MX_TIM3_Init+0xe4>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 150;
 8000dac:	4b27      	ldr	r3, [pc, #156]	@ (8000e4c <MX_TIM3_Init+0xe4>)
 8000dae:	2296      	movs	r2, #150	@ 0x96
 8000db0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db2:	4b26      	ldr	r3, [pc, #152]	@ (8000e4c <MX_TIM3_Init+0xe4>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000db8:	4b24      	ldr	r3, [pc, #144]	@ (8000e4c <MX_TIM3_Init+0xe4>)
 8000dba:	2280      	movs	r2, #128	@ 0x80
 8000dbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dbe:	4823      	ldr	r0, [pc, #140]	@ (8000e4c <MX_TIM3_Init+0xe4>)
 8000dc0:	f003 fac2 	bl	8004348 <HAL_TIM_Base_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000dca:	f7ff fb29 	bl	8000420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000dd4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dd8:	4619      	mov	r1, r3
 8000dda:	481c      	ldr	r0, [pc, #112]	@ (8000e4c <MX_TIM3_Init+0xe4>)
 8000ddc:	f003 ffe2 	bl	8004da4 <HAL_TIM_ConfigClockSource>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000de6:	f7ff fb1b 	bl	8000420 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000dea:	4818      	ldr	r0, [pc, #96]	@ (8000e4c <MX_TIM3_Init+0xe4>)
 8000dec:	f003 fb03 	bl	80043f6 <HAL_TIM_PWM_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000df6:	f7ff fb13 	bl	8000420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	4619      	mov	r1, r3
 8000e08:	4810      	ldr	r0, [pc, #64]	@ (8000e4c <MX_TIM3_Init+0xe4>)
 8000e0a:	f004 fd21 	bl	8005850 <HAL_TIMEx_MasterConfigSynchronization>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000e14:	f7ff fb04 	bl	8000420 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e18:	2360      	movs	r3, #96	@ 0x60
 8000e1a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 75;
 8000e1c:	234b      	movs	r3, #75	@ 0x4b
 8000e1e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e20:	2300      	movs	r3, #0
 8000e22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e24:	2300      	movs	r3, #0
 8000e26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e28:	463b      	mov	r3, r7
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4807      	ldr	r0, [pc, #28]	@ (8000e4c <MX_TIM3_Init+0xe4>)
 8000e30:	f003 fea4 	bl	8004b7c <HAL_TIM_PWM_ConfigChannel>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000e3a:	f7ff faf1 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e3e:	4803      	ldr	r0, [pc, #12]	@ (8000e4c <MX_TIM3_Init+0xe4>)
 8000e40:	f000 f9be 	bl	80011c0 <HAL_TIM_MspPostInit>

}
 8000e44:	bf00      	nop
 8000e46:	3738      	adds	r7, #56	@ 0x38
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000200 	.word	0x20000200
 8000e50:	40000400 	.word	0x40000400

08000e54 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08e      	sub	sp, #56	@ 0x38
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e68:	f107 031c 	add.w	r3, r7, #28
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e74:	463b      	mov	r3, r7
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
 8000e80:	611a      	str	r2, [r3, #16]
 8000e82:	615a      	str	r2, [r3, #20]
 8000e84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e86:	4b2c      	ldr	r3, [pc, #176]	@ (8000f38 <MX_TIM4_Init+0xe4>)
 8000e88:	4a2c      	ldr	r2, [pc, #176]	@ (8000f3c <MX_TIM4_Init+0xe8>)
 8000e8a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e8c:	4b2a      	ldr	r3, [pc, #168]	@ (8000f38 <MX_TIM4_Init+0xe4>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e92:	4b29      	ldr	r3, [pc, #164]	@ (8000f38 <MX_TIM4_Init+0xe4>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 150;
 8000e98:	4b27      	ldr	r3, [pc, #156]	@ (8000f38 <MX_TIM4_Init+0xe4>)
 8000e9a:	2296      	movs	r2, #150	@ 0x96
 8000e9c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9e:	4b26      	ldr	r3, [pc, #152]	@ (8000f38 <MX_TIM4_Init+0xe4>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ea4:	4b24      	ldr	r3, [pc, #144]	@ (8000f38 <MX_TIM4_Init+0xe4>)
 8000ea6:	2280      	movs	r2, #128	@ 0x80
 8000ea8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000eaa:	4823      	ldr	r0, [pc, #140]	@ (8000f38 <MX_TIM4_Init+0xe4>)
 8000eac:	f003 fa4c 	bl	8004348 <HAL_TIM_Base_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000eb6:	f7ff fab3 	bl	8000420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ec0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	481c      	ldr	r0, [pc, #112]	@ (8000f38 <MX_TIM4_Init+0xe4>)
 8000ec8:	f003 ff6c 	bl	8004da4 <HAL_TIM_ConfigClockSource>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000ed2:	f7ff faa5 	bl	8000420 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ed6:	4818      	ldr	r0, [pc, #96]	@ (8000f38 <MX_TIM4_Init+0xe4>)
 8000ed8:	f003 fa8d 	bl	80043f6 <HAL_TIM_PWM_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000ee2:	f7ff fa9d 	bl	8000420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000eee:	f107 031c 	add.w	r3, r7, #28
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4810      	ldr	r0, [pc, #64]	@ (8000f38 <MX_TIM4_Init+0xe4>)
 8000ef6:	f004 fcab 	bl	8005850 <HAL_TIMEx_MasterConfigSynchronization>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000f00:	f7ff fa8e 	bl	8000420 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f04:	2360      	movs	r3, #96	@ 0x60
 8000f06:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 75;
 8000f08:	234b      	movs	r3, #75	@ 0x4b
 8000f0a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f10:	2300      	movs	r3, #0
 8000f12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f14:	463b      	mov	r3, r7
 8000f16:	2200      	movs	r2, #0
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4807      	ldr	r0, [pc, #28]	@ (8000f38 <MX_TIM4_Init+0xe4>)
 8000f1c:	f003 fe2e 	bl	8004b7c <HAL_TIM_PWM_ConfigChannel>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000f26:	f7ff fa7b 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f2a:	4803      	ldr	r0, [pc, #12]	@ (8000f38 <MX_TIM4_Init+0xe4>)
 8000f2c:	f000 f948 	bl	80011c0 <HAL_TIM_MspPostInit>

}
 8000f30:	bf00      	nop
 8000f32:	3738      	adds	r7, #56	@ 0x38
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	2000024c 	.word	0x2000024c
 8000f3c:	40000800 	.word	0x40000800

08000f40 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b09a      	sub	sp, #104	@ 0x68
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f46:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f54:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f60:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
 8000f70:	615a      	str	r2, [r3, #20]
 8000f72:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	222c      	movs	r2, #44	@ 0x2c
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f006 f85c 	bl	8007038 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000f80:	4b43      	ldr	r3, [pc, #268]	@ (8001090 <MX_TIM8_Init+0x150>)
 8000f82:	4a44      	ldr	r2, [pc, #272]	@ (8001094 <MX_TIM8_Init+0x154>)
 8000f84:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000f86:	4b42      	ldr	r3, [pc, #264]	@ (8001090 <MX_TIM8_Init+0x150>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f8c:	4b40      	ldr	r3, [pc, #256]	@ (8001090 <MX_TIM8_Init+0x150>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 150;
 8000f92:	4b3f      	ldr	r3, [pc, #252]	@ (8001090 <MX_TIM8_Init+0x150>)
 8000f94:	2296      	movs	r2, #150	@ 0x96
 8000f96:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f98:	4b3d      	ldr	r3, [pc, #244]	@ (8001090 <MX_TIM8_Init+0x150>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000f9e:	4b3c      	ldr	r3, [pc, #240]	@ (8001090 <MX_TIM8_Init+0x150>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fa4:	4b3a      	ldr	r3, [pc, #232]	@ (8001090 <MX_TIM8_Init+0x150>)
 8000fa6:	2280      	movs	r2, #128	@ 0x80
 8000fa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000faa:	4839      	ldr	r0, [pc, #228]	@ (8001090 <MX_TIM8_Init+0x150>)
 8000fac:	f003 f9cc 	bl	8004348 <HAL_TIM_Base_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8000fb6:	f7ff fa33 	bl	8000420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fbe:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000fc0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4832      	ldr	r0, [pc, #200]	@ (8001090 <MX_TIM8_Init+0x150>)
 8000fc8:	f003 feec 	bl	8004da4 <HAL_TIM_ConfigClockSource>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000fd2:	f7ff fa25 	bl	8000420 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000fd6:	482e      	ldr	r0, [pc, #184]	@ (8001090 <MX_TIM8_Init+0x150>)
 8000fd8:	f003 fa0d 	bl	80043f6 <HAL_TIM_PWM_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000fe2:	f7ff fa1d 	bl	8000420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fea:	2300      	movs	r3, #0
 8000fec:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000ff2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4825      	ldr	r0, [pc, #148]	@ (8001090 <MX_TIM8_Init+0x150>)
 8000ffa:	f004 fc29 	bl	8005850 <HAL_TIMEx_MasterConfigSynchronization>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8001004:	f7ff fa0c 	bl	8000420 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001008:	2360      	movs	r3, #96	@ 0x60
 800100a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 75;
 800100c:	234b      	movs	r3, #75	@ 0x4b
 800100e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001010:	2300      	movs	r3, #0
 8001012:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001014:	2300      	movs	r3, #0
 8001016:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001018:	2300      	movs	r3, #0
 800101a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 800101c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001020:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001022:	2300      	movs	r3, #0
 8001024:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001026:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800102a:	2200      	movs	r2, #0
 800102c:	4619      	mov	r1, r3
 800102e:	4818      	ldr	r0, [pc, #96]	@ (8001090 <MX_TIM8_Init+0x150>)
 8001030:	f003 fda4 	bl	8004b7c <HAL_TIM_PWM_ConfigChannel>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 800103a:	f7ff f9f1 	bl	8000420 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800103e:	2300      	movs	r3, #0
 8001040:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001042:	2300      	movs	r3, #0
 8001044:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001052:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001056:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800105c:	2300      	movs	r3, #0
 800105e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001060:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001064:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800106a:	2300      	movs	r3, #0
 800106c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	4619      	mov	r1, r3
 8001072:	4807      	ldr	r0, [pc, #28]	@ (8001090 <MX_TIM8_Init+0x150>)
 8001074:	f004 fc78 	bl	8005968 <HAL_TIMEx_ConfigBreakDeadTime>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 800107e:	f7ff f9cf 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001082:	4803      	ldr	r0, [pc, #12]	@ (8001090 <MX_TIM8_Init+0x150>)
 8001084:	f000 f89c 	bl	80011c0 <HAL_TIM_MspPostInit>

}
 8001088:	bf00      	nop
 800108a:	3768      	adds	r7, #104	@ 0x68
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000298 	.word	0x20000298
 8001094:	40013400 	.word	0x40013400

08001098 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a41      	ldr	r2, [pc, #260]	@ (80011ac <HAL_TIM_Base_MspInit+0x114>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d114      	bne.n	80010d4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010aa:	4b41      	ldr	r3, [pc, #260]	@ (80011b0 <HAL_TIM_Base_MspInit+0x118>)
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	4a40      	ldr	r2, [pc, #256]	@ (80011b0 <HAL_TIM_Base_MspInit+0x118>)
 80010b0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010b4:	6193      	str	r3, [r2, #24]
 80010b6:	4b3e      	ldr	r3, [pc, #248]	@ (80011b0 <HAL_TIM_Base_MspInit+0x118>)
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80010be:	61fb      	str	r3, [r7, #28]
 80010c0:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2100      	movs	r1, #0
 80010c6:	201b      	movs	r0, #27
 80010c8:	f000 fb73 	bl	80017b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80010cc:	201b      	movs	r0, #27
 80010ce:	f000 fb8c 	bl	80017ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80010d2:	e066      	b.n	80011a2 <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM2)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010dc:	d114      	bne.n	8001108 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010de:	4b34      	ldr	r3, [pc, #208]	@ (80011b0 <HAL_TIM_Base_MspInit+0x118>)
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	4a33      	ldr	r2, [pc, #204]	@ (80011b0 <HAL_TIM_Base_MspInit+0x118>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	61d3      	str	r3, [r2, #28]
 80010ea:	4b31      	ldr	r3, [pc, #196]	@ (80011b0 <HAL_TIM_Base_MspInit+0x118>)
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	61bb      	str	r3, [r7, #24]
 80010f4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2100      	movs	r1, #0
 80010fa:	201c      	movs	r0, #28
 80010fc:	f000 fb59 	bl	80017b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001100:	201c      	movs	r0, #28
 8001102:	f000 fb72 	bl	80017ea <HAL_NVIC_EnableIRQ>
}
 8001106:	e04c      	b.n	80011a2 <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM3)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a29      	ldr	r2, [pc, #164]	@ (80011b4 <HAL_TIM_Base_MspInit+0x11c>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d114      	bne.n	800113c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001112:	4b27      	ldr	r3, [pc, #156]	@ (80011b0 <HAL_TIM_Base_MspInit+0x118>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	4a26      	ldr	r2, [pc, #152]	@ (80011b0 <HAL_TIM_Base_MspInit+0x118>)
 8001118:	f043 0302 	orr.w	r3, r3, #2
 800111c:	61d3      	str	r3, [r2, #28]
 800111e:	4b24      	ldr	r3, [pc, #144]	@ (80011b0 <HAL_TIM_Base_MspInit+0x118>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800112a:	2200      	movs	r2, #0
 800112c:	2100      	movs	r1, #0
 800112e:	201d      	movs	r0, #29
 8001130:	f000 fb3f 	bl	80017b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001134:	201d      	movs	r0, #29
 8001136:	f000 fb58 	bl	80017ea <HAL_NVIC_EnableIRQ>
}
 800113a:	e032      	b.n	80011a2 <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM4)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a1d      	ldr	r2, [pc, #116]	@ (80011b8 <HAL_TIM_Base_MspInit+0x120>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d114      	bne.n	8001170 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001146:	4b1a      	ldr	r3, [pc, #104]	@ (80011b0 <HAL_TIM_Base_MspInit+0x118>)
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	4a19      	ldr	r2, [pc, #100]	@ (80011b0 <HAL_TIM_Base_MspInit+0x118>)
 800114c:	f043 0304 	orr.w	r3, r3, #4
 8001150:	61d3      	str	r3, [r2, #28]
 8001152:	4b17      	ldr	r3, [pc, #92]	@ (80011b0 <HAL_TIM_Base_MspInit+0x118>)
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	2100      	movs	r1, #0
 8001162:	201e      	movs	r0, #30
 8001164:	f000 fb25 	bl	80017b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001168:	201e      	movs	r0, #30
 800116a:	f000 fb3e 	bl	80017ea <HAL_NVIC_EnableIRQ>
}
 800116e:	e018      	b.n	80011a2 <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM8)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a11      	ldr	r2, [pc, #68]	@ (80011bc <HAL_TIM_Base_MspInit+0x124>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d113      	bne.n	80011a2 <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800117a:	4b0d      	ldr	r3, [pc, #52]	@ (80011b0 <HAL_TIM_Base_MspInit+0x118>)
 800117c:	699b      	ldr	r3, [r3, #24]
 800117e:	4a0c      	ldr	r2, [pc, #48]	@ (80011b0 <HAL_TIM_Base_MspInit+0x118>)
 8001180:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001184:	6193      	str	r3, [r2, #24]
 8001186:	4b0a      	ldr	r3, [pc, #40]	@ (80011b0 <HAL_TIM_Base_MspInit+0x118>)
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	2100      	movs	r1, #0
 8001196:	202e      	movs	r0, #46	@ 0x2e
 8001198:	f000 fb0b 	bl	80017b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800119c:	202e      	movs	r0, #46	@ 0x2e
 800119e:	f000 fb24 	bl	80017ea <HAL_NVIC_EnableIRQ>
}
 80011a2:	bf00      	nop
 80011a4:	3720      	adds	r7, #32
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40012c00 	.word	0x40012c00
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40000400 	.word	0x40000400
 80011b8:	40000800 	.word	0x40000800
 80011bc:	40013400 	.word	0x40013400

080011c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08c      	sub	sp, #48	@ 0x30
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 031c 	add.w	r3, r7, #28
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a57      	ldr	r2, [pc, #348]	@ (800133c <HAL_TIM_MspPostInit+0x17c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d11c      	bne.n	800121c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e2:	4b57      	ldr	r3, [pc, #348]	@ (8001340 <HAL_TIM_MspPostInit+0x180>)
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	4a56      	ldr	r2, [pc, #344]	@ (8001340 <HAL_TIM_MspPostInit+0x180>)
 80011e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80011ec:	6153      	str	r3, [r2, #20]
 80011ee:	4b54      	ldr	r3, [pc, #336]	@ (8001340 <HAL_TIM_MspPostInit+0x180>)
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80011f6:	61bb      	str	r3, [r7, #24]
 80011f8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MOTOR1_PUL_Pin;
 80011fa:	2301      	movs	r3, #1
 80011fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2300      	movs	r3, #0
 8001208:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800120a:	2302      	movs	r3, #2
 800120c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR1_PUL_GPIO_Port, &GPIO_InitStruct);
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	4619      	mov	r1, r3
 8001214:	484b      	ldr	r0, [pc, #300]	@ (8001344 <HAL_TIM_MspPostInit+0x184>)
 8001216:	f000 fb79 	bl	800190c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800121a:	e08a      	b.n	8001332 <HAL_TIM_MspPostInit+0x172>
  else if(timHandle->Instance==TIM2)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001224:	d11d      	bne.n	8001262 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	4b46      	ldr	r3, [pc, #280]	@ (8001340 <HAL_TIM_MspPostInit+0x180>)
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	4a45      	ldr	r2, [pc, #276]	@ (8001340 <HAL_TIM_MspPostInit+0x180>)
 800122c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001230:	6153      	str	r3, [r2, #20]
 8001232:	4b43      	ldr	r3, [pc, #268]	@ (8001340 <HAL_TIM_MspPostInit+0x180>)
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MOTOR2_PUL_Pin;
 800123e:	2301      	movs	r3, #1
 8001240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001242:	2302      	movs	r3, #2
 8001244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2300      	movs	r3, #0
 800124c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800124e:	2301      	movs	r3, #1
 8001250:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR2_PUL_GPIO_Port, &GPIO_InitStruct);
 8001252:	f107 031c 	add.w	r3, r7, #28
 8001256:	4619      	mov	r1, r3
 8001258:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800125c:	f000 fb56 	bl	800190c <HAL_GPIO_Init>
}
 8001260:	e067      	b.n	8001332 <HAL_TIM_MspPostInit+0x172>
  else if(timHandle->Instance==TIM3)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a38      	ldr	r2, [pc, #224]	@ (8001348 <HAL_TIM_MspPostInit+0x188>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d11d      	bne.n	80012a8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126c:	4b34      	ldr	r3, [pc, #208]	@ (8001340 <HAL_TIM_MspPostInit+0x180>)
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	4a33      	ldr	r2, [pc, #204]	@ (8001340 <HAL_TIM_MspPostInit+0x180>)
 8001272:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001276:	6153      	str	r3, [r2, #20]
 8001278:	4b31      	ldr	r3, [pc, #196]	@ (8001340 <HAL_TIM_MspPostInit+0x180>)
 800127a:	695b      	ldr	r3, [r3, #20]
 800127c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MOTOR3_PUL_Pin;
 8001284:	2340      	movs	r3, #64	@ 0x40
 8001286:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001288:	2302      	movs	r3, #2
 800128a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	2300      	movs	r3, #0
 8001292:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001294:	2302      	movs	r3, #2
 8001296:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR3_PUL_GPIO_Port, &GPIO_InitStruct);
 8001298:	f107 031c 	add.w	r3, r7, #28
 800129c:	4619      	mov	r1, r3
 800129e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012a2:	f000 fb33 	bl	800190c <HAL_GPIO_Init>
}
 80012a6:	e044      	b.n	8001332 <HAL_TIM_MspPostInit+0x172>
  else if(timHandle->Instance==TIM4)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a27      	ldr	r2, [pc, #156]	@ (800134c <HAL_TIM_MspPostInit+0x18c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d11e      	bne.n	80012f0 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b2:	4b23      	ldr	r3, [pc, #140]	@ (8001340 <HAL_TIM_MspPostInit+0x180>)
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	4a22      	ldr	r2, [pc, #136]	@ (8001340 <HAL_TIM_MspPostInit+0x180>)
 80012b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012bc:	6153      	str	r3, [r2, #20]
 80012be:	4b20      	ldr	r3, [pc, #128]	@ (8001340 <HAL_TIM_MspPostInit+0x180>)
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR4_PUL_Pin;
 80012ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80012ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80012dc:	230a      	movs	r3, #10
 80012de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR4_PUL_GPIO_Port, &GPIO_InitStruct);
 80012e0:	f107 031c 	add.w	r3, r7, #28
 80012e4:	4619      	mov	r1, r3
 80012e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ea:	f000 fb0f 	bl	800190c <HAL_GPIO_Init>
}
 80012ee:	e020      	b.n	8001332 <HAL_TIM_MspPostInit+0x172>
  else if(timHandle->Instance==TIM8)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a16      	ldr	r2, [pc, #88]	@ (8001350 <HAL_TIM_MspPostInit+0x190>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d11b      	bne.n	8001332 <HAL_TIM_MspPostInit+0x172>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fa:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <HAL_TIM_MspPostInit+0x180>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4a10      	ldr	r2, [pc, #64]	@ (8001340 <HAL_TIM_MspPostInit+0x180>)
 8001300:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001304:	6153      	str	r3, [r2, #20]
 8001306:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <HAL_TIM_MspPostInit+0x180>)
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR5_PUL_Pin;
 8001312:	2340      	movs	r3, #64	@ 0x40
 8001314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001322:	2304      	movs	r3, #4
 8001324:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR5_PUL_GPIO_Port, &GPIO_InitStruct);
 8001326:	f107 031c 	add.w	r3, r7, #28
 800132a:	4619      	mov	r1, r3
 800132c:	4805      	ldr	r0, [pc, #20]	@ (8001344 <HAL_TIM_MspPostInit+0x184>)
 800132e:	f000 faed 	bl	800190c <HAL_GPIO_Init>
}
 8001332:	bf00      	nop
 8001334:	3730      	adds	r7, #48	@ 0x30
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40012c00 	.word	0x40012c00
 8001340:	40021000 	.word	0x40021000
 8001344:	48000800 	.word	0x48000800
 8001348:	40000400 	.word	0x40000400
 800134c:	40000800 	.word	0x40000800
 8001350:	40013400 	.word	0x40013400

08001354 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001358:	4b14      	ldr	r3, [pc, #80]	@ (80013ac <MX_USART2_UART_Init+0x58>)
 800135a:	4a15      	ldr	r2, [pc, #84]	@ (80013b0 <MX_USART2_UART_Init+0x5c>)
 800135c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800135e:	4b13      	ldr	r3, [pc, #76]	@ (80013ac <MX_USART2_UART_Init+0x58>)
 8001360:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001364:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001366:	4b11      	ldr	r3, [pc, #68]	@ (80013ac <MX_USART2_UART_Init+0x58>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800136c:	4b0f      	ldr	r3, [pc, #60]	@ (80013ac <MX_USART2_UART_Init+0x58>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001372:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <MX_USART2_UART_Init+0x58>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001378:	4b0c      	ldr	r3, [pc, #48]	@ (80013ac <MX_USART2_UART_Init+0x58>)
 800137a:	220c      	movs	r2, #12
 800137c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137e:	4b0b      	ldr	r3, [pc, #44]	@ (80013ac <MX_USART2_UART_Init+0x58>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001384:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <MX_USART2_UART_Init+0x58>)
 8001386:	2200      	movs	r2, #0
 8001388:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800138a:	4b08      	ldr	r3, [pc, #32]	@ (80013ac <MX_USART2_UART_Init+0x58>)
 800138c:	2200      	movs	r2, #0
 800138e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001390:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <MX_USART2_UART_Init+0x58>)
 8001392:	2200      	movs	r2, #0
 8001394:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001396:	4805      	ldr	r0, [pc, #20]	@ (80013ac <MX_USART2_UART_Init+0x58>)
 8001398:	f004 fb8a 	bl	8005ab0 <HAL_UART_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013a2:	f7ff f83d 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200002e4 	.word	0x200002e4
 80013b0:	40004400 	.word	0x40004400

080013b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	@ 0x28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001440 <HAL_UART_MspInit+0x8c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d130      	bne.n	8001438 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001444 <HAL_UART_MspInit+0x90>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	4a1a      	ldr	r2, [pc, #104]	@ (8001444 <HAL_UART_MspInit+0x90>)
 80013dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013e0:	61d3      	str	r3, [r2, #28]
 80013e2:	4b18      	ldr	r3, [pc, #96]	@ (8001444 <HAL_UART_MspInit+0x90>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ee:	4b15      	ldr	r3, [pc, #84]	@ (8001444 <HAL_UART_MspInit+0x90>)
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	4a14      	ldr	r2, [pc, #80]	@ (8001444 <HAL_UART_MspInit+0x90>)
 80013f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013f8:	6153      	str	r3, [r2, #20]
 80013fa:	4b12      	ldr	r3, [pc, #72]	@ (8001444 <HAL_UART_MspInit+0x90>)
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001406:	230c      	movs	r3, #12
 8001408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140a:	2302      	movs	r3, #2
 800140c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001412:	2300      	movs	r3, #0
 8001414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001416:	2307      	movs	r3, #7
 8001418:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	4619      	mov	r1, r3
 8001420:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001424:	f000 fa72 	bl	800190c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001428:	2200      	movs	r2, #0
 800142a:	2100      	movs	r1, #0
 800142c:	2026      	movs	r0, #38	@ 0x26
 800142e:	f000 f9c0 	bl	80017b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001432:	2026      	movs	r0, #38	@ 0x26
 8001434:	f000 f9d9 	bl	80017ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001438:	bf00      	nop
 800143a:	3728      	adds	r7, #40	@ 0x28
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40004400 	.word	0x40004400
 8001444:	40021000 	.word	0x40021000

08001448 <USART_drdy>:


volatile static usart_buffer_st usart_buffer = {0};
volatile static bool usart_drdy_flag = false;

bool USART_drdy(){
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
	return usart_drdy_flag;
 800144c:	4b03      	ldr	r3, [pc, #12]	@ (800145c <USART_drdy+0x14>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	b2db      	uxtb	r3, r3
}
 8001452:	4618      	mov	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	20000379 	.word	0x20000379

08001460 <USART_reset_drdy>:

void USART_reset_drdy(){
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
	usart_drdy_flag = false;
 8001464:	4b03      	ldr	r3, [pc, #12]	@ (8001474 <USART_reset_drdy+0x14>)
 8001466:	2200      	movs	r2, #0
 8001468:	701a      	strb	r2, [r3, #0]
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	20000379 	.word	0x20000379

08001478 <USART_init>:

void USART_init(){
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, (uint8_t*)(&usart_buffer), sizeof(usart_buffer));
 800147c:	220d      	movs	r2, #13
 800147e:	4903      	ldr	r1, [pc, #12]	@ (800148c <USART_init+0x14>)
 8001480:	4803      	ldr	r0, [pc, #12]	@ (8001490 <USART_init+0x18>)
 8001482:	f004 fbec 	bl	8005c5e <HAL_UART_Receive_IT>
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	2000036c 	.word	0x2000036c
 8001490:	200002e4 	.word	0x200002e4

08001494 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	if (huart == &huart2){
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a07      	ldr	r2, [pc, #28]	@ (80014bc <HAL_UART_RxCpltCallback+0x28>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d107      	bne.n	80014b4 <HAL_UART_RxCpltCallback+0x20>
		usart_drdy_flag = true;
 80014a4:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <HAL_UART_RxCpltCallback+0x2c>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, (uint8_t*)(&usart_buffer), sizeof(usart_buffer));
 80014aa:	220d      	movs	r2, #13
 80014ac:	4905      	ldr	r1, [pc, #20]	@ (80014c4 <HAL_UART_RxCpltCallback+0x30>)
 80014ae:	4803      	ldr	r0, [pc, #12]	@ (80014bc <HAL_UART_RxCpltCallback+0x28>)
 80014b0:	f004 fbd5 	bl	8005c5e <HAL_UART_Receive_IT>
	}
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	200002e4 	.word	0x200002e4
 80014c0:	20000379 	.word	0x20000379
 80014c4:	2000036c 	.word	0x2000036c

080014c8 <USART_get_buffer>:

usart_buffer_st* USART_get_buffer(){
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
	return &usart_buffer;
 80014cc:	4b02      	ldr	r3, [pc, #8]	@ (80014d8 <USART_get_buffer+0x10>)
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	2000036c 	.word	0x2000036c

080014dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001514 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80014e0:	f7ff fb0e 	bl	8000b00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014e4:	480c      	ldr	r0, [pc, #48]	@ (8001518 <LoopForever+0x6>)
  ldr r1, =_edata
 80014e6:	490d      	ldr	r1, [pc, #52]	@ (800151c <LoopForever+0xa>)
  ldr r2, =_sidata
 80014e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001520 <LoopForever+0xe>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ec:	e002      	b.n	80014f4 <LoopCopyDataInit>

080014ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f2:	3304      	adds	r3, #4

080014f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f8:	d3f9      	bcc.n	80014ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001524 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001528 <LoopForever+0x16>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001500:	e001      	b.n	8001506 <LoopFillZerobss>

08001502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001504:	3204      	adds	r2, #4

08001506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001508:	d3fb      	bcc.n	8001502 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800150a:	f005 fd9d 	bl	8007048 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800150e:	f7fe fef3 	bl	80002f8 <main>

08001512 <LoopForever>:

LoopForever:
    b LoopForever
 8001512:	e7fe      	b.n	8001512 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001514:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800151c:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8001520:	080070e8 	.word	0x080070e8
  ldr r2, =_sbss
 8001524:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8001528:	20000380 	.word	0x20000380

0800152c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800152c:	e7fe      	b.n	800152c <ADC1_2_IRQHandler>
	...

08001530 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001534:	4b08      	ldr	r3, [pc, #32]	@ (8001558 <HAL_Init+0x28>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a07      	ldr	r2, [pc, #28]	@ (8001558 <HAL_Init+0x28>)
 800153a:	f043 0310 	orr.w	r3, r3, #16
 800153e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001540:	2003      	movs	r0, #3
 8001542:	f000 f92b 	bl	800179c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001546:	2000      	movs	r0, #0
 8001548:	f000 f808 	bl	800155c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800154c:	f7ff fa3e 	bl	80009cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40022000 	.word	0x40022000

0800155c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001564:	4b12      	ldr	r3, [pc, #72]	@ (80015b0 <HAL_InitTick+0x54>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b12      	ldr	r3, [pc, #72]	@ (80015b4 <HAL_InitTick+0x58>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	4619      	mov	r1, r3
 800156e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001572:	fbb3 f3f1 	udiv	r3, r3, r1
 8001576:	fbb2 f3f3 	udiv	r3, r2, r3
 800157a:	4618      	mov	r0, r3
 800157c:	f000 f943 	bl	8001806 <HAL_SYSTICK_Config>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e00e      	b.n	80015a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b0f      	cmp	r3, #15
 800158e:	d80a      	bhi.n	80015a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001590:	2200      	movs	r2, #0
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	f04f 30ff 	mov.w	r0, #4294967295
 8001598:	f000 f90b 	bl	80017b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800159c:	4a06      	ldr	r2, [pc, #24]	@ (80015b8 <HAL_InitTick+0x5c>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
 80015a4:	e000      	b.n	80015a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	200000dc 	.word	0x200000dc
 80015b4:	200000e4 	.word	0x200000e4
 80015b8:	200000e0 	.word	0x200000e0

080015bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c0:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <HAL_IncTick+0x20>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	461a      	mov	r2, r3
 80015c6:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <HAL_IncTick+0x24>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4413      	add	r3, r2
 80015cc:	4a04      	ldr	r2, [pc, #16]	@ (80015e0 <HAL_IncTick+0x24>)
 80015ce:	6013      	str	r3, [r2, #0]
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	200000e4 	.word	0x200000e4
 80015e0:	2000037c 	.word	0x2000037c

080015e4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return uwTick;  
 80015e8:	4b03      	ldr	r3, [pc, #12]	@ (80015f8 <HAL_GetTick+0x14>)
 80015ea:	681b      	ldr	r3, [r3, #0]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	2000037c 	.word	0x2000037c

080015fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800160c:	4b0c      	ldr	r3, [pc, #48]	@ (8001640 <__NVIC_SetPriorityGrouping+0x44>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001618:	4013      	ands	r3, r2
 800161a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001624:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001628:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800162c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800162e:	4a04      	ldr	r2, [pc, #16]	@ (8001640 <__NVIC_SetPriorityGrouping+0x44>)
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	60d3      	str	r3, [r2, #12]
}
 8001634:	bf00      	nop
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001648:	4b04      	ldr	r3, [pc, #16]	@ (800165c <__NVIC_GetPriorityGrouping+0x18>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	0a1b      	lsrs	r3, r3, #8
 800164e:	f003 0307 	and.w	r3, r3, #7
}
 8001652:	4618      	mov	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166e:	2b00      	cmp	r3, #0
 8001670:	db0b      	blt.n	800168a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	f003 021f 	and.w	r2, r3, #31
 8001678:	4907      	ldr	r1, [pc, #28]	@ (8001698 <__NVIC_EnableIRQ+0x38>)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	095b      	lsrs	r3, r3, #5
 8001680:	2001      	movs	r0, #1
 8001682:	fa00 f202 	lsl.w	r2, r0, r2
 8001686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000e100 	.word	0xe000e100

0800169c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	6039      	str	r1, [r7, #0]
 80016a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	db0a      	blt.n	80016c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	490c      	ldr	r1, [pc, #48]	@ (80016e8 <__NVIC_SetPriority+0x4c>)
 80016b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ba:	0112      	lsls	r2, r2, #4
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	440b      	add	r3, r1
 80016c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c4:	e00a      	b.n	80016dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4908      	ldr	r1, [pc, #32]	@ (80016ec <__NVIC_SetPriority+0x50>)
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	3b04      	subs	r3, #4
 80016d4:	0112      	lsls	r2, r2, #4
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	440b      	add	r3, r1
 80016da:	761a      	strb	r2, [r3, #24]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000e100 	.word	0xe000e100
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b089      	sub	sp, #36	@ 0x24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f1c3 0307 	rsb	r3, r3, #7
 800170a:	2b04      	cmp	r3, #4
 800170c:	bf28      	it	cs
 800170e:	2304      	movcs	r3, #4
 8001710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3304      	adds	r3, #4
 8001716:	2b06      	cmp	r3, #6
 8001718:	d902      	bls.n	8001720 <NVIC_EncodePriority+0x30>
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3b03      	subs	r3, #3
 800171e:	e000      	b.n	8001722 <NVIC_EncodePriority+0x32>
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001724:	f04f 32ff 	mov.w	r2, #4294967295
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43da      	mvns	r2, r3
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	401a      	ands	r2, r3
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001738:	f04f 31ff 	mov.w	r1, #4294967295
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	fa01 f303 	lsl.w	r3, r1, r3
 8001742:	43d9      	mvns	r1, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	4313      	orrs	r3, r2
         );
}
 800174a:	4618      	mov	r0, r3
 800174c:	3724      	adds	r7, #36	@ 0x24
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3b01      	subs	r3, #1
 8001764:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001768:	d301      	bcc.n	800176e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800176a:	2301      	movs	r3, #1
 800176c:	e00f      	b.n	800178e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800176e:	4a0a      	ldr	r2, [pc, #40]	@ (8001798 <SysTick_Config+0x40>)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3b01      	subs	r3, #1
 8001774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001776:	210f      	movs	r1, #15
 8001778:	f04f 30ff 	mov.w	r0, #4294967295
 800177c:	f7ff ff8e 	bl	800169c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001780:	4b05      	ldr	r3, [pc, #20]	@ (8001798 <SysTick_Config+0x40>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001786:	4b04      	ldr	r3, [pc, #16]	@ (8001798 <SysTick_Config+0x40>)
 8001788:	2207      	movs	r2, #7
 800178a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	e000e010 	.word	0xe000e010

0800179c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff ff29 	bl	80015fc <__NVIC_SetPriorityGrouping>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b086      	sub	sp, #24
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	4603      	mov	r3, r0
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	607a      	str	r2, [r7, #4]
 80017be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017c4:	f7ff ff3e 	bl	8001644 <__NVIC_GetPriorityGrouping>
 80017c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	68b9      	ldr	r1, [r7, #8]
 80017ce:	6978      	ldr	r0, [r7, #20]
 80017d0:	f7ff ff8e 	bl	80016f0 <NVIC_EncodePriority>
 80017d4:	4602      	mov	r2, r0
 80017d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017da:	4611      	mov	r1, r2
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff5d 	bl	800169c <__NVIC_SetPriority>
}
 80017e2:	bf00      	nop
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff31 	bl	8001660 <__NVIC_EnableIRQ>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff ffa2 	bl	8001758 <SysTick_Config>
 8001814:	4603      	mov	r3, r0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800182c:	2b02      	cmp	r3, #2
 800182e:	d008      	beq.n	8001842 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2204      	movs	r2, #4
 8001834:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e020      	b.n	8001884 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 020e 	bic.w	r2, r2, #14
 8001850:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 0201 	bic.w	r2, r2, #1
 8001860:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800186a:	2101      	movs	r1, #1
 800186c:	fa01 f202 	lsl.w	r2, r1, r2
 8001870:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001898:	2300      	movs	r3, #0
 800189a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d005      	beq.n	80018b2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2204      	movs	r2, #4
 80018aa:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	73fb      	strb	r3, [r7, #15]
 80018b0:	e027      	b.n	8001902 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 020e 	bic.w	r2, r2, #14
 80018c0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 0201 	bic.w	r2, r2, #1
 80018d0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018da:	2101      	movs	r1, #1
 80018dc:	fa01 f202 	lsl.w	r2, r1, r2
 80018e0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	4798      	blx	r3
    } 
  }
  return status;
 8001902:	7bfb      	ldrb	r3, [r7, #15]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800190c:	b480      	push	{r7}
 800190e:	b087      	sub	sp, #28
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800191a:	e160      	b.n	8001bde <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	2101      	movs	r1, #1
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	fa01 f303 	lsl.w	r3, r1, r3
 8001928:	4013      	ands	r3, r2
 800192a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 8152 	beq.w	8001bd8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	2b01      	cmp	r3, #1
 800193e:	d005      	beq.n	800194c <HAL_GPIO_Init+0x40>
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 0303 	and.w	r3, r3, #3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d130      	bne.n	80019ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	2203      	movs	r2, #3
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4013      	ands	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	68da      	ldr	r2, [r3, #12]
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4313      	orrs	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001982:	2201      	movs	r2, #1
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43db      	mvns	r3, r3
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	4013      	ands	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	091b      	lsrs	r3, r3, #4
 8001998:	f003 0201 	and.w	r2, r3, #1
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 0303 	and.w	r3, r3, #3
 80019b6:	2b03      	cmp	r3, #3
 80019b8:	d017      	beq.n	80019ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	2203      	movs	r2, #3
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43db      	mvns	r3, r3
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	4013      	ands	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	689a      	ldr	r2, [r3, #8]
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d123      	bne.n	8001a3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	08da      	lsrs	r2, r3, #3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	3208      	adds	r2, #8
 80019fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	220f      	movs	r2, #15
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	4013      	ands	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	691a      	ldr	r2, [r3, #16]
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	08da      	lsrs	r2, r3, #3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3208      	adds	r2, #8
 8001a38:	6939      	ldr	r1, [r7, #16]
 8001a3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	2203      	movs	r2, #3
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	4013      	ands	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f003 0203 	and.w	r2, r3, #3
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 80ac 	beq.w	8001bd8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a80:	4b5e      	ldr	r3, [pc, #376]	@ (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	4a5d      	ldr	r2, [pc, #372]	@ (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	6193      	str	r3, [r2, #24]
 8001a8c:	4b5b      	ldr	r3, [pc, #364]	@ (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a98:	4a59      	ldr	r2, [pc, #356]	@ (8001c00 <HAL_GPIO_Init+0x2f4>)
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	089b      	lsrs	r3, r3, #2
 8001a9e:	3302      	adds	r3, #2
 8001aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	220f      	movs	r2, #15
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ac2:	d025      	beq.n	8001b10 <HAL_GPIO_Init+0x204>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a4f      	ldr	r2, [pc, #316]	@ (8001c04 <HAL_GPIO_Init+0x2f8>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d01f      	beq.n	8001b0c <HAL_GPIO_Init+0x200>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a4e      	ldr	r2, [pc, #312]	@ (8001c08 <HAL_GPIO_Init+0x2fc>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d019      	beq.n	8001b08 <HAL_GPIO_Init+0x1fc>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a4d      	ldr	r2, [pc, #308]	@ (8001c0c <HAL_GPIO_Init+0x300>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d013      	beq.n	8001b04 <HAL_GPIO_Init+0x1f8>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a4c      	ldr	r2, [pc, #304]	@ (8001c10 <HAL_GPIO_Init+0x304>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d00d      	beq.n	8001b00 <HAL_GPIO_Init+0x1f4>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a4b      	ldr	r2, [pc, #300]	@ (8001c14 <HAL_GPIO_Init+0x308>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d007      	beq.n	8001afc <HAL_GPIO_Init+0x1f0>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a4a      	ldr	r2, [pc, #296]	@ (8001c18 <HAL_GPIO_Init+0x30c>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d101      	bne.n	8001af8 <HAL_GPIO_Init+0x1ec>
 8001af4:	2306      	movs	r3, #6
 8001af6:	e00c      	b.n	8001b12 <HAL_GPIO_Init+0x206>
 8001af8:	2307      	movs	r3, #7
 8001afa:	e00a      	b.n	8001b12 <HAL_GPIO_Init+0x206>
 8001afc:	2305      	movs	r3, #5
 8001afe:	e008      	b.n	8001b12 <HAL_GPIO_Init+0x206>
 8001b00:	2304      	movs	r3, #4
 8001b02:	e006      	b.n	8001b12 <HAL_GPIO_Init+0x206>
 8001b04:	2303      	movs	r3, #3
 8001b06:	e004      	b.n	8001b12 <HAL_GPIO_Init+0x206>
 8001b08:	2302      	movs	r3, #2
 8001b0a:	e002      	b.n	8001b12 <HAL_GPIO_Init+0x206>
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e000      	b.n	8001b12 <HAL_GPIO_Init+0x206>
 8001b10:	2300      	movs	r3, #0
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	f002 0203 	and.w	r2, r2, #3
 8001b18:	0092      	lsls	r2, r2, #2
 8001b1a:	4093      	lsls	r3, r2
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b22:	4937      	ldr	r1, [pc, #220]	@ (8001c00 <HAL_GPIO_Init+0x2f4>)
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	089b      	lsrs	r3, r3, #2
 8001b28:	3302      	adds	r3, #2
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b30:	4b3a      	ldr	r3, [pc, #232]	@ (8001c1c <HAL_GPIO_Init+0x310>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b54:	4a31      	ldr	r2, [pc, #196]	@ (8001c1c <HAL_GPIO_Init+0x310>)
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b5a:	4b30      	ldr	r3, [pc, #192]	@ (8001c1c <HAL_GPIO_Init+0x310>)
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	43db      	mvns	r3, r3
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4013      	ands	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b7e:	4a27      	ldr	r2, [pc, #156]	@ (8001c1c <HAL_GPIO_Init+0x310>)
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b84:	4b25      	ldr	r3, [pc, #148]	@ (8001c1c <HAL_GPIO_Init+0x310>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	4013      	ands	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ba8:	4a1c      	ldr	r2, [pc, #112]	@ (8001c1c <HAL_GPIO_Init+0x310>)
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bae:	4b1b      	ldr	r3, [pc, #108]	@ (8001c1c <HAL_GPIO_Init+0x310>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001bd2:	4a12      	ldr	r2, [pc, #72]	@ (8001c1c <HAL_GPIO_Init+0x310>)
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	fa22 f303 	lsr.w	r3, r2, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f47f ae97 	bne.w	800191c <HAL_GPIO_Init+0x10>
  }
}
 8001bee:	bf00      	nop
 8001bf0:	bf00      	nop
 8001bf2:	371c      	adds	r7, #28
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	40010000 	.word	0x40010000
 8001c04:	48000400 	.word	0x48000400
 8001c08:	48000800 	.word	0x48000800
 8001c0c:	48000c00 	.word	0x48000c00
 8001c10:	48001000 	.word	0x48001000
 8001c14:	48001400 	.word	0x48001400
 8001c18:	48001800 	.word	0x48001800
 8001c1c:	40010400 	.word	0x40010400

08001c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	807b      	strh	r3, [r7, #2]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c30:	787b      	ldrb	r3, [r7, #1]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c36:	887a      	ldrh	r2, [r7, #2]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c3c:	e002      	b.n	8001c44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c3e:	887a      	ldrh	r2, [r7, #2]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c5c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c60:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c66:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d102      	bne.n	8001c76 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	f001 b83a 	b.w	8002cea <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c7a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 816f 	beq.w	8001f6a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c8c:	4bb5      	ldr	r3, [pc, #724]	@ (8001f64 <HAL_RCC_OscConfig+0x314>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 030c 	and.w	r3, r3, #12
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d00c      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c98:	4bb2      	ldr	r3, [pc, #712]	@ (8001f64 <HAL_RCC_OscConfig+0x314>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 030c 	and.w	r3, r3, #12
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d15c      	bne.n	8001d5e <HAL_RCC_OscConfig+0x10e>
 8001ca4:	4baf      	ldr	r3, [pc, #700]	@ (8001f64 <HAL_RCC_OscConfig+0x314>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cb0:	d155      	bne.n	8001d5e <HAL_RCC_OscConfig+0x10e>
 8001cb2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cb6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001cbe:	fa93 f3a3 	rbit	r3, r3
 8001cc2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001cc6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cca:	fab3 f383 	clz	r3, r3
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	095b      	lsrs	r3, r3, #5
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d102      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x94>
 8001cde:	4ba1      	ldr	r3, [pc, #644]	@ (8001f64 <HAL_RCC_OscConfig+0x314>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	e015      	b.n	8001d10 <HAL_RCC_OscConfig+0xc0>
 8001ce4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ce8:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cec:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001cf0:	fa93 f3a3 	rbit	r3, r3
 8001cf4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001cf8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cfc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001d00:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001d04:	fa93 f3a3 	rbit	r3, r3
 8001d08:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001d0c:	4b95      	ldr	r3, [pc, #596]	@ (8001f64 <HAL_RCC_OscConfig+0x314>)
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d10:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d14:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001d18:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8001d1c:	fa92 f2a2 	rbit	r2, r2
 8001d20:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001d24:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001d28:	fab2 f282 	clz	r2, r2
 8001d2c:	b2d2      	uxtb	r2, r2
 8001d2e:	f042 0220 	orr.w	r2, r2, #32
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	f002 021f 	and.w	r2, r2, #31
 8001d38:	2101      	movs	r1, #1
 8001d3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d3e:	4013      	ands	r3, r2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 8111 	beq.w	8001f68 <HAL_RCC_OscConfig+0x318>
 8001d46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d4a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f040 8108 	bne.w	8001f68 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	f000 bfc6 	b.w	8002cea <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d62:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d6e:	d106      	bne.n	8001d7e <HAL_RCC_OscConfig+0x12e>
 8001d70:	4b7c      	ldr	r3, [pc, #496]	@ (8001f64 <HAL_RCC_OscConfig+0x314>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a7b      	ldr	r2, [pc, #492]	@ (8001f64 <HAL_RCC_OscConfig+0x314>)
 8001d76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d7a:	6013      	str	r3, [r2, #0]
 8001d7c:	e036      	b.n	8001dec <HAL_RCC_OscConfig+0x19c>
 8001d7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d82:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10c      	bne.n	8001da8 <HAL_RCC_OscConfig+0x158>
 8001d8e:	4b75      	ldr	r3, [pc, #468]	@ (8001f64 <HAL_RCC_OscConfig+0x314>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a74      	ldr	r2, [pc, #464]	@ (8001f64 <HAL_RCC_OscConfig+0x314>)
 8001d94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	4b72      	ldr	r3, [pc, #456]	@ (8001f64 <HAL_RCC_OscConfig+0x314>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a71      	ldr	r2, [pc, #452]	@ (8001f64 <HAL_RCC_OscConfig+0x314>)
 8001da0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	e021      	b.n	8001dec <HAL_RCC_OscConfig+0x19c>
 8001da8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001db8:	d10c      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x184>
 8001dba:	4b6a      	ldr	r3, [pc, #424]	@ (8001f64 <HAL_RCC_OscConfig+0x314>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a69      	ldr	r2, [pc, #420]	@ (8001f64 <HAL_RCC_OscConfig+0x314>)
 8001dc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	4b67      	ldr	r3, [pc, #412]	@ (8001f64 <HAL_RCC_OscConfig+0x314>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a66      	ldr	r2, [pc, #408]	@ (8001f64 <HAL_RCC_OscConfig+0x314>)
 8001dcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	e00b      	b.n	8001dec <HAL_RCC_OscConfig+0x19c>
 8001dd4:	4b63      	ldr	r3, [pc, #396]	@ (8001f64 <HAL_RCC_OscConfig+0x314>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a62      	ldr	r2, [pc, #392]	@ (8001f64 <HAL_RCC_OscConfig+0x314>)
 8001dda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dde:	6013      	str	r3, [r2, #0]
 8001de0:	4b60      	ldr	r3, [pc, #384]	@ (8001f64 <HAL_RCC_OscConfig+0x314>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a5f      	ldr	r2, [pc, #380]	@ (8001f64 <HAL_RCC_OscConfig+0x314>)
 8001de6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dea:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001df0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d059      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfc:	f7ff fbf2 	bl	80015e4 <HAL_GetTick>
 8001e00:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e04:	e00a      	b.n	8001e1c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e06:	f7ff fbed 	bl	80015e4 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b64      	cmp	r3, #100	@ 0x64
 8001e14:	d902      	bls.n	8001e1c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	f000 bf67 	b.w	8002cea <HAL_RCC_OscConfig+0x109a>
 8001e1c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e20:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e24:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001e28:	fa93 f3a3 	rbit	r3, r3
 8001e2c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001e30:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e34:	fab3 f383 	clz	r3, r3
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	095b      	lsrs	r3, r3, #5
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	f043 0301 	orr.w	r3, r3, #1
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d102      	bne.n	8001e4e <HAL_RCC_OscConfig+0x1fe>
 8001e48:	4b46      	ldr	r3, [pc, #280]	@ (8001f64 <HAL_RCC_OscConfig+0x314>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	e015      	b.n	8001e7a <HAL_RCC_OscConfig+0x22a>
 8001e4e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e52:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e56:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001e5a:	fa93 f3a3 	rbit	r3, r3
 8001e5e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001e62:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e66:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001e6a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001e6e:	fa93 f3a3 	rbit	r3, r3
 8001e72:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001e76:	4b3b      	ldr	r3, [pc, #236]	@ (8001f64 <HAL_RCC_OscConfig+0x314>)
 8001e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e7e:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001e82:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001e86:	fa92 f2a2 	rbit	r2, r2
 8001e8a:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8001e8e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001e92:	fab2 f282 	clz	r2, r2
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	f042 0220 	orr.w	r2, r2, #32
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	f002 021f 	and.w	r2, r2, #31
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0ab      	beq.n	8001e06 <HAL_RCC_OscConfig+0x1b6>
 8001eae:	e05c      	b.n	8001f6a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb0:	f7ff fb98 	bl	80015e4 <HAL_GetTick>
 8001eb4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eb8:	e00a      	b.n	8001ed0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eba:	f7ff fb93 	bl	80015e4 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b64      	cmp	r3, #100	@ 0x64
 8001ec8:	d902      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	f000 bf0d 	b.w	8002cea <HAL_RCC_OscConfig+0x109a>
 8001ed0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ed4:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001edc:	fa93 f3a3 	rbit	r3, r3
 8001ee0:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001ee4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ee8:	fab3 f383 	clz	r3, r3
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	095b      	lsrs	r3, r3, #5
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d102      	bne.n	8001f02 <HAL_RCC_OscConfig+0x2b2>
 8001efc:	4b19      	ldr	r3, [pc, #100]	@ (8001f64 <HAL_RCC_OscConfig+0x314>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	e015      	b.n	8001f2e <HAL_RCC_OscConfig+0x2de>
 8001f02:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f06:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001f0e:	fa93 f3a3 	rbit	r3, r3
 8001f12:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001f16:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f1a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001f1e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001f22:	fa93 f3a3 	rbit	r3, r3
 8001f26:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f64 <HAL_RCC_OscConfig+0x314>)
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f32:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001f36:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001f3a:	fa92 f2a2 	rbit	r2, r2
 8001f3e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001f42:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001f46:	fab2 f282 	clz	r2, r2
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	f042 0220 	orr.w	r2, r2, #32
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	f002 021f 	and.w	r2, r2, #31
 8001f56:	2101      	movs	r1, #1
 8001f58:	fa01 f202 	lsl.w	r2, r1, r2
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1ab      	bne.n	8001eba <HAL_RCC_OscConfig+0x26a>
 8001f62:	e002      	b.n	8001f6a <HAL_RCC_OscConfig+0x31a>
 8001f64:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f6e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 817f 	beq.w	800227e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f80:	4ba7      	ldr	r3, [pc, #668]	@ (8002220 <HAL_RCC_OscConfig+0x5d0>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 030c 	and.w	r3, r3, #12
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00c      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f8c:	4ba4      	ldr	r3, [pc, #656]	@ (8002220 <HAL_RCC_OscConfig+0x5d0>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 030c 	and.w	r3, r3, #12
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	d173      	bne.n	8002080 <HAL_RCC_OscConfig+0x430>
 8001f98:	4ba1      	ldr	r3, [pc, #644]	@ (8002220 <HAL_RCC_OscConfig+0x5d0>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001fa0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001fa4:	d16c      	bne.n	8002080 <HAL_RCC_OscConfig+0x430>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fac:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001fb0:	fa93 f3a3 	rbit	r3, r3
 8001fb4:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001fb8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fbc:	fab3 f383 	clz	r3, r3
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	095b      	lsrs	r3, r3, #5
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d102      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x386>
 8001fd0:	4b93      	ldr	r3, [pc, #588]	@ (8002220 <HAL_RCC_OscConfig+0x5d0>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	e013      	b.n	8001ffe <HAL_RCC_OscConfig+0x3ae>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fdc:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001fe0:	fa93 f3a3 	rbit	r3, r3
 8001fe4:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001fe8:	2302      	movs	r3, #2
 8001fea:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001fee:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001ff2:	fa93 f3a3 	rbit	r3, r3
 8001ff6:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001ffa:	4b89      	ldr	r3, [pc, #548]	@ (8002220 <HAL_RCC_OscConfig+0x5d0>)
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffe:	2202      	movs	r2, #2
 8002000:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8002004:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8002008:	fa92 f2a2 	rbit	r2, r2
 800200c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8002010:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002014:	fab2 f282 	clz	r2, r2
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	f042 0220 	orr.w	r2, r2, #32
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	f002 021f 	and.w	r2, r2, #31
 8002024:	2101      	movs	r1, #1
 8002026:	fa01 f202 	lsl.w	r2, r1, r2
 800202a:	4013      	ands	r3, r2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00a      	beq.n	8002046 <HAL_RCC_OscConfig+0x3f6>
 8002030:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002034:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d002      	beq.n	8002046 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	f000 be52 	b.w	8002cea <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002046:	4b76      	ldr	r3, [pc, #472]	@ (8002220 <HAL_RCC_OscConfig+0x5d0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800204e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002052:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	21f8      	movs	r1, #248	@ 0xf8
 800205c:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002060:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8002064:	fa91 f1a1 	rbit	r1, r1
 8002068:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 800206c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002070:	fab1 f181 	clz	r1, r1
 8002074:	b2c9      	uxtb	r1, r1
 8002076:	408b      	lsls	r3, r1
 8002078:	4969      	ldr	r1, [pc, #420]	@ (8002220 <HAL_RCC_OscConfig+0x5d0>)
 800207a:	4313      	orrs	r3, r2
 800207c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800207e:	e0fe      	b.n	800227e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002080:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002084:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 8088 	beq.w	80021a2 <HAL_RCC_OscConfig+0x552>
 8002092:	2301      	movs	r3, #1
 8002094:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002098:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800209c:	fa93 f3a3 	rbit	r3, r3
 80020a0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80020a4:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020a8:	fab3 f383 	clz	r3, r3
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80020b2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	461a      	mov	r2, r3
 80020ba:	2301      	movs	r3, #1
 80020bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020be:	f7ff fa91 	bl	80015e4 <HAL_GetTick>
 80020c2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c6:	e00a      	b.n	80020de <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020c8:	f7ff fa8c 	bl	80015e4 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d902      	bls.n	80020de <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	f000 be06 	b.w	8002cea <HAL_RCC_OscConfig+0x109a>
 80020de:	2302      	movs	r3, #2
 80020e0:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e4:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80020e8:	fa93 f3a3 	rbit	r3, r3
 80020ec:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 80020f0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f4:	fab3 f383 	clz	r3, r3
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	095b      	lsrs	r3, r3, #5
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b01      	cmp	r3, #1
 8002106:	d102      	bne.n	800210e <HAL_RCC_OscConfig+0x4be>
 8002108:	4b45      	ldr	r3, [pc, #276]	@ (8002220 <HAL_RCC_OscConfig+0x5d0>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	e013      	b.n	8002136 <HAL_RCC_OscConfig+0x4e6>
 800210e:	2302      	movs	r3, #2
 8002110:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002114:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002118:	fa93 f3a3 	rbit	r3, r3
 800211c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002120:	2302      	movs	r3, #2
 8002122:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002126:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800212a:	fa93 f3a3 	rbit	r3, r3
 800212e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002132:	4b3b      	ldr	r3, [pc, #236]	@ (8002220 <HAL_RCC_OscConfig+0x5d0>)
 8002134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002136:	2202      	movs	r2, #2
 8002138:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800213c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002140:	fa92 f2a2 	rbit	r2, r2
 8002144:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8002148:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800214c:	fab2 f282 	clz	r2, r2
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	f042 0220 	orr.w	r2, r2, #32
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	f002 021f 	and.w	r2, r2, #31
 800215c:	2101      	movs	r1, #1
 800215e:	fa01 f202 	lsl.w	r2, r1, r2
 8002162:	4013      	ands	r3, r2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0af      	beq.n	80020c8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002168:	4b2d      	ldr	r3, [pc, #180]	@ (8002220 <HAL_RCC_OscConfig+0x5d0>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002170:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002174:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	21f8      	movs	r1, #248	@ 0xf8
 800217e:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002182:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8002186:	fa91 f1a1 	rbit	r1, r1
 800218a:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 800218e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002192:	fab1 f181 	clz	r1, r1
 8002196:	b2c9      	uxtb	r1, r1
 8002198:	408b      	lsls	r3, r1
 800219a:	4921      	ldr	r1, [pc, #132]	@ (8002220 <HAL_RCC_OscConfig+0x5d0>)
 800219c:	4313      	orrs	r3, r2
 800219e:	600b      	str	r3, [r1, #0]
 80021a0:	e06d      	b.n	800227e <HAL_RCC_OscConfig+0x62e>
 80021a2:	2301      	movs	r3, #1
 80021a4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80021ac:	fa93 f3a3 	rbit	r3, r3
 80021b0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80021b4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021b8:	fab3 f383 	clz	r3, r3
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80021c2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	461a      	mov	r2, r3
 80021ca:	2300      	movs	r3, #0
 80021cc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ce:	f7ff fa09 	bl	80015e4 <HAL_GetTick>
 80021d2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d6:	e00a      	b.n	80021ee <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021d8:	f7ff fa04 	bl	80015e4 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d902      	bls.n	80021ee <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	f000 bd7e 	b.w	8002cea <HAL_RCC_OscConfig+0x109a>
 80021ee:	2302      	movs	r3, #2
 80021f0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80021f8:	fa93 f3a3 	rbit	r3, r3
 80021fc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8002200:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002204:	fab3 f383 	clz	r3, r3
 8002208:	b2db      	uxtb	r3, r3
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	b2db      	uxtb	r3, r3
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b01      	cmp	r3, #1
 8002216:	d105      	bne.n	8002224 <HAL_RCC_OscConfig+0x5d4>
 8002218:	4b01      	ldr	r3, [pc, #4]	@ (8002220 <HAL_RCC_OscConfig+0x5d0>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	e016      	b.n	800224c <HAL_RCC_OscConfig+0x5fc>
 800221e:	bf00      	nop
 8002220:	40021000 	.word	0x40021000
 8002224:	2302      	movs	r3, #2
 8002226:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800222e:	fa93 f3a3 	rbit	r3, r3
 8002232:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002236:	2302      	movs	r3, #2
 8002238:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800223c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002240:	fa93 f3a3 	rbit	r3, r3
 8002244:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002248:	4bbf      	ldr	r3, [pc, #764]	@ (8002548 <HAL_RCC_OscConfig+0x8f8>)
 800224a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224c:	2202      	movs	r2, #2
 800224e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8002252:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002256:	fa92 f2a2 	rbit	r2, r2
 800225a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800225e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002262:	fab2 f282 	clz	r2, r2
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	f042 0220 	orr.w	r2, r2, #32
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	f002 021f 	and.w	r2, r2, #31
 8002272:	2101      	movs	r1, #1
 8002274:	fa01 f202 	lsl.w	r2, r1, r2
 8002278:	4013      	ands	r3, r2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1ac      	bne.n	80021d8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800227e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002282:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 8113 	beq.w	80024ba <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002294:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002298:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	695b      	ldr	r3, [r3, #20]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d07c      	beq.n	800239e <HAL_RCC_OscConfig+0x74e>
 80022a4:	2301      	movs	r3, #1
 80022a6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80022ae:	fa93 f3a3 	rbit	r3, r3
 80022b2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80022b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ba:	fab3 f383 	clz	r3, r3
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	461a      	mov	r2, r3
 80022c2:	4ba2      	ldr	r3, [pc, #648]	@ (800254c <HAL_RCC_OscConfig+0x8fc>)
 80022c4:	4413      	add	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	461a      	mov	r2, r3
 80022ca:	2301      	movs	r3, #1
 80022cc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ce:	f7ff f989 	bl	80015e4 <HAL_GetTick>
 80022d2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d6:	e00a      	b.n	80022ee <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022d8:	f7ff f984 	bl	80015e4 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d902      	bls.n	80022ee <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	f000 bcfe 	b.w	8002cea <HAL_RCC_OscConfig+0x109a>
 80022ee:	2302      	movs	r3, #2
 80022f0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80022f8:	fa93 f2a3 	rbit	r2, r3
 80022fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002300:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800230a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800230e:	2202      	movs	r2, #2
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002316:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	fa93 f2a3 	rbit	r2, r3
 8002320:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002324:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800232e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002332:	2202      	movs	r2, #2
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800233a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	fa93 f2a3 	rbit	r2, r3
 8002344:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002348:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800234c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234e:	4b7e      	ldr	r3, [pc, #504]	@ (8002548 <HAL_RCC_OscConfig+0x8f8>)
 8002350:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002352:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002356:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800235a:	2102      	movs	r1, #2
 800235c:	6019      	str	r1, [r3, #0]
 800235e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002362:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	fa93 f1a3 	rbit	r1, r3
 800236c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002370:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002374:	6019      	str	r1, [r3, #0]
  return result;
 8002376:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800237a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	fab3 f383 	clz	r3, r3
 8002384:	b2db      	uxtb	r3, r3
 8002386:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800238a:	b2db      	uxtb	r3, r3
 800238c:	f003 031f 	and.w	r3, r3, #31
 8002390:	2101      	movs	r1, #1
 8002392:	fa01 f303 	lsl.w	r3, r1, r3
 8002396:	4013      	ands	r3, r2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d09d      	beq.n	80022d8 <HAL_RCC_OscConfig+0x688>
 800239c:	e08d      	b.n	80024ba <HAL_RCC_OscConfig+0x86a>
 800239e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023a2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80023a6:	2201      	movs	r2, #1
 80023a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ae:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	fa93 f2a3 	rbit	r2, r3
 80023b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023bc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80023c0:	601a      	str	r2, [r3, #0]
  return result;
 80023c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023c6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80023ca:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023cc:	fab3 f383 	clz	r3, r3
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	461a      	mov	r2, r3
 80023d4:	4b5d      	ldr	r3, [pc, #372]	@ (800254c <HAL_RCC_OscConfig+0x8fc>)
 80023d6:	4413      	add	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	461a      	mov	r2, r3
 80023dc:	2300      	movs	r3, #0
 80023de:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e0:	f7ff f900 	bl	80015e4 <HAL_GetTick>
 80023e4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e8:	e00a      	b.n	8002400 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023ea:	f7ff f8fb 	bl	80015e4 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d902      	bls.n	8002400 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	f000 bc75 	b.w	8002cea <HAL_RCC_OscConfig+0x109a>
 8002400:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002404:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002408:	2202      	movs	r2, #2
 800240a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002410:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	fa93 f2a3 	rbit	r2, r3
 800241a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800241e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002428:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800242c:	2202      	movs	r2, #2
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002434:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	fa93 f2a3 	rbit	r2, r3
 800243e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002442:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800244c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002450:	2202      	movs	r2, #2
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002458:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	fa93 f2a3 	rbit	r2, r3
 8002462:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002466:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800246a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800246c:	4b36      	ldr	r3, [pc, #216]	@ (8002548 <HAL_RCC_OscConfig+0x8f8>)
 800246e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002470:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002474:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002478:	2102      	movs	r1, #2
 800247a:	6019      	str	r1, [r3, #0]
 800247c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002480:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	fa93 f1a3 	rbit	r1, r3
 800248a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800248e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002492:	6019      	str	r1, [r3, #0]
  return result;
 8002494:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002498:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	fab3 f383 	clz	r3, r3
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	f003 031f 	and.w	r3, r3, #31
 80024ae:	2101      	movs	r1, #1
 80024b0:	fa01 f303 	lsl.w	r3, r1, r3
 80024b4:	4013      	ands	r3, r2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d197      	bne.n	80023ea <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024be:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0304 	and.w	r3, r3, #4
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 81a5 	beq.w	800281a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024d0:	2300      	movs	r3, #0
 80024d2:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002548 <HAL_RCC_OscConfig+0x8f8>)
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d116      	bne.n	8002510 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e2:	4b19      	ldr	r3, [pc, #100]	@ (8002548 <HAL_RCC_OscConfig+0x8f8>)
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	4a18      	ldr	r2, [pc, #96]	@ (8002548 <HAL_RCC_OscConfig+0x8f8>)
 80024e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024ec:	61d3      	str	r3, [r2, #28]
 80024ee:	4b16      	ldr	r3, [pc, #88]	@ (8002548 <HAL_RCC_OscConfig+0x8f8>)
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80024f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002504:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002508:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800250a:	2301      	movs	r3, #1
 800250c:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002510:	4b0f      	ldr	r3, [pc, #60]	@ (8002550 <HAL_RCC_OscConfig+0x900>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002518:	2b00      	cmp	r3, #0
 800251a:	d121      	bne.n	8002560 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800251c:	4b0c      	ldr	r3, [pc, #48]	@ (8002550 <HAL_RCC_OscConfig+0x900>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a0b      	ldr	r2, [pc, #44]	@ (8002550 <HAL_RCC_OscConfig+0x900>)
 8002522:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002526:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002528:	f7ff f85c 	bl	80015e4 <HAL_GetTick>
 800252c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002530:	e010      	b.n	8002554 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002532:	f7ff f857 	bl	80015e4 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b64      	cmp	r3, #100	@ 0x64
 8002540:	d908      	bls.n	8002554 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e3d1      	b.n	8002cea <HAL_RCC_OscConfig+0x109a>
 8002546:	bf00      	nop
 8002548:	40021000 	.word	0x40021000
 800254c:	10908120 	.word	0x10908120
 8002550:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002554:	4b8d      	ldr	r3, [pc, #564]	@ (800278c <HAL_RCC_OscConfig+0xb3c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800255c:	2b00      	cmp	r3, #0
 800255e:	d0e8      	beq.n	8002532 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002560:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002564:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d106      	bne.n	800257e <HAL_RCC_OscConfig+0x92e>
 8002570:	4b87      	ldr	r3, [pc, #540]	@ (8002790 <HAL_RCC_OscConfig+0xb40>)
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	4a86      	ldr	r2, [pc, #536]	@ (8002790 <HAL_RCC_OscConfig+0xb40>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	6213      	str	r3, [r2, #32]
 800257c:	e035      	b.n	80025ea <HAL_RCC_OscConfig+0x99a>
 800257e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002582:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10c      	bne.n	80025a8 <HAL_RCC_OscConfig+0x958>
 800258e:	4b80      	ldr	r3, [pc, #512]	@ (8002790 <HAL_RCC_OscConfig+0xb40>)
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	4a7f      	ldr	r2, [pc, #508]	@ (8002790 <HAL_RCC_OscConfig+0xb40>)
 8002594:	f023 0301 	bic.w	r3, r3, #1
 8002598:	6213      	str	r3, [r2, #32]
 800259a:	4b7d      	ldr	r3, [pc, #500]	@ (8002790 <HAL_RCC_OscConfig+0xb40>)
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	4a7c      	ldr	r2, [pc, #496]	@ (8002790 <HAL_RCC_OscConfig+0xb40>)
 80025a0:	f023 0304 	bic.w	r3, r3, #4
 80025a4:	6213      	str	r3, [r2, #32]
 80025a6:	e020      	b.n	80025ea <HAL_RCC_OscConfig+0x99a>
 80025a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025ac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	2b05      	cmp	r3, #5
 80025b6:	d10c      	bne.n	80025d2 <HAL_RCC_OscConfig+0x982>
 80025b8:	4b75      	ldr	r3, [pc, #468]	@ (8002790 <HAL_RCC_OscConfig+0xb40>)
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	4a74      	ldr	r2, [pc, #464]	@ (8002790 <HAL_RCC_OscConfig+0xb40>)
 80025be:	f043 0304 	orr.w	r3, r3, #4
 80025c2:	6213      	str	r3, [r2, #32]
 80025c4:	4b72      	ldr	r3, [pc, #456]	@ (8002790 <HAL_RCC_OscConfig+0xb40>)
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	4a71      	ldr	r2, [pc, #452]	@ (8002790 <HAL_RCC_OscConfig+0xb40>)
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	6213      	str	r3, [r2, #32]
 80025d0:	e00b      	b.n	80025ea <HAL_RCC_OscConfig+0x99a>
 80025d2:	4b6f      	ldr	r3, [pc, #444]	@ (8002790 <HAL_RCC_OscConfig+0xb40>)
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	4a6e      	ldr	r2, [pc, #440]	@ (8002790 <HAL_RCC_OscConfig+0xb40>)
 80025d8:	f023 0301 	bic.w	r3, r3, #1
 80025dc:	6213      	str	r3, [r2, #32]
 80025de:	4b6c      	ldr	r3, [pc, #432]	@ (8002790 <HAL_RCC_OscConfig+0xb40>)
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	4a6b      	ldr	r2, [pc, #428]	@ (8002790 <HAL_RCC_OscConfig+0xb40>)
 80025e4:	f023 0304 	bic.w	r3, r3, #4
 80025e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025ee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 8081 	beq.w	80026fe <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fc:	f7fe fff2 	bl	80015e4 <HAL_GetTick>
 8002600:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002604:	e00b      	b.n	800261e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002606:	f7fe ffed 	bl	80015e4 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002616:	4293      	cmp	r3, r2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e365      	b.n	8002cea <HAL_RCC_OscConfig+0x109a>
 800261e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002622:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002626:	2202      	movs	r2, #2
 8002628:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800262e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	fa93 f2a3 	rbit	r2, r3
 8002638:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800263c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002646:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800264a:	2202      	movs	r2, #2
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002652:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	fa93 f2a3 	rbit	r2, r3
 800265c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002660:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002664:	601a      	str	r2, [r3, #0]
  return result;
 8002666:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800266a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800266e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002670:	fab3 f383 	clz	r3, r3
 8002674:	b2db      	uxtb	r3, r3
 8002676:	095b      	lsrs	r3, r3, #5
 8002678:	b2db      	uxtb	r3, r3
 800267a:	f043 0302 	orr.w	r3, r3, #2
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d102      	bne.n	800268a <HAL_RCC_OscConfig+0xa3a>
 8002684:	4b42      	ldr	r3, [pc, #264]	@ (8002790 <HAL_RCC_OscConfig+0xb40>)
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	e013      	b.n	80026b2 <HAL_RCC_OscConfig+0xa62>
 800268a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800268e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002692:	2202      	movs	r2, #2
 8002694:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002696:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800269a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	fa93 f2a3 	rbit	r2, r3
 80026a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026a8:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	4b38      	ldr	r3, [pc, #224]	@ (8002790 <HAL_RCC_OscConfig+0xb40>)
 80026b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026b6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80026ba:	2102      	movs	r1, #2
 80026bc:	6011      	str	r1, [r2, #0]
 80026be:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026c2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80026c6:	6812      	ldr	r2, [r2, #0]
 80026c8:	fa92 f1a2 	rbit	r1, r2
 80026cc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026d0:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80026d4:	6011      	str	r1, [r2, #0]
  return result;
 80026d6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026da:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	fab2 f282 	clz	r2, r2
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	f002 021f 	and.w	r2, r2, #31
 80026f0:	2101      	movs	r1, #1
 80026f2:	fa01 f202 	lsl.w	r2, r1, r2
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d084      	beq.n	8002606 <HAL_RCC_OscConfig+0x9b6>
 80026fc:	e083      	b.n	8002806 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026fe:	f7fe ff71 	bl	80015e4 <HAL_GetTick>
 8002702:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002706:	e00b      	b.n	8002720 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002708:	f7fe ff6c 	bl	80015e4 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002718:	4293      	cmp	r3, r2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e2e4      	b.n	8002cea <HAL_RCC_OscConfig+0x109a>
 8002720:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002724:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002728:	2202      	movs	r2, #2
 800272a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002730:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	fa93 f2a3 	rbit	r2, r3
 800273a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800273e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002748:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800274c:	2202      	movs	r2, #2
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002754:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	fa93 f2a3 	rbit	r2, r3
 800275e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002762:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002766:	601a      	str	r2, [r3, #0]
  return result;
 8002768:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800276c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002770:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002772:	fab3 f383 	clz	r3, r3
 8002776:	b2db      	uxtb	r3, r3
 8002778:	095b      	lsrs	r3, r3, #5
 800277a:	b2db      	uxtb	r3, r3
 800277c:	f043 0302 	orr.w	r3, r3, #2
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d106      	bne.n	8002794 <HAL_RCC_OscConfig+0xb44>
 8002786:	4b02      	ldr	r3, [pc, #8]	@ (8002790 <HAL_RCC_OscConfig+0xb40>)
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	e017      	b.n	80027bc <HAL_RCC_OscConfig+0xb6c>
 800278c:	40007000 	.word	0x40007000
 8002790:	40021000 	.word	0x40021000
 8002794:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002798:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800279c:	2202      	movs	r2, #2
 800279e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027a4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	fa93 f2a3 	rbit	r2, r3
 80027ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027b2:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	4bb3      	ldr	r3, [pc, #716]	@ (8002a88 <HAL_RCC_OscConfig+0xe38>)
 80027ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027bc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80027c0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80027c4:	2102      	movs	r1, #2
 80027c6:	6011      	str	r1, [r2, #0]
 80027c8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80027cc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80027d0:	6812      	ldr	r2, [r2, #0]
 80027d2:	fa92 f1a2 	rbit	r1, r2
 80027d6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80027da:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80027de:	6011      	str	r1, [r2, #0]
  return result;
 80027e0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80027e4:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80027e8:	6812      	ldr	r2, [r2, #0]
 80027ea:	fab2 f282 	clz	r2, r2
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	f002 021f 	and.w	r2, r2, #31
 80027fa:	2101      	movs	r1, #1
 80027fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002800:	4013      	ands	r3, r2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d180      	bne.n	8002708 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002806:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800280a:	2b01      	cmp	r3, #1
 800280c:	d105      	bne.n	800281a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800280e:	4b9e      	ldr	r3, [pc, #632]	@ (8002a88 <HAL_RCC_OscConfig+0xe38>)
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	4a9d      	ldr	r2, [pc, #628]	@ (8002a88 <HAL_RCC_OscConfig+0xe38>)
 8002814:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002818:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800281a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800281e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 825e 	beq.w	8002ce8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800282c:	4b96      	ldr	r3, [pc, #600]	@ (8002a88 <HAL_RCC_OscConfig+0xe38>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 030c 	and.w	r3, r3, #12
 8002834:	2b08      	cmp	r3, #8
 8002836:	f000 821f 	beq.w	8002c78 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800283a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800283e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	2b02      	cmp	r3, #2
 8002848:	f040 8170 	bne.w	8002b2c <HAL_RCC_OscConfig+0xedc>
 800284c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002850:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002854:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002858:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800285e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	fa93 f2a3 	rbit	r2, r3
 8002868:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800286c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002870:	601a      	str	r2, [r3, #0]
  return result;
 8002872:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002876:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800287a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287c:	fab3 f383 	clz	r3, r3
 8002880:	b2db      	uxtb	r3, r3
 8002882:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002886:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	461a      	mov	r2, r3
 800288e:	2300      	movs	r3, #0
 8002890:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002892:	f7fe fea7 	bl	80015e4 <HAL_GetTick>
 8002896:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800289a:	e009      	b.n	80028b0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800289c:	f7fe fea2 	bl	80015e4 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e21c      	b.n	8002cea <HAL_RCC_OscConfig+0x109a>
 80028b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028b4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80028b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028c2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	fa93 f2a3 	rbit	r2, r3
 80028cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028d0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80028d4:	601a      	str	r2, [r3, #0]
  return result;
 80028d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028da:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80028de:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028e0:	fab3 f383 	clz	r3, r3
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	095b      	lsrs	r3, r3, #5
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d102      	bne.n	80028fa <HAL_RCC_OscConfig+0xcaa>
 80028f4:	4b64      	ldr	r3, [pc, #400]	@ (8002a88 <HAL_RCC_OscConfig+0xe38>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	e027      	b.n	800294a <HAL_RCC_OscConfig+0xcfa>
 80028fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028fe:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002902:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002906:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002908:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800290c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	fa93 f2a3 	rbit	r2, r3
 8002916:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800291a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002924:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002928:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002932:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	fa93 f2a3 	rbit	r2, r3
 800293c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002940:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	4b50      	ldr	r3, [pc, #320]	@ (8002a88 <HAL_RCC_OscConfig+0xe38>)
 8002948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800294e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002952:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002956:	6011      	str	r1, [r2, #0]
 8002958:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800295c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002960:	6812      	ldr	r2, [r2, #0]
 8002962:	fa92 f1a2 	rbit	r1, r2
 8002966:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800296a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800296e:	6011      	str	r1, [r2, #0]
  return result;
 8002970:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002974:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002978:	6812      	ldr	r2, [r2, #0]
 800297a:	fab2 f282 	clz	r2, r2
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	f042 0220 	orr.w	r2, r2, #32
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	f002 021f 	and.w	r2, r2, #31
 800298a:	2101      	movs	r1, #1
 800298c:	fa01 f202 	lsl.w	r2, r1, r2
 8002990:	4013      	ands	r3, r2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d182      	bne.n	800289c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002996:	4b3c      	ldr	r3, [pc, #240]	@ (8002a88 <HAL_RCC_OscConfig+0xe38>)
 8002998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800299a:	f023 020f 	bic.w	r2, r3, #15
 800299e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029a2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029aa:	4937      	ldr	r1, [pc, #220]	@ (8002a88 <HAL_RCC_OscConfig+0xe38>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80029b0:	4b35      	ldr	r3, [pc, #212]	@ (8002a88 <HAL_RCC_OscConfig+0xe38>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80029b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029bc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6a19      	ldr	r1, [r3, #32]
 80029c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029c8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	69db      	ldr	r3, [r3, #28]
 80029d0:	430b      	orrs	r3, r1
 80029d2:	492d      	ldr	r1, [pc, #180]	@ (8002a88 <HAL_RCC_OscConfig+0xe38>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	604b      	str	r3, [r1, #4]
 80029d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029dc:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80029e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80029e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029ea:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	fa93 f2a3 	rbit	r2, r3
 80029f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029f8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80029fc:	601a      	str	r2, [r3, #0]
  return result;
 80029fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a02:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002a06:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a08:	fab3 f383 	clz	r3, r3
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a12:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	461a      	mov	r2, r3
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1e:	f7fe fde1 	bl	80015e4 <HAL_GetTick>
 8002a22:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a26:	e009      	b.n	8002a3c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a28:	f7fe fddc 	bl	80015e4 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e156      	b.n	8002cea <HAL_RCC_OscConfig+0x109a>
 8002a3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a40:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002a44:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a4e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	fa93 f2a3 	rbit	r2, r3
 8002a58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a5c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002a60:	601a      	str	r2, [r3, #0]
  return result;
 8002a62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a66:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002a6a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a6c:	fab3 f383 	clz	r3, r3
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	095b      	lsrs	r3, r3, #5
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	f043 0301 	orr.w	r3, r3, #1
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d105      	bne.n	8002a8c <HAL_RCC_OscConfig+0xe3c>
 8002a80:	4b01      	ldr	r3, [pc, #4]	@ (8002a88 <HAL_RCC_OscConfig+0xe38>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	e02a      	b.n	8002adc <HAL_RCC_OscConfig+0xe8c>
 8002a86:	bf00      	nop
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a90:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a94:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a9e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	fa93 f2a3 	rbit	r2, r3
 8002aa8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aac:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ab6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002aba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ac4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	fa93 f2a3 	rbit	r2, r3
 8002ace:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ad2:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	4b86      	ldr	r3, [pc, #536]	@ (8002cf4 <HAL_RCC_OscConfig+0x10a4>)
 8002ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002adc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ae0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002ae4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002ae8:	6011      	str	r1, [r2, #0]
 8002aea:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002aee:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002af2:	6812      	ldr	r2, [r2, #0]
 8002af4:	fa92 f1a2 	rbit	r1, r2
 8002af8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002afc:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002b00:	6011      	str	r1, [r2, #0]
  return result;
 8002b02:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b06:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002b0a:	6812      	ldr	r2, [r2, #0]
 8002b0c:	fab2 f282 	clz	r2, r2
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	f042 0220 	orr.w	r2, r2, #32
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	f002 021f 	and.w	r2, r2, #31
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b22:	4013      	ands	r3, r2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f43f af7f 	beq.w	8002a28 <HAL_RCC_OscConfig+0xdd8>
 8002b2a:	e0dd      	b.n	8002ce8 <HAL_RCC_OscConfig+0x1098>
 8002b2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b30:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002b34:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b3e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	fa93 f2a3 	rbit	r2, r3
 8002b48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b4c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002b50:	601a      	str	r2, [r3, #0]
  return result;
 8002b52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b56:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002b5a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b5c:	fab3 f383 	clz	r3, r3
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b66:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	2300      	movs	r3, #0
 8002b70:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b72:	f7fe fd37 	bl	80015e4 <HAL_GetTick>
 8002b76:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b7a:	e009      	b.n	8002b90 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b7c:	f7fe fd32 	bl	80015e4 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e0ac      	b.n	8002cea <HAL_RCC_OscConfig+0x109a>
 8002b90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b94:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002b98:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ba2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	fa93 f2a3 	rbit	r2, r3
 8002bac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bb0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002bb4:	601a      	str	r2, [r3, #0]
  return result;
 8002bb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bba:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002bbe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bc0:	fab3 f383 	clz	r3, r3
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	095b      	lsrs	r3, r3, #5
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	f043 0301 	orr.w	r3, r3, #1
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d102      	bne.n	8002bda <HAL_RCC_OscConfig+0xf8a>
 8002bd4:	4b47      	ldr	r3, [pc, #284]	@ (8002cf4 <HAL_RCC_OscConfig+0x10a4>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	e027      	b.n	8002c2a <HAL_RCC_OscConfig+0xfda>
 8002bda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bde:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002be2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002be6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bec:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	fa93 f2a3 	rbit	r2, r3
 8002bf6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bfa:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c04:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002c08:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c12:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	fa93 f2a3 	rbit	r2, r3
 8002c1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c20:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	4b33      	ldr	r3, [pc, #204]	@ (8002cf4 <HAL_RCC_OscConfig+0x10a4>)
 8002c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002c2e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002c32:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002c36:	6011      	str	r1, [r2, #0]
 8002c38:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002c3c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002c40:	6812      	ldr	r2, [r2, #0]
 8002c42:	fa92 f1a2 	rbit	r1, r2
 8002c46:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002c4a:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002c4e:	6011      	str	r1, [r2, #0]
  return result;
 8002c50:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002c54:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	fab2 f282 	clz	r2, r2
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	f042 0220 	orr.w	r2, r2, #32
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	f002 021f 	and.w	r2, r2, #31
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c70:	4013      	ands	r3, r2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d182      	bne.n	8002b7c <HAL_RCC_OscConfig+0xf2c>
 8002c76:	e037      	b.n	8002ce8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c7c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e02e      	b.n	8002cea <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c8c:	4b19      	ldr	r3, [pc, #100]	@ (8002cf4 <HAL_RCC_OscConfig+0x10a4>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002c94:	4b17      	ldr	r3, [pc, #92]	@ (8002cf4 <HAL_RCC_OscConfig+0x10a4>)
 8002c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c98:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c9c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002ca0:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002ca4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ca8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	69db      	ldr	r3, [r3, #28]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d117      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002cb4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002cb8:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002cbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cc0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d10b      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002ccc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002cd0:	f003 020f 	and.w	r2, r3, #15
 8002cd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cd8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d001      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e000      	b.n	8002cea <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40021000 	.word	0x40021000

08002cf8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b09e      	sub	sp, #120	@ 0x78
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d02:	2300      	movs	r3, #0
 8002d04:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e162      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d10:	4b90      	ldr	r3, [pc, #576]	@ (8002f54 <HAL_RCC_ClockConfig+0x25c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d910      	bls.n	8002d40 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1e:	4b8d      	ldr	r3, [pc, #564]	@ (8002f54 <HAL_RCC_ClockConfig+0x25c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f023 0207 	bic.w	r2, r3, #7
 8002d26:	498b      	ldr	r1, [pc, #556]	@ (8002f54 <HAL_RCC_ClockConfig+0x25c>)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2e:	4b89      	ldr	r3, [pc, #548]	@ (8002f54 <HAL_RCC_ClockConfig+0x25c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d001      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e14a      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d008      	beq.n	8002d5e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d4c:	4b82      	ldr	r3, [pc, #520]	@ (8002f58 <HAL_RCC_ClockConfig+0x260>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	497f      	ldr	r1, [pc, #508]	@ (8002f58 <HAL_RCC_ClockConfig+0x260>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 80dc 	beq.w	8002f24 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d13c      	bne.n	8002dee <HAL_RCC_ClockConfig+0xf6>
 8002d74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d78:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d7c:	fa93 f3a3 	rbit	r3, r3
 8002d80:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002d82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d84:	fab3 f383 	clz	r3, r3
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	095b      	lsrs	r3, r3, #5
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d102      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xa6>
 8002d98:	4b6f      	ldr	r3, [pc, #444]	@ (8002f58 <HAL_RCC_ClockConfig+0x260>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	e00f      	b.n	8002dbe <HAL_RCC_ClockConfig+0xc6>
 8002d9e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002da2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002da6:	fa93 f3a3 	rbit	r3, r3
 8002daa:	667b      	str	r3, [r7, #100]	@ 0x64
 8002dac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002db0:	663b      	str	r3, [r7, #96]	@ 0x60
 8002db2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002db4:	fa93 f3a3 	rbit	r3, r3
 8002db8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002dba:	4b67      	ldr	r3, [pc, #412]	@ (8002f58 <HAL_RCC_ClockConfig+0x260>)
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002dc2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002dc4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002dc6:	fa92 f2a2 	rbit	r2, r2
 8002dca:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002dcc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002dce:	fab2 f282 	clz	r2, r2
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	f042 0220 	orr.w	r2, r2, #32
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	f002 021f 	and.w	r2, r2, #31
 8002dde:	2101      	movs	r1, #1
 8002de0:	fa01 f202 	lsl.w	r2, r1, r2
 8002de4:	4013      	ands	r3, r2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d17b      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e0f3      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d13c      	bne.n	8002e70 <HAL_RCC_ClockConfig+0x178>
 8002df6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002dfa:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dfe:	fa93 f3a3 	rbit	r3, r3
 8002e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002e04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e06:	fab3 f383 	clz	r3, r3
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	095b      	lsrs	r3, r3, #5
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d102      	bne.n	8002e20 <HAL_RCC_ClockConfig+0x128>
 8002e1a:	4b4f      	ldr	r3, [pc, #316]	@ (8002f58 <HAL_RCC_ClockConfig+0x260>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	e00f      	b.n	8002e40 <HAL_RCC_ClockConfig+0x148>
 8002e20:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e24:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e28:	fa93 f3a3 	rbit	r3, r3
 8002e2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e32:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e36:	fa93 f3a3 	rbit	r3, r3
 8002e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e3c:	4b46      	ldr	r3, [pc, #280]	@ (8002f58 <HAL_RCC_ClockConfig+0x260>)
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e40:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e44:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002e46:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002e48:	fa92 f2a2 	rbit	r2, r2
 8002e4c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002e4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e50:	fab2 f282 	clz	r2, r2
 8002e54:	b2d2      	uxtb	r2, r2
 8002e56:	f042 0220 	orr.w	r2, r2, #32
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	f002 021f 	and.w	r2, r2, #31
 8002e60:	2101      	movs	r1, #1
 8002e62:	fa01 f202 	lsl.w	r2, r1, r2
 8002e66:	4013      	ands	r3, r2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d13a      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e0b2      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x2de>
 8002e70:	2302      	movs	r3, #2
 8002e72:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e76:	fa93 f3a3 	rbit	r3, r3
 8002e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e7e:	fab3 f383 	clz	r3, r3
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	095b      	lsrs	r3, r3, #5
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	f043 0301 	orr.w	r3, r3, #1
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d102      	bne.n	8002e98 <HAL_RCC_ClockConfig+0x1a0>
 8002e92:	4b31      	ldr	r3, [pc, #196]	@ (8002f58 <HAL_RCC_ClockConfig+0x260>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	e00d      	b.n	8002eb4 <HAL_RCC_ClockConfig+0x1bc>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e9e:	fa93 f3a3 	rbit	r3, r3
 8002ea2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	623b      	str	r3, [r7, #32]
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	fa93 f3a3 	rbit	r3, r3
 8002eae:	61fb      	str	r3, [r7, #28]
 8002eb0:	4b29      	ldr	r3, [pc, #164]	@ (8002f58 <HAL_RCC_ClockConfig+0x260>)
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb4:	2202      	movs	r2, #2
 8002eb6:	61ba      	str	r2, [r7, #24]
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	fa92 f2a2 	rbit	r2, r2
 8002ebe:	617a      	str	r2, [r7, #20]
  return result;
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	fab2 f282 	clz	r2, r2
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	f042 0220 	orr.w	r2, r2, #32
 8002ecc:	b2d2      	uxtb	r2, r2
 8002ece:	f002 021f 	and.w	r2, r2, #31
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed8:	4013      	ands	r3, r2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e079      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f58 <HAL_RCC_ClockConfig+0x260>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f023 0203 	bic.w	r2, r3, #3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	491a      	ldr	r1, [pc, #104]	@ (8002f58 <HAL_RCC_ClockConfig+0x260>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ef4:	f7fe fb76 	bl	80015e4 <HAL_GetTick>
 8002ef8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002efa:	e00a      	b.n	8002f12 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002efc:	f7fe fb72 	bl	80015e4 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e061      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f12:	4b11      	ldr	r3, [pc, #68]	@ (8002f58 <HAL_RCC_ClockConfig+0x260>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f003 020c 	and.w	r2, r3, #12
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d1eb      	bne.n	8002efc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f24:	4b0b      	ldr	r3, [pc, #44]	@ (8002f54 <HAL_RCC_ClockConfig+0x25c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d214      	bcs.n	8002f5c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f32:	4b08      	ldr	r3, [pc, #32]	@ (8002f54 <HAL_RCC_ClockConfig+0x25c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f023 0207 	bic.w	r2, r3, #7
 8002f3a:	4906      	ldr	r1, [pc, #24]	@ (8002f54 <HAL_RCC_ClockConfig+0x25c>)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f42:	4b04      	ldr	r3, [pc, #16]	@ (8002f54 <HAL_RCC_ClockConfig+0x25c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0307 	and.w	r3, r3, #7
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d005      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e040      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x2de>
 8002f54:	40022000 	.word	0x40022000
 8002f58:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d008      	beq.n	8002f7a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f68:	4b1d      	ldr	r3, [pc, #116]	@ (8002fe0 <HAL_RCC_ClockConfig+0x2e8>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	491a      	ldr	r1, [pc, #104]	@ (8002fe0 <HAL_RCC_ClockConfig+0x2e8>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d009      	beq.n	8002f9a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f86:	4b16      	ldr	r3, [pc, #88]	@ (8002fe0 <HAL_RCC_ClockConfig+0x2e8>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	4912      	ldr	r1, [pc, #72]	@ (8002fe0 <HAL_RCC_ClockConfig+0x2e8>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f9a:	f000 f829 	bl	8002ff0 <HAL_RCC_GetSysClockFreq>
 8002f9e:	4601      	mov	r1, r0
 8002fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8002fe0 <HAL_RCC_ClockConfig+0x2e8>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fa8:	22f0      	movs	r2, #240	@ 0xf0
 8002faa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	fa92 f2a2 	rbit	r2, r2
 8002fb2:	60fa      	str	r2, [r7, #12]
  return result;
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	fab2 f282 	clz	r2, r2
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	40d3      	lsrs	r3, r2
 8002fbe:	4a09      	ldr	r2, [pc, #36]	@ (8002fe4 <HAL_RCC_ClockConfig+0x2ec>)
 8002fc0:	5cd3      	ldrb	r3, [r2, r3]
 8002fc2:	fa21 f303 	lsr.w	r3, r1, r3
 8002fc6:	4a08      	ldr	r2, [pc, #32]	@ (8002fe8 <HAL_RCC_ClockConfig+0x2f0>)
 8002fc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002fca:	4b08      	ldr	r3, [pc, #32]	@ (8002fec <HAL_RCC_ClockConfig+0x2f4>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fe fac4 	bl	800155c <HAL_InitTick>
  
  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3778      	adds	r7, #120	@ 0x78
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	080070a8 	.word	0x080070a8
 8002fe8:	200000dc 	.word	0x200000dc
 8002fec:	200000e0 	.word	0x200000e0

08002ff0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b08b      	sub	sp, #44	@ 0x2c
 8002ff4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61fb      	str	r3, [r7, #28]
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61bb      	str	r3, [r7, #24]
 8002ffe:	2300      	movs	r3, #0
 8003000:	627b      	str	r3, [r7, #36]	@ 0x24
 8003002:	2300      	movs	r3, #0
 8003004:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003006:	2300      	movs	r3, #0
 8003008:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800300a:	4b2a      	ldr	r3, [pc, #168]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	f003 030c 	and.w	r3, r3, #12
 8003016:	2b04      	cmp	r3, #4
 8003018:	d002      	beq.n	8003020 <HAL_RCC_GetSysClockFreq+0x30>
 800301a:	2b08      	cmp	r3, #8
 800301c:	d003      	beq.n	8003026 <HAL_RCC_GetSysClockFreq+0x36>
 800301e:	e03f      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003020:	4b25      	ldr	r3, [pc, #148]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003022:	623b      	str	r3, [r7, #32]
      break;
 8003024:	e03f      	b.n	80030a6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800302c:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8003030:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	fa92 f2a2 	rbit	r2, r2
 8003038:	607a      	str	r2, [r7, #4]
  return result;
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	fab2 f282 	clz	r2, r2
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	40d3      	lsrs	r3, r2
 8003044:	4a1d      	ldr	r2, [pc, #116]	@ (80030bc <HAL_RCC_GetSysClockFreq+0xcc>)
 8003046:	5cd3      	ldrb	r3, [r2, r3]
 8003048:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800304a:	4b1a      	ldr	r3, [pc, #104]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800304c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	220f      	movs	r2, #15
 8003054:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	fa92 f2a2 	rbit	r2, r2
 800305c:	60fa      	str	r2, [r7, #12]
  return result;
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	fab2 f282 	clz	r2, r2
 8003064:	b2d2      	uxtb	r2, r2
 8003066:	40d3      	lsrs	r3, r2
 8003068:	4a15      	ldr	r2, [pc, #84]	@ (80030c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800306a:	5cd3      	ldrb	r3, [r2, r3]
 800306c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d008      	beq.n	800308a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003078:	4a0f      	ldr	r2, [pc, #60]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	fb02 f303 	mul.w	r3, r2, r3
 8003086:	627b      	str	r3, [r7, #36]	@ 0x24
 8003088:	e007      	b.n	800309a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800308a:	4a0b      	ldr	r2, [pc, #44]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	fb02 f303 	mul.w	r3, r2, r3
 8003098:	627b      	str	r3, [r7, #36]	@ 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800309a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309c:	623b      	str	r3, [r7, #32]
      break;
 800309e:	e002      	b.n	80030a6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030a0:	4b05      	ldr	r3, [pc, #20]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80030a2:	623b      	str	r3, [r7, #32]
      break;
 80030a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030a6:	6a3b      	ldr	r3, [r7, #32]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	372c      	adds	r7, #44	@ 0x2c
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	40021000 	.word	0x40021000
 80030b8:	007a1200 	.word	0x007a1200
 80030bc:	080070c0 	.word	0x080070c0
 80030c0:	080070d0 	.word	0x080070d0

080030c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c8:	4b03      	ldr	r3, [pc, #12]	@ (80030d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80030ca:	681b      	ldr	r3, [r3, #0]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	200000dc 	.word	0x200000dc

080030dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80030e2:	f7ff ffef 	bl	80030c4 <HAL_RCC_GetHCLKFreq>
 80030e6:	4601      	mov	r1, r0
 80030e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003118 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80030f0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80030f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	fa92 f2a2 	rbit	r2, r2
 80030fc:	603a      	str	r2, [r7, #0]
  return result;
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	fab2 f282 	clz	r2, r2
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	40d3      	lsrs	r3, r2
 8003108:	4a04      	ldr	r2, [pc, #16]	@ (800311c <HAL_RCC_GetPCLK1Freq+0x40>)
 800310a:	5cd3      	ldrb	r3, [r2, r3]
 800310c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003110:	4618      	mov	r0, r3
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40021000 	.word	0x40021000
 800311c:	080070b8 	.word	0x080070b8

08003120 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003126:	f7ff ffcd 	bl	80030c4 <HAL_RCC_GetHCLKFreq>
 800312a:	4601      	mov	r1, r0
 800312c:	4b0b      	ldr	r3, [pc, #44]	@ (800315c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003134:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003138:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	fa92 f2a2 	rbit	r2, r2
 8003140:	603a      	str	r2, [r7, #0]
  return result;
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	fab2 f282 	clz	r2, r2
 8003148:	b2d2      	uxtb	r2, r2
 800314a:	40d3      	lsrs	r3, r2
 800314c:	4a04      	ldr	r2, [pc, #16]	@ (8003160 <HAL_RCC_GetPCLK2Freq+0x40>)
 800314e:	5cd3      	ldrb	r3, [r2, r3]
 8003150:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003154:	4618      	mov	r0, r3
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40021000 	.word	0x40021000
 8003160:	080070b8 	.word	0x080070b8

08003164 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b092      	sub	sp, #72	@ 0x48
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800316c:	2300      	movs	r3, #0
 800316e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003174:	2300      	movs	r3, #0
 8003176:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 80d4 	beq.w	8003330 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003188:	4b4e      	ldr	r3, [pc, #312]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10e      	bne.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003194:	4b4b      	ldr	r3, [pc, #300]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	4a4a      	ldr	r2, [pc, #296]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800319a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800319e:	61d3      	str	r3, [r2, #28]
 80031a0:	4b48      	ldr	r3, [pc, #288]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031a2:	69db      	ldr	r3, [r3, #28]
 80031a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031a8:	60bb      	str	r3, [r7, #8]
 80031aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ac:	2301      	movs	r3, #1
 80031ae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b2:	4b45      	ldr	r3, [pc, #276]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d118      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031be:	4b42      	ldr	r3, [pc, #264]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a41      	ldr	r2, [pc, #260]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ca:	f7fe fa0b 	bl	80015e4 <HAL_GetTick>
 80031ce:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d0:	e008      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d2:	f7fe fa07 	bl	80015e4 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b64      	cmp	r3, #100	@ 0x64
 80031de:	d901      	bls.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e1d6      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e4:	4b38      	ldr	r3, [pc, #224]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d0f0      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031f0:	4b34      	ldr	r3, [pc, #208]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 8084 	beq.w	800330a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800320a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800320c:	429a      	cmp	r2, r3
 800320e:	d07c      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003210:	4b2c      	ldr	r3, [pc, #176]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003218:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800321a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800321e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003222:	fa93 f3a3 	rbit	r3, r3
 8003226:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800322a:	fab3 f383 	clz	r3, r3
 800322e:	b2db      	uxtb	r3, r3
 8003230:	461a      	mov	r2, r3
 8003232:	4b26      	ldr	r3, [pc, #152]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003234:	4413      	add	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	461a      	mov	r2, r3
 800323a:	2301      	movs	r3, #1
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003242:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003246:	fa93 f3a3 	rbit	r3, r3
 800324a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800324c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800324e:	fab3 f383 	clz	r3, r3
 8003252:	b2db      	uxtb	r3, r3
 8003254:	461a      	mov	r2, r3
 8003256:	4b1d      	ldr	r3, [pc, #116]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003258:	4413      	add	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	461a      	mov	r2, r3
 800325e:	2300      	movs	r3, #0
 8003260:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003262:	4a18      	ldr	r2, [pc, #96]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003266:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d04b      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003272:	f7fe f9b7 	bl	80015e4 <HAL_GetTick>
 8003276:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003278:	e00a      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327a:	f7fe f9b3 	bl	80015e4 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003288:	4293      	cmp	r3, r2
 800328a:	d901      	bls.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e180      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003290:	2302      	movs	r3, #2
 8003292:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003296:	fa93 f3a3 	rbit	r3, r3
 800329a:	627b      	str	r3, [r7, #36]	@ 0x24
 800329c:	2302      	movs	r3, #2
 800329e:	623b      	str	r3, [r7, #32]
 80032a0:	6a3b      	ldr	r3, [r7, #32]
 80032a2:	fa93 f3a3 	rbit	r3, r3
 80032a6:	61fb      	str	r3, [r7, #28]
  return result;
 80032a8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032aa:	fab3 f383 	clz	r3, r3
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	095b      	lsrs	r3, r3, #5
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	f043 0302 	orr.w	r3, r3, #2
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d108      	bne.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80032be:	4b01      	ldr	r3, [pc, #4]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	e00d      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80032c4:	40021000 	.word	0x40021000
 80032c8:	40007000 	.word	0x40007000
 80032cc:	10908100 	.word	0x10908100
 80032d0:	2302      	movs	r3, #2
 80032d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	fa93 f3a3 	rbit	r3, r3
 80032da:	617b      	str	r3, [r7, #20]
 80032dc:	4b9a      	ldr	r3, [pc, #616]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e0:	2202      	movs	r2, #2
 80032e2:	613a      	str	r2, [r7, #16]
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	fa92 f2a2 	rbit	r2, r2
 80032ea:	60fa      	str	r2, [r7, #12]
  return result;
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	fab2 f282 	clz	r2, r2
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	f002 021f 	and.w	r2, r2, #31
 80032fe:	2101      	movs	r1, #1
 8003300:	fa01 f202 	lsl.w	r2, r1, r2
 8003304:	4013      	ands	r3, r2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0b7      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800330a:	4b8f      	ldr	r3, [pc, #572]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	498c      	ldr	r1, [pc, #560]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003318:	4313      	orrs	r3, r2
 800331a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800331c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003320:	2b01      	cmp	r3, #1
 8003322:	d105      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003324:	4b88      	ldr	r3, [pc, #544]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	4a87      	ldr	r2, [pc, #540]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800332a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800332e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d008      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800333c:	4b82      	ldr	r3, [pc, #520]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800333e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003340:	f023 0203 	bic.w	r2, r3, #3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	497f      	ldr	r1, [pc, #508]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800334a:	4313      	orrs	r3, r2
 800334c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d008      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800335a:	4b7b      	ldr	r3, [pc, #492]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	4978      	ldr	r1, [pc, #480]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003368:	4313      	orrs	r3, r2
 800336a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d008      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003378:	4b73      	ldr	r3, [pc, #460]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800337a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	4970      	ldr	r1, [pc, #448]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003386:	4313      	orrs	r3, r2
 8003388:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0320 	and.w	r3, r3, #32
 8003392:	2b00      	cmp	r3, #0
 8003394:	d008      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003396:	4b6c      	ldr	r3, [pc, #432]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339a:	f023 0210 	bic.w	r2, r3, #16
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	4969      	ldr	r1, [pc, #420]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d008      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80033b4:	4b64      	ldr	r3, [pc, #400]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033c0:	4961      	ldr	r1, [pc, #388]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d008      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033d2:	4b5d      	ldr	r3, [pc, #372]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d6:	f023 0220 	bic.w	r2, r3, #32
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	495a      	ldr	r1, [pc, #360]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d008      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033f0:	4b55      	ldr	r3, [pc, #340]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fc:	4952      	ldr	r1, [pc, #328]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b00      	cmp	r3, #0
 800340c:	d008      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800340e:	4b4e      	ldr	r3, [pc, #312]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003412:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	494b      	ldr	r1, [pc, #300]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800341c:	4313      	orrs	r3, r2
 800341e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0310 	and.w	r3, r3, #16
 8003428:	2b00      	cmp	r3, #0
 800342a:	d008      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800342c:	4b46      	ldr	r3, [pc, #280]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800342e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003430:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	4943      	ldr	r1, [pc, #268]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800343a:	4313      	orrs	r3, r2
 800343c:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003446:	2b00      	cmp	r3, #0
 8003448:	d008      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800344a:	4b3f      	ldr	r3, [pc, #252]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003456:	493c      	ldr	r1, [pc, #240]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003458:	4313      	orrs	r3, r2
 800345a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003468:	4b37      	ldr	r3, [pc, #220]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800346a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800346c:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003474:	4934      	ldr	r1, [pc, #208]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003476:	4313      	orrs	r3, r2
 8003478:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003482:	2b00      	cmp	r3, #0
 8003484:	d008      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003486:	4b30      	ldr	r3, [pc, #192]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800348a:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003492:	492d      	ldr	r1, [pc, #180]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003494:	4313      	orrs	r3, r2
 8003496:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d008      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80034a4:	4b28      	ldr	r3, [pc, #160]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034b0:	4925      	ldr	r1, [pc, #148]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d008      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80034c2:	4b21      	ldr	r3, [pc, #132]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c6:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ce:	491e      	ldr	r1, [pc, #120]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d008      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80034e0:	4b19      	ldr	r3, [pc, #100]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ec:	4916      	ldr	r1, [pc, #88]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d008      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80034fe:	4b12      	ldr	r3, [pc, #72]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003502:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800350a:	490f      	ldr	r1, [pc, #60]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800350c:	4313      	orrs	r3, r2
 800350e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d008      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800351c:	4b0a      	ldr	r3, [pc, #40]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800351e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003520:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003528:	4907      	ldr	r1, [pc, #28]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800352a:	4313      	orrs	r3, r2
 800352c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00c      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800353a:	4b03      	ldr	r3, [pc, #12]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	e002      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003546:	bf00      	nop
 8003548:	40021000 	.word	0x40021000
 800354c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800354e:	4913      	ldr	r1, [pc, #76]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003550:	4313      	orrs	r3, r2
 8003552:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d008      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003560:	4b0e      	ldr	r3, [pc, #56]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003564:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800356c:	490b      	ldr	r1, [pc, #44]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800356e:	4313      	orrs	r3, r2
 8003570:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d008      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800357e:	4b07      	ldr	r3, [pc, #28]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003582:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800358a:	4904      	ldr	r1, [pc, #16]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800358c:	4313      	orrs	r3, r2
 800358e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3748      	adds	r7, #72	@ 0x48
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	40021000 	.word	0x40021000

080035a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e09d      	b.n	80036ee <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d108      	bne.n	80035cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035c2:	d009      	beq.n	80035d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	61da      	str	r2, [r3, #28]
 80035ca:	e005      	b.n	80035d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d106      	bne.n	80035f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7fd f880 	bl	80006f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800360e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003618:	d902      	bls.n	8003620 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800361a:	2300      	movs	r3, #0
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	e002      	b.n	8003626 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003620:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003624:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800362e:	d007      	beq.n	8003640 <HAL_SPI_Init+0xa0>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003638:	d002      	beq.n	8003640 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003650:	431a      	orrs	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	431a      	orrs	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800366e:	431a      	orrs	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003678:	431a      	orrs	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003682:	ea42 0103 	orr.w	r1, r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800368a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	0c1b      	lsrs	r3, r3, #16
 800369c:	f003 0204 	and.w	r2, r3, #4
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a4:	f003 0310 	and.w	r3, r3, #16
 80036a8:	431a      	orrs	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80036bc:	ea42 0103 	orr.w	r1, r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	69da      	ldr	r2, [r3, #28]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b088      	sub	sp, #32
 80036fa:	af02      	add	r7, sp, #8
 80036fc:	60f8      	str	r0, [r7, #12]
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	603b      	str	r3, [r7, #0]
 8003702:	4613      	mov	r3, r2
 8003704:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003706:	2300      	movs	r3, #0
 8003708:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b01      	cmp	r3, #1
 8003714:	d002      	beq.n	800371c <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003716:	2302      	movs	r3, #2
 8003718:	75fb      	strb	r3, [r7, #23]
    goto error;
 800371a:	e11a      	b.n	8003952 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003724:	d112      	bne.n	800374c <HAL_SPI_Receive+0x56>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10e      	bne.n	800374c <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2204      	movs	r2, #4
 8003732:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003736:	88fa      	ldrh	r2, [r7, #6]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	4613      	mov	r3, r2
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	68b9      	ldr	r1, [r7, #8]
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 f90e 	bl	8003964 <HAL_SPI_TransmitReceive>
 8003748:	4603      	mov	r3, r0
 800374a:	e107      	b.n	800395c <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003752:	2b01      	cmp	r3, #1
 8003754:	d101      	bne.n	800375a <HAL_SPI_Receive+0x64>
 8003756:	2302      	movs	r3, #2
 8003758:	e100      	b.n	800395c <HAL_SPI_Receive+0x266>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003762:	f7fd ff3f 	bl	80015e4 <HAL_GetTick>
 8003766:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d002      	beq.n	8003774 <HAL_SPI_Receive+0x7e>
 800376e:	88fb      	ldrh	r3, [r7, #6]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d102      	bne.n	800377a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003778:	e0eb      	b.n	8003952 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2204      	movs	r2, #4
 800377e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	88fa      	ldrh	r2, [r7, #6]
 8003792:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	88fa      	ldrh	r2, [r7, #6]
 800379a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80037c4:	d908      	bls.n	80037d8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80037d4:	605a      	str	r2, [r3, #4]
 80037d6:	e007      	b.n	80037e8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80037e6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037f0:	d10f      	bne.n	8003812 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003800:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003810:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800381c:	2b40      	cmp	r3, #64	@ 0x40
 800381e:	d007      	beq.n	8003830 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800382e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003838:	d86f      	bhi.n	800391a <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800383a:	e034      	b.n	80038a6 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b01      	cmp	r3, #1
 8003848:	d117      	bne.n	800387a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f103 020c 	add.w	r2, r3, #12
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003856:	7812      	ldrb	r2, [r2, #0]
 8003858:	b2d2      	uxtb	r2, r2
 800385a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003860:	1c5a      	adds	r2, r3, #1
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800386c:	b29b      	uxth	r3, r3
 800386e:	3b01      	subs	r3, #1
 8003870:	b29a      	uxth	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003878:	e015      	b.n	80038a6 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800387a:	f7fd feb3 	bl	80015e4 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	429a      	cmp	r2, r3
 8003888:	d803      	bhi.n	8003892 <HAL_SPI_Receive+0x19c>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003890:	d102      	bne.n	8003898 <HAL_SPI_Receive+0x1a2>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d106      	bne.n	80038a6 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80038a4:	e055      	b.n	8003952 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1c4      	bne.n	800383c <HAL_SPI_Receive+0x146>
 80038b2:	e038      	b.n	8003926 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d115      	bne.n	80038ee <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68da      	ldr	r2, [r3, #12]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038cc:	b292      	uxth	r2, r2
 80038ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d4:	1c9a      	adds	r2, r3, #2
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80038ec:	e015      	b.n	800391a <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038ee:	f7fd fe79 	bl	80015e4 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d803      	bhi.n	8003906 <HAL_SPI_Receive+0x210>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003904:	d102      	bne.n	800390c <HAL_SPI_Receive+0x216>
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d106      	bne.n	800391a <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003918:	e01b      	b.n	8003952 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003920:	b29b      	uxth	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1c6      	bne.n	80038b4 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	6839      	ldr	r1, [r7, #0]
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 fc6e 	bl	800420c <SPI_EndRxTransaction>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d002      	beq.n	800393c <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2220      	movs	r2, #32
 800393a:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003940:	2b00      	cmp	r3, #0
 8003942:	d002      	beq.n	800394a <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	75fb      	strb	r3, [r7, #23]
 8003948:	e003      	b.n	8003952 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800395a:	7dfb      	ldrb	r3, [r7, #23]
}
 800395c:	4618      	mov	r0, r3
 800395e:	3718      	adds	r7, #24
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b08a      	sub	sp, #40	@ 0x28
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003972:	2301      	movs	r3, #1
 8003974:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003976:	2300      	movs	r3, #0
 8003978:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003982:	2b01      	cmp	r3, #1
 8003984:	d101      	bne.n	800398a <HAL_SPI_TransmitReceive+0x26>
 8003986:	2302      	movs	r3, #2
 8003988:	e20a      	b.n	8003da0 <HAL_SPI_TransmitReceive+0x43c>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003992:	f7fd fe27 	bl	80015e4 <HAL_GetTick>
 8003996:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800399e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80039a6:	887b      	ldrh	r3, [r7, #2]
 80039a8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80039aa:	887b      	ldrh	r3, [r7, #2]
 80039ac:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80039ae:	7efb      	ldrb	r3, [r7, #27]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d00e      	beq.n	80039d2 <HAL_SPI_TransmitReceive+0x6e>
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039ba:	d106      	bne.n	80039ca <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d102      	bne.n	80039ca <HAL_SPI_TransmitReceive+0x66>
 80039c4:	7efb      	ldrb	r3, [r7, #27]
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d003      	beq.n	80039d2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80039ca:	2302      	movs	r3, #2
 80039cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80039d0:	e1e0      	b.n	8003d94 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d005      	beq.n	80039e4 <HAL_SPI_TransmitReceive+0x80>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <HAL_SPI_TransmitReceive+0x80>
 80039de:	887b      	ldrh	r3, [r7, #2]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d103      	bne.n	80039ec <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80039ea:	e1d3      	b.n	8003d94 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b04      	cmp	r3, #4
 80039f6:	d003      	beq.n	8003a00 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2205      	movs	r2, #5
 80039fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	887a      	ldrh	r2, [r7, #2]
 8003a10:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	887a      	ldrh	r2, [r7, #2]
 8003a18:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	887a      	ldrh	r2, [r7, #2]
 8003a26:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	887a      	ldrh	r2, [r7, #2]
 8003a2c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a42:	d802      	bhi.n	8003a4a <HAL_SPI_TransmitReceive+0xe6>
 8003a44:	8a3b      	ldrh	r3, [r7, #16]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d908      	bls.n	8003a5c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003a58:	605a      	str	r2, [r3, #4]
 8003a5a:	e007      	b.n	8003a6c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003a6a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a76:	2b40      	cmp	r3, #64	@ 0x40
 8003a78:	d007      	beq.n	8003a8a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a92:	f240 8081 	bls.w	8003b98 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d002      	beq.n	8003aa4 <HAL_SPI_TransmitReceive+0x140>
 8003a9e:	8a7b      	ldrh	r3, [r7, #18]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d16d      	bne.n	8003b80 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa8:	881a      	ldrh	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab4:	1c9a      	adds	r2, r3, #2
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ac8:	e05a      	b.n	8003b80 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d11b      	bne.n	8003b10 <HAL_SPI_TransmitReceive+0x1ac>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d016      	beq.n	8003b10 <HAL_SPI_TransmitReceive+0x1ac>
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d113      	bne.n	8003b10 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aec:	881a      	ldrh	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af8:	1c9a      	adds	r2, r3, #2
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d11c      	bne.n	8003b58 <HAL_SPI_TransmitReceive+0x1f4>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d016      	beq.n	8003b58 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68da      	ldr	r2, [r3, #12]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b34:	b292      	uxth	r2, r2
 8003b36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3c:	1c9a      	adds	r2, r3, #2
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b54:	2301      	movs	r3, #1
 8003b56:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b58:	f7fd fd44 	bl	80015e4 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d80b      	bhi.n	8003b80 <HAL_SPI_TransmitReceive+0x21c>
 8003b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6e:	d007      	beq.n	8003b80 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003b7e:	e109      	b.n	8003d94 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d19f      	bne.n	8003aca <HAL_SPI_TransmitReceive+0x166>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d199      	bne.n	8003aca <HAL_SPI_TransmitReceive+0x166>
 8003b96:	e0e3      	b.n	8003d60 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <HAL_SPI_TransmitReceive+0x244>
 8003ba0:	8a7b      	ldrh	r3, [r7, #18]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	f040 80cf 	bne.w	8003d46 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d912      	bls.n	8003bd8 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb6:	881a      	ldrh	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc2:	1c9a      	adds	r2, r3, #2
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	3b02      	subs	r3, #2
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003bd6:	e0b6      	b.n	8003d46 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	330c      	adds	r3, #12
 8003be2:	7812      	ldrb	r2, [r2, #0]
 8003be4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bea:	1c5a      	adds	r2, r3, #1
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bfe:	e0a2      	b.n	8003d46 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d134      	bne.n	8003c78 <HAL_SPI_TransmitReceive+0x314>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d02f      	beq.n	8003c78 <HAL_SPI_TransmitReceive+0x314>
 8003c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d12c      	bne.n	8003c78 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d912      	bls.n	8003c4e <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c2c:	881a      	ldrh	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c38:	1c9a      	adds	r2, r3, #2
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	3b02      	subs	r3, #2
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c4c:	e012      	b.n	8003c74 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	330c      	adds	r3, #12
 8003c58:	7812      	ldrb	r2, [r2, #0]
 8003c5a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c74:	2300      	movs	r3, #0
 8003c76:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d148      	bne.n	8003d18 <HAL_SPI_TransmitReceive+0x3b4>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d042      	beq.n	8003d18 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d923      	bls.n	8003ce6 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68da      	ldr	r2, [r3, #12]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca8:	b292      	uxth	r2, r2
 8003caa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb0:	1c9a      	adds	r2, r3, #2
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	3b02      	subs	r3, #2
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d81f      	bhi.n	8003d14 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003ce2:	605a      	str	r2, [r3, #4]
 8003ce4:	e016      	b.n	8003d14 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f103 020c 	add.w	r2, r3, #12
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf2:	7812      	ldrb	r2, [r2, #0]
 8003cf4:	b2d2      	uxtb	r2, r2
 8003cf6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfc:	1c5a      	adds	r2, r3, #1
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d14:	2301      	movs	r3, #1
 8003d16:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d18:	f7fd fc64 	bl	80015e4 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d803      	bhi.n	8003d30 <HAL_SPI_TransmitReceive+0x3cc>
 8003d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2e:	d102      	bne.n	8003d36 <HAL_SPI_TransmitReceive+0x3d2>
 8003d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d107      	bne.n	8003d46 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003d44:	e026      	b.n	8003d94 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f47f af57 	bne.w	8003c00 <HAL_SPI_TransmitReceive+0x29c>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f47f af50 	bne.w	8003c00 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d60:	69fa      	ldr	r2, [r7, #28]
 8003d62:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 faa9 	bl	80042bc <SPI_EndRxTxTransaction>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d8a:	e003      	b.n	8003d94 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003d9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3728      	adds	r7, #40	@ 0x28
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b088      	sub	sp, #32
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10e      	bne.n	8003de8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d009      	beq.n	8003de8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d004      	beq.n	8003de8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	4798      	blx	r3
    return;
 8003de6:	e0ce      	b.n	8003f86 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d009      	beq.n	8003e06 <HAL_SPI_IRQHandler+0x5e>
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d004      	beq.n	8003e06 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	4798      	blx	r3
    return;
 8003e04:	e0bf      	b.n	8003f86 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	f003 0320 	and.w	r3, r3, #32
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10a      	bne.n	8003e26 <HAL_SPI_IRQHandler+0x7e>
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d105      	bne.n	8003e26 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 80b0 	beq.w	8003f86 <HAL_SPI_IRQHandler+0x1de>
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	f003 0320 	and.w	r3, r3, #32
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 80aa 	beq.w	8003f86 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d023      	beq.n	8003e84 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b03      	cmp	r3, #3
 8003e46:	d011      	beq.n	8003e6c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e4c:	f043 0204 	orr.w	r2, r3, #4
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e54:	2300      	movs	r3, #0
 8003e56:	617b      	str	r3, [r7, #20]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	617b      	str	r3, [r7, #20]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	617b      	str	r3, [r7, #20]
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	e00b      	b.n	8003e84 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	613b      	str	r3, [r7, #16]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	613b      	str	r3, [r7, #16]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	613b      	str	r3, [r7, #16]
 8003e80:	693b      	ldr	r3, [r7, #16]
        return;
 8003e82:	e080      	b.n	8003f86 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	f003 0320 	and.w	r3, r3, #32
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d014      	beq.n	8003eb8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e92:	f043 0201 	orr.w	r2, r3, #1
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00c      	beq.n	8003edc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ec6:	f043 0208 	orr.w	r2, r3, #8
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60bb      	str	r3, [r7, #8]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	60bb      	str	r3, [r7, #8]
 8003eda:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d04f      	beq.n	8003f84 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003ef2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d104      	bne.n	8003f10 <HAL_SPI_IRQHandler+0x168>
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d034      	beq.n	8003f7a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0203 	bic.w	r2, r2, #3
 8003f1e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d011      	beq.n	8003f4c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f2c:	4a17      	ldr	r2, [pc, #92]	@ (8003f8c <HAL_SPI_IRQHandler+0x1e4>)
 8003f2e:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7fd fcab 	bl	8001890 <HAL_DMA_Abort_IT>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d005      	beq.n	8003f4c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f44:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d016      	beq.n	8003f82 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f58:	4a0c      	ldr	r2, [pc, #48]	@ (8003f8c <HAL_SPI_IRQHandler+0x1e4>)
 8003f5a:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fd fc95 	bl	8001890 <HAL_DMA_Abort_IT>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00a      	beq.n	8003f82 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f70:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8003f78:	e003      	b.n	8003f82 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f808 	bl	8003f90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003f80:	e000      	b.n	8003f84 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003f82:	bf00      	nop
    return;
 8003f84:	bf00      	nop
  }
}
 8003f86:	3720      	adds	r7, #32
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	08003fa5 	.word	0x08003fa5

08003f90 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f7ff ffe5 	bl	8003f90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003fc6:	bf00      	nop
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	603b      	str	r3, [r7, #0]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003fe0:	f7fd fb00 	bl	80015e4 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe8:	1a9b      	subs	r3, r3, r2
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	4413      	add	r3, r2
 8003fee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ff0:	f7fd faf8 	bl	80015e4 <HAL_GetTick>
 8003ff4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ff6:	4b39      	ldr	r3, [pc, #228]	@ (80040dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	015b      	lsls	r3, r3, #5
 8003ffc:	0d1b      	lsrs	r3, r3, #20
 8003ffe:	69fa      	ldr	r2, [r7, #28]
 8004000:	fb02 f303 	mul.w	r3, r2, r3
 8004004:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004006:	e054      	b.n	80040b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400e:	d050      	beq.n	80040b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004010:	f7fd fae8 	bl	80015e4 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	69fa      	ldr	r2, [r7, #28]
 800401c:	429a      	cmp	r2, r3
 800401e:	d902      	bls.n	8004026 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d13d      	bne.n	80040a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004034:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800403e:	d111      	bne.n	8004064 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004048:	d004      	beq.n	8004054 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004052:	d107      	bne.n	8004064 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004062:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004068:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800406c:	d10f      	bne.n	800408e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800408c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e017      	b.n	80040d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	4013      	ands	r3, r2
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	429a      	cmp	r2, r3
 80040c0:	bf0c      	ite	eq
 80040c2:	2301      	moveq	r3, #1
 80040c4:	2300      	movne	r3, #0
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	461a      	mov	r2, r3
 80040ca:	79fb      	ldrb	r3, [r7, #7]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d19b      	bne.n	8004008 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3720      	adds	r7, #32
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	200000dc 	.word	0x200000dc

080040e0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08a      	sub	sp, #40	@ 0x28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
 80040ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80040ee:	2300      	movs	r3, #0
 80040f0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80040f2:	f7fd fa77 	bl	80015e4 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040fa:	1a9b      	subs	r3, r3, r2
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	4413      	add	r3, r2
 8004100:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004102:	f7fd fa6f 	bl	80015e4 <HAL_GetTick>
 8004106:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	330c      	adds	r3, #12
 800410e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004110:	4b3d      	ldr	r3, [pc, #244]	@ (8004208 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	4613      	mov	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	00da      	lsls	r2, r3, #3
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	0d1b      	lsrs	r3, r3, #20
 8004120:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004122:	fb02 f303 	mul.w	r3, r2, r3
 8004126:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004128:	e060      	b.n	80041ec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004130:	d107      	bne.n	8004142 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d104      	bne.n	8004142 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	b2db      	uxtb	r3, r3
 800413e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004140:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004148:	d050      	beq.n	80041ec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800414a:	f7fd fa4b 	bl	80015e4 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	6a3b      	ldr	r3, [r7, #32]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004156:	429a      	cmp	r2, r3
 8004158:	d902      	bls.n	8004160 <SPI_WaitFifoStateUntilTimeout+0x80>
 800415a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415c:	2b00      	cmp	r3, #0
 800415e:	d13d      	bne.n	80041dc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685a      	ldr	r2, [r3, #4]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800416e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004178:	d111      	bne.n	800419e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004182:	d004      	beq.n	800418e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800418c:	d107      	bne.n	800419e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800419c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041a6:	d10f      	bne.n	80041c8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80041c6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e010      	b.n	80041fe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80041e2:	2300      	movs	r3, #0
 80041e4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	3b01      	subs	r3, #1
 80041ea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	4013      	ands	r3, r2
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d196      	bne.n	800412a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3728      	adds	r7, #40	@ 0x28
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	200000dc 	.word	0x200000dc

0800420c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af02      	add	r7, sp, #8
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004220:	d111      	bne.n	8004246 <SPI_EndRxTransaction+0x3a>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800422a:	d004      	beq.n	8004236 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004234:	d107      	bne.n	8004246 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004244:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2200      	movs	r2, #0
 800424e:	2180      	movs	r1, #128	@ 0x80
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f7ff febd 	bl	8003fd0 <SPI_WaitFlagStateUntilTimeout>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d007      	beq.n	800426c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004260:	f043 0220 	orr.w	r2, r3, #32
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e023      	b.n	80042b4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004274:	d11d      	bne.n	80042b2 <SPI_EndRxTransaction+0xa6>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800427e:	d004      	beq.n	800428a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004288:	d113      	bne.n	80042b2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	2200      	movs	r2, #0
 8004292:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f7ff ff22 	bl	80040e0 <SPI_WaitFifoStateUntilTimeout>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d007      	beq.n	80042b2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042a6:	f043 0220 	orr.w	r2, r3, #32
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e000      	b.n	80042b4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af02      	add	r7, sp, #8
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f7ff ff03 	bl	80040e0 <SPI_WaitFifoStateUntilTimeout>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d007      	beq.n	80042f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042e4:	f043 0220 	orr.w	r2, r3, #32
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e027      	b.n	8004340 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	2200      	movs	r2, #0
 80042f8:	2180      	movs	r1, #128	@ 0x80
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f7ff fe68 	bl	8003fd0 <SPI_WaitFlagStateUntilTimeout>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d007      	beq.n	8004316 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800430a:	f043 0220 	orr.w	r2, r3, #32
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e014      	b.n	8004340 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2200      	movs	r2, #0
 800431e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f7ff fedc 	bl	80040e0 <SPI_WaitFifoStateUntilTimeout>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d007      	beq.n	800433e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004332:	f043 0220 	orr.w	r2, r3, #32
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e000      	b.n	8004340 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e049      	b.n	80043ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d106      	bne.n	8004374 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7fc fe92 	bl	8001098 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2202      	movs	r2, #2
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3304      	adds	r3, #4
 8004384:	4619      	mov	r1, r3
 8004386:	4610      	mov	r0, r2
 8004388:	f000 fdfe 	bl	8004f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b082      	sub	sp, #8
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e049      	b.n	800449c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b00      	cmp	r3, #0
 8004412:	d106      	bne.n	8004422 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f841 	bl	80044a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2202      	movs	r2, #2
 8004426:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	3304      	adds	r3, #4
 8004432:	4619      	mov	r1, r3
 8004434:	4610      	mov	r0, r2
 8004436:	f000 fda7 	bl	8004f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044c2:	2300      	movs	r3, #0
 80044c4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d109      	bne.n	80044e0 <HAL_TIM_PWM_Start_IT+0x28>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	bf14      	ite	ne
 80044d8:	2301      	movne	r3, #1
 80044da:	2300      	moveq	r3, #0
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	e03c      	b.n	800455a <HAL_TIM_PWM_Start_IT+0xa2>
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	d109      	bne.n	80044fa <HAL_TIM_PWM_Start_IT+0x42>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	bf14      	ite	ne
 80044f2:	2301      	movne	r3, #1
 80044f4:	2300      	moveq	r3, #0
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	e02f      	b.n	800455a <HAL_TIM_PWM_Start_IT+0xa2>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b08      	cmp	r3, #8
 80044fe:	d109      	bne.n	8004514 <HAL_TIM_PWM_Start_IT+0x5c>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2b01      	cmp	r3, #1
 800450a:	bf14      	ite	ne
 800450c:	2301      	movne	r3, #1
 800450e:	2300      	moveq	r3, #0
 8004510:	b2db      	uxtb	r3, r3
 8004512:	e022      	b.n	800455a <HAL_TIM_PWM_Start_IT+0xa2>
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	2b0c      	cmp	r3, #12
 8004518:	d109      	bne.n	800452e <HAL_TIM_PWM_Start_IT+0x76>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b01      	cmp	r3, #1
 8004524:	bf14      	ite	ne
 8004526:	2301      	movne	r3, #1
 8004528:	2300      	moveq	r3, #0
 800452a:	b2db      	uxtb	r3, r3
 800452c:	e015      	b.n	800455a <HAL_TIM_PWM_Start_IT+0xa2>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2b10      	cmp	r3, #16
 8004532:	d109      	bne.n	8004548 <HAL_TIM_PWM_Start_IT+0x90>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b01      	cmp	r3, #1
 800453e:	bf14      	ite	ne
 8004540:	2301      	movne	r3, #1
 8004542:	2300      	moveq	r3, #0
 8004544:	b2db      	uxtb	r3, r3
 8004546:	e008      	b.n	800455a <HAL_TIM_PWM_Start_IT+0xa2>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b01      	cmp	r3, #1
 8004552:	bf14      	ite	ne
 8004554:	2301      	movne	r3, #1
 8004556:	2300      	moveq	r3, #0
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e0ec      	b.n	800473c <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d104      	bne.n	8004572 <HAL_TIM_PWM_Start_IT+0xba>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2202      	movs	r2, #2
 800456c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004570:	e023      	b.n	80045ba <HAL_TIM_PWM_Start_IT+0x102>
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b04      	cmp	r3, #4
 8004576:	d104      	bne.n	8004582 <HAL_TIM_PWM_Start_IT+0xca>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004580:	e01b      	b.n	80045ba <HAL_TIM_PWM_Start_IT+0x102>
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b08      	cmp	r3, #8
 8004586:	d104      	bne.n	8004592 <HAL_TIM_PWM_Start_IT+0xda>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004590:	e013      	b.n	80045ba <HAL_TIM_PWM_Start_IT+0x102>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b0c      	cmp	r3, #12
 8004596:	d104      	bne.n	80045a2 <HAL_TIM_PWM_Start_IT+0xea>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045a0:	e00b      	b.n	80045ba <HAL_TIM_PWM_Start_IT+0x102>
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	2b10      	cmp	r3, #16
 80045a6:	d104      	bne.n	80045b2 <HAL_TIM_PWM_Start_IT+0xfa>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2202      	movs	r2, #2
 80045ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045b0:	e003      	b.n	80045ba <HAL_TIM_PWM_Start_IT+0x102>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2202      	movs	r2, #2
 80045b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b0c      	cmp	r3, #12
 80045be:	d841      	bhi.n	8004644 <HAL_TIM_PWM_Start_IT+0x18c>
 80045c0:	a201      	add	r2, pc, #4	@ (adr r2, 80045c8 <HAL_TIM_PWM_Start_IT+0x110>)
 80045c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c6:	bf00      	nop
 80045c8:	080045fd 	.word	0x080045fd
 80045cc:	08004645 	.word	0x08004645
 80045d0:	08004645 	.word	0x08004645
 80045d4:	08004645 	.word	0x08004645
 80045d8:	0800460f 	.word	0x0800460f
 80045dc:	08004645 	.word	0x08004645
 80045e0:	08004645 	.word	0x08004645
 80045e4:	08004645 	.word	0x08004645
 80045e8:	08004621 	.word	0x08004621
 80045ec:	08004645 	.word	0x08004645
 80045f0:	08004645 	.word	0x08004645
 80045f4:	08004645 	.word	0x08004645
 80045f8:	08004633 	.word	0x08004633
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0202 	orr.w	r2, r2, #2
 800460a:	60da      	str	r2, [r3, #12]
      break;
 800460c:	e01d      	b.n	800464a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68da      	ldr	r2, [r3, #12]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f042 0204 	orr.w	r2, r2, #4
 800461c:	60da      	str	r2, [r3, #12]
      break;
 800461e:	e014      	b.n	800464a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68da      	ldr	r2, [r3, #12]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0208 	orr.w	r2, r2, #8
 800462e:	60da      	str	r2, [r3, #12]
      break;
 8004630:	e00b      	b.n	800464a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f042 0210 	orr.w	r2, r2, #16
 8004640:	60da      	str	r2, [r3, #12]
      break;
 8004642:	e002      	b.n	800464a <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	73fb      	strb	r3, [r7, #15]
      break;
 8004648:	bf00      	nop
  }

  if (status == HAL_OK)
 800464a:	7bfb      	ldrb	r3, [r7, #15]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d174      	bne.n	800473a <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2201      	movs	r2, #1
 8004656:	6839      	ldr	r1, [r7, #0]
 8004658:	4618      	mov	r0, r3
 800465a:	f001 f8d3 	bl	8005804 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a38      	ldr	r2, [pc, #224]	@ (8004744 <HAL_TIM_PWM_Start_IT+0x28c>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d018      	beq.n	800469a <HAL_TIM_PWM_Start_IT+0x1e2>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a36      	ldr	r2, [pc, #216]	@ (8004748 <HAL_TIM_PWM_Start_IT+0x290>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d013      	beq.n	800469a <HAL_TIM_PWM_Start_IT+0x1e2>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a35      	ldr	r2, [pc, #212]	@ (800474c <HAL_TIM_PWM_Start_IT+0x294>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d00e      	beq.n	800469a <HAL_TIM_PWM_Start_IT+0x1e2>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a33      	ldr	r2, [pc, #204]	@ (8004750 <HAL_TIM_PWM_Start_IT+0x298>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d009      	beq.n	800469a <HAL_TIM_PWM_Start_IT+0x1e2>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a32      	ldr	r2, [pc, #200]	@ (8004754 <HAL_TIM_PWM_Start_IT+0x29c>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d004      	beq.n	800469a <HAL_TIM_PWM_Start_IT+0x1e2>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a30      	ldr	r2, [pc, #192]	@ (8004758 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d101      	bne.n	800469e <HAL_TIM_PWM_Start_IT+0x1e6>
 800469a:	2301      	movs	r3, #1
 800469c:	e000      	b.n	80046a0 <HAL_TIM_PWM_Start_IT+0x1e8>
 800469e:	2300      	movs	r3, #0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d007      	beq.n	80046b4 <HAL_TIM_PWM_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80046b2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a22      	ldr	r2, [pc, #136]	@ (8004744 <HAL_TIM_PWM_Start_IT+0x28c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d01d      	beq.n	80046fa <HAL_TIM_PWM_Start_IT+0x242>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046c6:	d018      	beq.n	80046fa <HAL_TIM_PWM_Start_IT+0x242>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a23      	ldr	r2, [pc, #140]	@ (800475c <HAL_TIM_PWM_Start_IT+0x2a4>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d013      	beq.n	80046fa <HAL_TIM_PWM_Start_IT+0x242>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a22      	ldr	r2, [pc, #136]	@ (8004760 <HAL_TIM_PWM_Start_IT+0x2a8>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d00e      	beq.n	80046fa <HAL_TIM_PWM_Start_IT+0x242>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a19      	ldr	r2, [pc, #100]	@ (8004748 <HAL_TIM_PWM_Start_IT+0x290>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d009      	beq.n	80046fa <HAL_TIM_PWM_Start_IT+0x242>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a18      	ldr	r2, [pc, #96]	@ (800474c <HAL_TIM_PWM_Start_IT+0x294>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d004      	beq.n	80046fa <HAL_TIM_PWM_Start_IT+0x242>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a18      	ldr	r2, [pc, #96]	@ (8004758 <HAL_TIM_PWM_Start_IT+0x2a0>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d115      	bne.n	8004726 <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689a      	ldr	r2, [r3, #8]
 8004700:	4b18      	ldr	r3, [pc, #96]	@ (8004764 <HAL_TIM_PWM_Start_IT+0x2ac>)
 8004702:	4013      	ands	r3, r2
 8004704:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	2b06      	cmp	r3, #6
 800470a:	d015      	beq.n	8004738 <HAL_TIM_PWM_Start_IT+0x280>
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004712:	d011      	beq.n	8004738 <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0201 	orr.w	r2, r2, #1
 8004722:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004724:	e008      	b.n	8004738 <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f042 0201 	orr.w	r2, r2, #1
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	e000      	b.n	800473a <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004738:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800473a:	7bfb      	ldrb	r3, [r7, #15]
}
 800473c:	4618      	mov	r0, r3
 800473e:	3710      	adds	r7, #16
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	40012c00 	.word	0x40012c00
 8004748:	40013400 	.word	0x40013400
 800474c:	40014000 	.word	0x40014000
 8004750:	40014400 	.word	0x40014400
 8004754:	40014800 	.word	0x40014800
 8004758:	40015000 	.word	0x40015000
 800475c:	40000400 	.word	0x40000400
 8004760:	40000800 	.word	0x40000800
 8004764:	00010007 	.word	0x00010007

08004768 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004772:	2300      	movs	r3, #0
 8004774:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b0c      	cmp	r3, #12
 800477a:	d841      	bhi.n	8004800 <HAL_TIM_PWM_Stop_IT+0x98>
 800477c:	a201      	add	r2, pc, #4	@ (adr r2, 8004784 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800477e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004782:	bf00      	nop
 8004784:	080047b9 	.word	0x080047b9
 8004788:	08004801 	.word	0x08004801
 800478c:	08004801 	.word	0x08004801
 8004790:	08004801 	.word	0x08004801
 8004794:	080047cb 	.word	0x080047cb
 8004798:	08004801 	.word	0x08004801
 800479c:	08004801 	.word	0x08004801
 80047a0:	08004801 	.word	0x08004801
 80047a4:	080047dd 	.word	0x080047dd
 80047a8:	08004801 	.word	0x08004801
 80047ac:	08004801 	.word	0x08004801
 80047b0:	08004801 	.word	0x08004801
 80047b4:	080047ef 	.word	0x080047ef
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68da      	ldr	r2, [r3, #12]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f022 0202 	bic.w	r2, r2, #2
 80047c6:	60da      	str	r2, [r3, #12]
      break;
 80047c8:	e01d      	b.n	8004806 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68da      	ldr	r2, [r3, #12]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 0204 	bic.w	r2, r2, #4
 80047d8:	60da      	str	r2, [r3, #12]
      break;
 80047da:	e014      	b.n	8004806 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68da      	ldr	r2, [r3, #12]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0208 	bic.w	r2, r2, #8
 80047ea:	60da      	str	r2, [r3, #12]
      break;
 80047ec:	e00b      	b.n	8004806 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 0210 	bic.w	r2, r2, #16
 80047fc:	60da      	str	r2, [r3, #12]
      break;
 80047fe:	e002      	b.n	8004806 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	73fb      	strb	r3, [r7, #15]
      break;
 8004804:	bf00      	nop
  }

  if (status == HAL_OK)
 8004806:	7bfb      	ldrb	r3, [r7, #15]
 8004808:	2b00      	cmp	r3, #0
 800480a:	f040 8086 	bne.w	800491a <HAL_TIM_PWM_Stop_IT+0x1b2>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2200      	movs	r2, #0
 8004814:	6839      	ldr	r1, [r7, #0]
 8004816:	4618      	mov	r0, r3
 8004818:	f000 fff4 	bl	8005804 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a40      	ldr	r2, [pc, #256]	@ (8004924 <HAL_TIM_PWM_Stop_IT+0x1bc>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d018      	beq.n	8004858 <HAL_TIM_PWM_Stop_IT+0xf0>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a3f      	ldr	r2, [pc, #252]	@ (8004928 <HAL_TIM_PWM_Stop_IT+0x1c0>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d013      	beq.n	8004858 <HAL_TIM_PWM_Stop_IT+0xf0>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a3d      	ldr	r2, [pc, #244]	@ (800492c <HAL_TIM_PWM_Stop_IT+0x1c4>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d00e      	beq.n	8004858 <HAL_TIM_PWM_Stop_IT+0xf0>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a3c      	ldr	r2, [pc, #240]	@ (8004930 <HAL_TIM_PWM_Stop_IT+0x1c8>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d009      	beq.n	8004858 <HAL_TIM_PWM_Stop_IT+0xf0>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a3a      	ldr	r2, [pc, #232]	@ (8004934 <HAL_TIM_PWM_Stop_IT+0x1cc>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d004      	beq.n	8004858 <HAL_TIM_PWM_Stop_IT+0xf0>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a39      	ldr	r2, [pc, #228]	@ (8004938 <HAL_TIM_PWM_Stop_IT+0x1d0>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d101      	bne.n	800485c <HAL_TIM_PWM_Stop_IT+0xf4>
 8004858:	2301      	movs	r3, #1
 800485a:	e000      	b.n	800485e <HAL_TIM_PWM_Stop_IT+0xf6>
 800485c:	2300      	movs	r3, #0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d017      	beq.n	8004892 <HAL_TIM_PWM_Stop_IT+0x12a>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	6a1a      	ldr	r2, [r3, #32]
 8004868:	f241 1311 	movw	r3, #4369	@ 0x1111
 800486c:	4013      	ands	r3, r2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10f      	bne.n	8004892 <HAL_TIM_PWM_Stop_IT+0x12a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	6a1a      	ldr	r2, [r3, #32]
 8004878:	f240 4344 	movw	r3, #1092	@ 0x444
 800487c:	4013      	ands	r3, r2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d107      	bne.n	8004892 <HAL_TIM_PWM_Stop_IT+0x12a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004890:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	6a1a      	ldr	r2, [r3, #32]
 8004898:	f241 1311 	movw	r3, #4369	@ 0x1111
 800489c:	4013      	ands	r3, r2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10f      	bne.n	80048c2 <HAL_TIM_PWM_Stop_IT+0x15a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	6a1a      	ldr	r2, [r3, #32]
 80048a8:	f240 4344 	movw	r3, #1092	@ 0x444
 80048ac:	4013      	ands	r3, r2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d107      	bne.n	80048c2 <HAL_TIM_PWM_Stop_IT+0x15a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f022 0201 	bic.w	r2, r2, #1
 80048c0:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d104      	bne.n	80048d2 <HAL_TIM_PWM_Stop_IT+0x16a>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048d0:	e023      	b.n	800491a <HAL_TIM_PWM_Stop_IT+0x1b2>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b04      	cmp	r3, #4
 80048d6:	d104      	bne.n	80048e2 <HAL_TIM_PWM_Stop_IT+0x17a>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048e0:	e01b      	b.n	800491a <HAL_TIM_PWM_Stop_IT+0x1b2>
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b08      	cmp	r3, #8
 80048e6:	d104      	bne.n	80048f2 <HAL_TIM_PWM_Stop_IT+0x18a>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048f0:	e013      	b.n	800491a <HAL_TIM_PWM_Stop_IT+0x1b2>
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b0c      	cmp	r3, #12
 80048f6:	d104      	bne.n	8004902 <HAL_TIM_PWM_Stop_IT+0x19a>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004900:	e00b      	b.n	800491a <HAL_TIM_PWM_Stop_IT+0x1b2>
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	2b10      	cmp	r3, #16
 8004906:	d104      	bne.n	8004912 <HAL_TIM_PWM_Stop_IT+0x1aa>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004910:	e003      	b.n	800491a <HAL_TIM_PWM_Stop_IT+0x1b2>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 800491a:	7bfb      	ldrb	r3, [r7, #15]
}
 800491c:	4618      	mov	r0, r3
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	40012c00 	.word	0x40012c00
 8004928:	40013400 	.word	0x40013400
 800492c:	40014000 	.word	0x40014000
 8004930:	40014400 	.word	0x40014400
 8004934:	40014800 	.word	0x40014800
 8004938:	40015000 	.word	0x40015000

0800493c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b02      	cmp	r3, #2
 8004950:	d122      	bne.n	8004998 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	f003 0302 	and.w	r3, r3, #2
 800495c:	2b02      	cmp	r3, #2
 800495e:	d11b      	bne.n	8004998 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f06f 0202 	mvn.w	r2, #2
 8004968:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d003      	beq.n	8004986 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 faed 	bl	8004f5e <HAL_TIM_IC_CaptureCallback>
 8004984:	e005      	b.n	8004992 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 fadf 	bl	8004f4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f7fb fe69 	bl	8000664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	f003 0304 	and.w	r3, r3, #4
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	d122      	bne.n	80049ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	f003 0304 	and.w	r3, r3, #4
 80049b0:	2b04      	cmp	r3, #4
 80049b2:	d11b      	bne.n	80049ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f06f 0204 	mvn.w	r2, #4
 80049bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2202      	movs	r2, #2
 80049c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 fac3 	bl	8004f5e <HAL_TIM_IC_CaptureCallback>
 80049d8:	e005      	b.n	80049e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 fab5 	bl	8004f4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f7fb fe3f 	bl	8000664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	f003 0308 	and.w	r3, r3, #8
 80049f6:	2b08      	cmp	r3, #8
 80049f8:	d122      	bne.n	8004a40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	f003 0308 	and.w	r3, r3, #8
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d11b      	bne.n	8004a40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f06f 0208 	mvn.w	r2, #8
 8004a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2204      	movs	r2, #4
 8004a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	f003 0303 	and.w	r3, r3, #3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 fa99 	bl	8004f5e <HAL_TIM_IC_CaptureCallback>
 8004a2c:	e005      	b.n	8004a3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 fa8b 	bl	8004f4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f7fb fe15 	bl	8000664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	f003 0310 	and.w	r3, r3, #16
 8004a4a:	2b10      	cmp	r3, #16
 8004a4c:	d122      	bne.n	8004a94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	f003 0310 	and.w	r3, r3, #16
 8004a58:	2b10      	cmp	r3, #16
 8004a5a:	d11b      	bne.n	8004a94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f06f 0210 	mvn.w	r2, #16
 8004a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2208      	movs	r2, #8
 8004a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 fa6f 	bl	8004f5e <HAL_TIM_IC_CaptureCallback>
 8004a80:	e005      	b.n	8004a8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 fa61 	bl	8004f4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f7fb fdeb 	bl	8000664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d10e      	bne.n	8004ac0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d107      	bne.n	8004ac0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f06f 0201 	mvn.w	r2, #1
 8004ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fa3b 	bl	8004f36 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aca:	2b80      	cmp	r3, #128	@ 0x80
 8004acc:	d10e      	bne.n	8004aec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ad8:	2b80      	cmp	r3, #128	@ 0x80
 8004ada:	d107      	bne.n	8004aec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 ffce 	bl	8005a88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004af6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004afa:	d10e      	bne.n	8004b1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b06:	2b80      	cmp	r3, #128	@ 0x80
 8004b08:	d107      	bne.n	8004b1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 ffc1 	bl	8005a9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b24:	2b40      	cmp	r3, #64	@ 0x40
 8004b26:	d10e      	bne.n	8004b46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b32:	2b40      	cmp	r3, #64	@ 0x40
 8004b34:	d107      	bne.n	8004b46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 fa16 	bl	8004f72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	f003 0320 	and.w	r3, r3, #32
 8004b50:	2b20      	cmp	r3, #32
 8004b52:	d10e      	bne.n	8004b72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	f003 0320 	and.w	r3, r3, #32
 8004b5e:	2b20      	cmp	r3, #32
 8004b60:	d107      	bne.n	8004b72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f06f 0220 	mvn.w	r2, #32
 8004b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 ff81 	bl	8005a74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b72:	bf00      	nop
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
	...

08004b7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d101      	bne.n	8004b9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b96:	2302      	movs	r3, #2
 8004b98:	e0ff      	b.n	8004d9a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b14      	cmp	r3, #20
 8004ba6:	f200 80f0 	bhi.w	8004d8a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004baa:	a201      	add	r2, pc, #4	@ (adr r2, 8004bb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb0:	08004c05 	.word	0x08004c05
 8004bb4:	08004d8b 	.word	0x08004d8b
 8004bb8:	08004d8b 	.word	0x08004d8b
 8004bbc:	08004d8b 	.word	0x08004d8b
 8004bc0:	08004c45 	.word	0x08004c45
 8004bc4:	08004d8b 	.word	0x08004d8b
 8004bc8:	08004d8b 	.word	0x08004d8b
 8004bcc:	08004d8b 	.word	0x08004d8b
 8004bd0:	08004c87 	.word	0x08004c87
 8004bd4:	08004d8b 	.word	0x08004d8b
 8004bd8:	08004d8b 	.word	0x08004d8b
 8004bdc:	08004d8b 	.word	0x08004d8b
 8004be0:	08004cc7 	.word	0x08004cc7
 8004be4:	08004d8b 	.word	0x08004d8b
 8004be8:	08004d8b 	.word	0x08004d8b
 8004bec:	08004d8b 	.word	0x08004d8b
 8004bf0:	08004d09 	.word	0x08004d09
 8004bf4:	08004d8b 	.word	0x08004d8b
 8004bf8:	08004d8b 	.word	0x08004d8b
 8004bfc:	08004d8b 	.word	0x08004d8b
 8004c00:	08004d49 	.word	0x08004d49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68b9      	ldr	r1, [r7, #8]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 fa5a 	bl	80050c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	699a      	ldr	r2, [r3, #24]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f042 0208 	orr.w	r2, r2, #8
 8004c1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	699a      	ldr	r2, [r3, #24]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0204 	bic.w	r2, r2, #4
 8004c2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6999      	ldr	r1, [r3, #24]
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	691a      	ldr	r2, [r3, #16]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	619a      	str	r2, [r3, #24]
      break;
 8004c42:	e0a5      	b.n	8004d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68b9      	ldr	r1, [r7, #8]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f000 fad4 	bl	80051f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	699a      	ldr	r2, [r3, #24]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	699a      	ldr	r2, [r3, #24]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6999      	ldr	r1, [r3, #24]
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	021a      	lsls	r2, r3, #8
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	430a      	orrs	r2, r1
 8004c82:	619a      	str	r2, [r3, #24]
      break;
 8004c84:	e084      	b.n	8004d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68b9      	ldr	r1, [r7, #8]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f000 fb47 	bl	8005320 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	69da      	ldr	r2, [r3, #28]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f042 0208 	orr.w	r2, r2, #8
 8004ca0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	69da      	ldr	r2, [r3, #28]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0204 	bic.w	r2, r2, #4
 8004cb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	69d9      	ldr	r1, [r3, #28]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	691a      	ldr	r2, [r3, #16]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	61da      	str	r2, [r3, #28]
      break;
 8004cc4:	e064      	b.n	8004d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68b9      	ldr	r1, [r7, #8]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 fbb9 	bl	8005444 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	69da      	ldr	r2, [r3, #28]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ce0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	69da      	ldr	r2, [r3, #28]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69d9      	ldr	r1, [r3, #28]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	021a      	lsls	r2, r3, #8
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	61da      	str	r2, [r3, #28]
      break;
 8004d06:	e043      	b.n	8004d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68b9      	ldr	r1, [r7, #8]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 fc08 	bl	8005524 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0208 	orr.w	r2, r2, #8
 8004d22:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 0204 	bic.w	r2, r2, #4
 8004d32:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	691a      	ldr	r2, [r3, #16]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004d46:	e023      	b.n	8004d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68b9      	ldr	r1, [r7, #8]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 fc52 	bl	80055f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d62:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d72:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	021a      	lsls	r2, r3, #8
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004d88:	e002      	b.n	8004d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d8e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3718      	adds	r7, #24
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop

08004da4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dae:	2300      	movs	r3, #0
 8004db0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d101      	bne.n	8004dc0 <HAL_TIM_ConfigClockSource+0x1c>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	e0b6      	b.n	8004f2e <HAL_TIM_ConfigClockSource+0x18a>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dde:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004de2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004dea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dfc:	d03e      	beq.n	8004e7c <HAL_TIM_ConfigClockSource+0xd8>
 8004dfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e02:	f200 8087 	bhi.w	8004f14 <HAL_TIM_ConfigClockSource+0x170>
 8004e06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e0a:	f000 8086 	beq.w	8004f1a <HAL_TIM_ConfigClockSource+0x176>
 8004e0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e12:	d87f      	bhi.n	8004f14 <HAL_TIM_ConfigClockSource+0x170>
 8004e14:	2b70      	cmp	r3, #112	@ 0x70
 8004e16:	d01a      	beq.n	8004e4e <HAL_TIM_ConfigClockSource+0xaa>
 8004e18:	2b70      	cmp	r3, #112	@ 0x70
 8004e1a:	d87b      	bhi.n	8004f14 <HAL_TIM_ConfigClockSource+0x170>
 8004e1c:	2b60      	cmp	r3, #96	@ 0x60
 8004e1e:	d050      	beq.n	8004ec2 <HAL_TIM_ConfigClockSource+0x11e>
 8004e20:	2b60      	cmp	r3, #96	@ 0x60
 8004e22:	d877      	bhi.n	8004f14 <HAL_TIM_ConfigClockSource+0x170>
 8004e24:	2b50      	cmp	r3, #80	@ 0x50
 8004e26:	d03c      	beq.n	8004ea2 <HAL_TIM_ConfigClockSource+0xfe>
 8004e28:	2b50      	cmp	r3, #80	@ 0x50
 8004e2a:	d873      	bhi.n	8004f14 <HAL_TIM_ConfigClockSource+0x170>
 8004e2c:	2b40      	cmp	r3, #64	@ 0x40
 8004e2e:	d058      	beq.n	8004ee2 <HAL_TIM_ConfigClockSource+0x13e>
 8004e30:	2b40      	cmp	r3, #64	@ 0x40
 8004e32:	d86f      	bhi.n	8004f14 <HAL_TIM_ConfigClockSource+0x170>
 8004e34:	2b30      	cmp	r3, #48	@ 0x30
 8004e36:	d064      	beq.n	8004f02 <HAL_TIM_ConfigClockSource+0x15e>
 8004e38:	2b30      	cmp	r3, #48	@ 0x30
 8004e3a:	d86b      	bhi.n	8004f14 <HAL_TIM_ConfigClockSource+0x170>
 8004e3c:	2b20      	cmp	r3, #32
 8004e3e:	d060      	beq.n	8004f02 <HAL_TIM_ConfigClockSource+0x15e>
 8004e40:	2b20      	cmp	r3, #32
 8004e42:	d867      	bhi.n	8004f14 <HAL_TIM_ConfigClockSource+0x170>
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d05c      	beq.n	8004f02 <HAL_TIM_ConfigClockSource+0x15e>
 8004e48:	2b10      	cmp	r3, #16
 8004e4a:	d05a      	beq.n	8004f02 <HAL_TIM_ConfigClockSource+0x15e>
 8004e4c:	e062      	b.n	8004f14 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e5e:	f000 fcb1 	bl	80057c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	609a      	str	r2, [r3, #8]
      break;
 8004e7a:	e04f      	b.n	8004f1c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e8c:	f000 fc9a 	bl	80057c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689a      	ldr	r2, [r3, #8]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e9e:	609a      	str	r2, [r3, #8]
      break;
 8004ea0:	e03c      	b.n	8004f1c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eae:	461a      	mov	r2, r3
 8004eb0:	f000 fc0e 	bl	80056d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2150      	movs	r1, #80	@ 0x50
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 fc67 	bl	800578e <TIM_ITRx_SetConfig>
      break;
 8004ec0:	e02c      	b.n	8004f1c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ece:	461a      	mov	r2, r3
 8004ed0:	f000 fc2d 	bl	800572e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2160      	movs	r1, #96	@ 0x60
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 fc57 	bl	800578e <TIM_ITRx_SetConfig>
      break;
 8004ee0:	e01c      	b.n	8004f1c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eee:	461a      	mov	r2, r3
 8004ef0:	f000 fbee 	bl	80056d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2140      	movs	r1, #64	@ 0x40
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 fc47 	bl	800578e <TIM_ITRx_SetConfig>
      break;
 8004f00:	e00c      	b.n	8004f1c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	4610      	mov	r0, r2
 8004f0e:	f000 fc3e 	bl	800578e <TIM_ITRx_SetConfig>
      break;
 8004f12:	e003      	b.n	8004f1c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	73fb      	strb	r3, [r7, #15]
      break;
 8004f18:	e000      	b.n	8004f1c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004f1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b083      	sub	sp, #12
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
	...

08004f88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a42      	ldr	r2, [pc, #264]	@ (80050a4 <TIM_Base_SetConfig+0x11c>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d013      	beq.n	8004fc8 <TIM_Base_SetConfig+0x40>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fa6:	d00f      	beq.n	8004fc8 <TIM_Base_SetConfig+0x40>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a3f      	ldr	r2, [pc, #252]	@ (80050a8 <TIM_Base_SetConfig+0x120>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d00b      	beq.n	8004fc8 <TIM_Base_SetConfig+0x40>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a3e      	ldr	r2, [pc, #248]	@ (80050ac <TIM_Base_SetConfig+0x124>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d007      	beq.n	8004fc8 <TIM_Base_SetConfig+0x40>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a3d      	ldr	r2, [pc, #244]	@ (80050b0 <TIM_Base_SetConfig+0x128>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d003      	beq.n	8004fc8 <TIM_Base_SetConfig+0x40>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a3c      	ldr	r2, [pc, #240]	@ (80050b4 <TIM_Base_SetConfig+0x12c>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d108      	bne.n	8004fda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a31      	ldr	r2, [pc, #196]	@ (80050a4 <TIM_Base_SetConfig+0x11c>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d01f      	beq.n	8005022 <TIM_Base_SetConfig+0x9a>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fe8:	d01b      	beq.n	8005022 <TIM_Base_SetConfig+0x9a>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a2e      	ldr	r2, [pc, #184]	@ (80050a8 <TIM_Base_SetConfig+0x120>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d017      	beq.n	8005022 <TIM_Base_SetConfig+0x9a>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a2d      	ldr	r2, [pc, #180]	@ (80050ac <TIM_Base_SetConfig+0x124>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d013      	beq.n	8005022 <TIM_Base_SetConfig+0x9a>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a2c      	ldr	r2, [pc, #176]	@ (80050b0 <TIM_Base_SetConfig+0x128>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d00f      	beq.n	8005022 <TIM_Base_SetConfig+0x9a>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a2c      	ldr	r2, [pc, #176]	@ (80050b8 <TIM_Base_SetConfig+0x130>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d00b      	beq.n	8005022 <TIM_Base_SetConfig+0x9a>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a2b      	ldr	r2, [pc, #172]	@ (80050bc <TIM_Base_SetConfig+0x134>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d007      	beq.n	8005022 <TIM_Base_SetConfig+0x9a>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a2a      	ldr	r2, [pc, #168]	@ (80050c0 <TIM_Base_SetConfig+0x138>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d003      	beq.n	8005022 <TIM_Base_SetConfig+0x9a>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a25      	ldr	r2, [pc, #148]	@ (80050b4 <TIM_Base_SetConfig+0x12c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d108      	bne.n	8005034 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005028:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	4313      	orrs	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	4313      	orrs	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a12      	ldr	r2, [pc, #72]	@ (80050a4 <TIM_Base_SetConfig+0x11c>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d013      	beq.n	8005088 <TIM_Base_SetConfig+0x100>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a13      	ldr	r2, [pc, #76]	@ (80050b0 <TIM_Base_SetConfig+0x128>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d00f      	beq.n	8005088 <TIM_Base_SetConfig+0x100>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a13      	ldr	r2, [pc, #76]	@ (80050b8 <TIM_Base_SetConfig+0x130>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d00b      	beq.n	8005088 <TIM_Base_SetConfig+0x100>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a12      	ldr	r2, [pc, #72]	@ (80050bc <TIM_Base_SetConfig+0x134>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d007      	beq.n	8005088 <TIM_Base_SetConfig+0x100>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a11      	ldr	r2, [pc, #68]	@ (80050c0 <TIM_Base_SetConfig+0x138>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d003      	beq.n	8005088 <TIM_Base_SetConfig+0x100>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a0c      	ldr	r2, [pc, #48]	@ (80050b4 <TIM_Base_SetConfig+0x12c>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d103      	bne.n	8005090 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	691a      	ldr	r2, [r3, #16]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	615a      	str	r2, [r3, #20]
}
 8005096:	bf00      	nop
 8005098:	3714      	adds	r7, #20
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	40012c00 	.word	0x40012c00
 80050a8:	40000400 	.word	0x40000400
 80050ac:	40000800 	.word	0x40000800
 80050b0:	40013400 	.word	0x40013400
 80050b4:	40015000 	.word	0x40015000
 80050b8:	40014000 	.word	0x40014000
 80050bc:	40014400 	.word	0x40014400
 80050c0:	40014800 	.word	0x40014800

080050c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b087      	sub	sp, #28
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	f023 0201 	bic.w	r2, r3, #1
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f023 0303 	bic.w	r3, r3, #3
 80050fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	4313      	orrs	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f023 0302 	bic.w	r3, r3, #2
 8005110:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	4313      	orrs	r3, r2
 800511a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a30      	ldr	r2, [pc, #192]	@ (80051e0 <TIM_OC1_SetConfig+0x11c>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d013      	beq.n	800514c <TIM_OC1_SetConfig+0x88>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a2f      	ldr	r2, [pc, #188]	@ (80051e4 <TIM_OC1_SetConfig+0x120>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d00f      	beq.n	800514c <TIM_OC1_SetConfig+0x88>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a2e      	ldr	r2, [pc, #184]	@ (80051e8 <TIM_OC1_SetConfig+0x124>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d00b      	beq.n	800514c <TIM_OC1_SetConfig+0x88>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a2d      	ldr	r2, [pc, #180]	@ (80051ec <TIM_OC1_SetConfig+0x128>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d007      	beq.n	800514c <TIM_OC1_SetConfig+0x88>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a2c      	ldr	r2, [pc, #176]	@ (80051f0 <TIM_OC1_SetConfig+0x12c>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d003      	beq.n	800514c <TIM_OC1_SetConfig+0x88>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a2b      	ldr	r2, [pc, #172]	@ (80051f4 <TIM_OC1_SetConfig+0x130>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d10c      	bne.n	8005166 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f023 0308 	bic.w	r3, r3, #8
 8005152:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	4313      	orrs	r3, r2
 800515c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	f023 0304 	bic.w	r3, r3, #4
 8005164:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a1d      	ldr	r2, [pc, #116]	@ (80051e0 <TIM_OC1_SetConfig+0x11c>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d013      	beq.n	8005196 <TIM_OC1_SetConfig+0xd2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a1c      	ldr	r2, [pc, #112]	@ (80051e4 <TIM_OC1_SetConfig+0x120>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d00f      	beq.n	8005196 <TIM_OC1_SetConfig+0xd2>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a1b      	ldr	r2, [pc, #108]	@ (80051e8 <TIM_OC1_SetConfig+0x124>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d00b      	beq.n	8005196 <TIM_OC1_SetConfig+0xd2>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a1a      	ldr	r2, [pc, #104]	@ (80051ec <TIM_OC1_SetConfig+0x128>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d007      	beq.n	8005196 <TIM_OC1_SetConfig+0xd2>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a19      	ldr	r2, [pc, #100]	@ (80051f0 <TIM_OC1_SetConfig+0x12c>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d003      	beq.n	8005196 <TIM_OC1_SetConfig+0xd2>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a18      	ldr	r2, [pc, #96]	@ (80051f4 <TIM_OC1_SetConfig+0x130>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d111      	bne.n	80051ba <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800519c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80051a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	621a      	str	r2, [r3, #32]
}
 80051d4:	bf00      	nop
 80051d6:	371c      	adds	r7, #28
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr
 80051e0:	40012c00 	.word	0x40012c00
 80051e4:	40013400 	.word	0x40013400
 80051e8:	40014000 	.word	0x40014000
 80051ec:	40014400 	.word	0x40014400
 80051f0:	40014800 	.word	0x40014800
 80051f4:	40015000 	.word	0x40015000

080051f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b087      	sub	sp, #28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	f023 0210 	bic.w	r2, r3, #16
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005226:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800522a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005232:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	021b      	lsls	r3, r3, #8
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	4313      	orrs	r3, r2
 800523e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f023 0320 	bic.w	r3, r3, #32
 8005246:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	011b      	lsls	r3, r3, #4
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	4313      	orrs	r3, r2
 8005252:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a2c      	ldr	r2, [pc, #176]	@ (8005308 <TIM_OC2_SetConfig+0x110>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d007      	beq.n	800526c <TIM_OC2_SetConfig+0x74>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a2b      	ldr	r2, [pc, #172]	@ (800530c <TIM_OC2_SetConfig+0x114>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d003      	beq.n	800526c <TIM_OC2_SetConfig+0x74>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a2a      	ldr	r2, [pc, #168]	@ (8005310 <TIM_OC2_SetConfig+0x118>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d10d      	bne.n	8005288 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005272:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	011b      	lsls	r3, r3, #4
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	4313      	orrs	r3, r2
 800527e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005286:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a1f      	ldr	r2, [pc, #124]	@ (8005308 <TIM_OC2_SetConfig+0x110>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d013      	beq.n	80052b8 <TIM_OC2_SetConfig+0xc0>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a1e      	ldr	r2, [pc, #120]	@ (800530c <TIM_OC2_SetConfig+0x114>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d00f      	beq.n	80052b8 <TIM_OC2_SetConfig+0xc0>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a1e      	ldr	r2, [pc, #120]	@ (8005314 <TIM_OC2_SetConfig+0x11c>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d00b      	beq.n	80052b8 <TIM_OC2_SetConfig+0xc0>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a1d      	ldr	r2, [pc, #116]	@ (8005318 <TIM_OC2_SetConfig+0x120>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d007      	beq.n	80052b8 <TIM_OC2_SetConfig+0xc0>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a1c      	ldr	r2, [pc, #112]	@ (800531c <TIM_OC2_SetConfig+0x124>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d003      	beq.n	80052b8 <TIM_OC2_SetConfig+0xc0>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a17      	ldr	r2, [pc, #92]	@ (8005310 <TIM_OC2_SetConfig+0x118>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d113      	bne.n	80052e0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052be:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80052c6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	4313      	orrs	r3, r2
 80052de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	621a      	str	r2, [r3, #32]
}
 80052fa:	bf00      	nop
 80052fc:	371c      	adds	r7, #28
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	40012c00 	.word	0x40012c00
 800530c:	40013400 	.word	0x40013400
 8005310:	40015000 	.word	0x40015000
 8005314:	40014000 	.word	0x40014000
 8005318:	40014400 	.word	0x40014400
 800531c:	40014800 	.word	0x40014800

08005320 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800534e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f023 0303 	bic.w	r3, r3, #3
 800535a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	4313      	orrs	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800536c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	021b      	lsls	r3, r3, #8
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	4313      	orrs	r3, r2
 8005378:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a2b      	ldr	r2, [pc, #172]	@ (800542c <TIM_OC3_SetConfig+0x10c>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d007      	beq.n	8005392 <TIM_OC3_SetConfig+0x72>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a2a      	ldr	r2, [pc, #168]	@ (8005430 <TIM_OC3_SetConfig+0x110>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d003      	beq.n	8005392 <TIM_OC3_SetConfig+0x72>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a29      	ldr	r2, [pc, #164]	@ (8005434 <TIM_OC3_SetConfig+0x114>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d10d      	bne.n	80053ae <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005398:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	021b      	lsls	r3, r3, #8
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053ac:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a1e      	ldr	r2, [pc, #120]	@ (800542c <TIM_OC3_SetConfig+0x10c>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d013      	beq.n	80053de <TIM_OC3_SetConfig+0xbe>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005430 <TIM_OC3_SetConfig+0x110>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d00f      	beq.n	80053de <TIM_OC3_SetConfig+0xbe>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a1d      	ldr	r2, [pc, #116]	@ (8005438 <TIM_OC3_SetConfig+0x118>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d00b      	beq.n	80053de <TIM_OC3_SetConfig+0xbe>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a1c      	ldr	r2, [pc, #112]	@ (800543c <TIM_OC3_SetConfig+0x11c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d007      	beq.n	80053de <TIM_OC3_SetConfig+0xbe>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a1b      	ldr	r2, [pc, #108]	@ (8005440 <TIM_OC3_SetConfig+0x120>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d003      	beq.n	80053de <TIM_OC3_SetConfig+0xbe>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a16      	ldr	r2, [pc, #88]	@ (8005434 <TIM_OC3_SetConfig+0x114>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d113      	bne.n	8005406 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80053e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80053ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	011b      	lsls	r3, r3, #4
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	011b      	lsls	r3, r3, #4
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	4313      	orrs	r3, r2
 8005404:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685a      	ldr	r2, [r3, #4]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	621a      	str	r2, [r3, #32]
}
 8005420:	bf00      	nop
 8005422:	371c      	adds	r7, #28
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr
 800542c:	40012c00 	.word	0x40012c00
 8005430:	40013400 	.word	0x40013400
 8005434:	40015000 	.word	0x40015000
 8005438:	40014000 	.word	0x40014000
 800543c:	40014400 	.word	0x40014400
 8005440:	40014800 	.word	0x40014800

08005444 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005444:	b480      	push	{r7}
 8005446:	b087      	sub	sp, #28
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005472:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800547e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	021b      	lsls	r3, r3, #8
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	4313      	orrs	r3, r2
 800548a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005492:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	031b      	lsls	r3, r3, #12
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	4313      	orrs	r3, r2
 800549e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a1a      	ldr	r2, [pc, #104]	@ (800550c <TIM_OC4_SetConfig+0xc8>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d013      	beq.n	80054d0 <TIM_OC4_SetConfig+0x8c>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a19      	ldr	r2, [pc, #100]	@ (8005510 <TIM_OC4_SetConfig+0xcc>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d00f      	beq.n	80054d0 <TIM_OC4_SetConfig+0x8c>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a18      	ldr	r2, [pc, #96]	@ (8005514 <TIM_OC4_SetConfig+0xd0>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d00b      	beq.n	80054d0 <TIM_OC4_SetConfig+0x8c>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a17      	ldr	r2, [pc, #92]	@ (8005518 <TIM_OC4_SetConfig+0xd4>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d007      	beq.n	80054d0 <TIM_OC4_SetConfig+0x8c>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a16      	ldr	r2, [pc, #88]	@ (800551c <TIM_OC4_SetConfig+0xd8>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d003      	beq.n	80054d0 <TIM_OC4_SetConfig+0x8c>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a15      	ldr	r2, [pc, #84]	@ (8005520 <TIM_OC4_SetConfig+0xdc>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d109      	bne.n	80054e4 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	695b      	ldr	r3, [r3, #20]
 80054dc:	019b      	lsls	r3, r3, #6
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	621a      	str	r2, [r3, #32]
}
 80054fe:	bf00      	nop
 8005500:	371c      	adds	r7, #28
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	40012c00 	.word	0x40012c00
 8005510:	40013400 	.word	0x40013400
 8005514:	40014000 	.word	0x40014000
 8005518:	40014400 	.word	0x40014400
 800551c:	40014800 	.word	0x40014800
 8005520:	40015000 	.word	0x40015000

08005524 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005524:	b480      	push	{r7}
 8005526:	b087      	sub	sp, #28
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800554a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005556:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	4313      	orrs	r3, r2
 8005560:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005568:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	041b      	lsls	r3, r3, #16
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	4313      	orrs	r3, r2
 8005574:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a19      	ldr	r2, [pc, #100]	@ (80055e0 <TIM_OC5_SetConfig+0xbc>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d013      	beq.n	80055a6 <TIM_OC5_SetConfig+0x82>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a18      	ldr	r2, [pc, #96]	@ (80055e4 <TIM_OC5_SetConfig+0xc0>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d00f      	beq.n	80055a6 <TIM_OC5_SetConfig+0x82>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a17      	ldr	r2, [pc, #92]	@ (80055e8 <TIM_OC5_SetConfig+0xc4>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d00b      	beq.n	80055a6 <TIM_OC5_SetConfig+0x82>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a16      	ldr	r2, [pc, #88]	@ (80055ec <TIM_OC5_SetConfig+0xc8>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d007      	beq.n	80055a6 <TIM_OC5_SetConfig+0x82>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a15      	ldr	r2, [pc, #84]	@ (80055f0 <TIM_OC5_SetConfig+0xcc>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d003      	beq.n	80055a6 <TIM_OC5_SetConfig+0x82>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a14      	ldr	r2, [pc, #80]	@ (80055f4 <TIM_OC5_SetConfig+0xd0>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d109      	bne.n	80055ba <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	021b      	lsls	r3, r3, #8
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685a      	ldr	r2, [r3, #4]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	621a      	str	r2, [r3, #32]
}
 80055d4:	bf00      	nop
 80055d6:	371c      	adds	r7, #28
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	40012c00 	.word	0x40012c00
 80055e4:	40013400 	.word	0x40013400
 80055e8:	40014000 	.word	0x40014000
 80055ec:	40014400 	.word	0x40014400
 80055f0:	40014800 	.word	0x40014800
 80055f4:	40015000 	.word	0x40015000

080055f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b087      	sub	sp, #28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800561e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005626:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800562a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	021b      	lsls	r3, r3, #8
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	4313      	orrs	r3, r2
 8005636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800563e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	051b      	lsls	r3, r3, #20
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	4313      	orrs	r3, r2
 800564a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a1a      	ldr	r2, [pc, #104]	@ (80056b8 <TIM_OC6_SetConfig+0xc0>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d013      	beq.n	800567c <TIM_OC6_SetConfig+0x84>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a19      	ldr	r2, [pc, #100]	@ (80056bc <TIM_OC6_SetConfig+0xc4>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d00f      	beq.n	800567c <TIM_OC6_SetConfig+0x84>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a18      	ldr	r2, [pc, #96]	@ (80056c0 <TIM_OC6_SetConfig+0xc8>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d00b      	beq.n	800567c <TIM_OC6_SetConfig+0x84>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a17      	ldr	r2, [pc, #92]	@ (80056c4 <TIM_OC6_SetConfig+0xcc>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d007      	beq.n	800567c <TIM_OC6_SetConfig+0x84>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a16      	ldr	r2, [pc, #88]	@ (80056c8 <TIM_OC6_SetConfig+0xd0>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d003      	beq.n	800567c <TIM_OC6_SetConfig+0x84>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a15      	ldr	r2, [pc, #84]	@ (80056cc <TIM_OC6_SetConfig+0xd4>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d109      	bne.n	8005690 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005682:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	029b      	lsls	r3, r3, #10
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	4313      	orrs	r3, r2
 800568e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	621a      	str	r2, [r3, #32]
}
 80056aa:	bf00      	nop
 80056ac:	371c      	adds	r7, #28
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	40012c00 	.word	0x40012c00
 80056bc:	40013400 	.word	0x40013400
 80056c0:	40014000 	.word	0x40014000
 80056c4:	40014400 	.word	0x40014400
 80056c8:	40014800 	.word	0x40014800
 80056cc:	40015000 	.word	0x40015000

080056d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b087      	sub	sp, #28
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6a1b      	ldr	r3, [r3, #32]
 80056e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	f023 0201 	bic.w	r2, r3, #1
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	011b      	lsls	r3, r3, #4
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	4313      	orrs	r3, r2
 8005704:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f023 030a 	bic.w	r3, r3, #10
 800570c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	4313      	orrs	r3, r2
 8005714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	621a      	str	r2, [r3, #32]
}
 8005722:	bf00      	nop
 8005724:	371c      	adds	r7, #28
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800572e:	b480      	push	{r7}
 8005730:	b087      	sub	sp, #28
 8005732:	af00      	add	r7, sp, #0
 8005734:	60f8      	str	r0, [r7, #12]
 8005736:	60b9      	str	r1, [r7, #8]
 8005738:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	f023 0210 	bic.w	r2, r3, #16
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6a1b      	ldr	r3, [r3, #32]
 8005750:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005758:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	031b      	lsls	r3, r3, #12
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	4313      	orrs	r3, r2
 8005762:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800576a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	011b      	lsls	r3, r3, #4
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	4313      	orrs	r3, r2
 8005774:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	621a      	str	r2, [r3, #32]
}
 8005782:	bf00      	nop
 8005784:	371c      	adds	r7, #28
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800578e:	b480      	push	{r7}
 8005790:	b085      	sub	sp, #20
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
 8005796:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	f043 0307 	orr.w	r3, r3, #7
 80057b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	609a      	str	r2, [r3, #8]
}
 80057b8:	bf00      	nop
 80057ba:	3714      	adds	r7, #20
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b087      	sub	sp, #28
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
 80057d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80057de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	021a      	lsls	r2, r3, #8
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	431a      	orrs	r2, r3
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	697a      	ldr	r2, [r7, #20]
 80057f6:	609a      	str	r2, [r3, #8]
}
 80057f8:	bf00      	nop
 80057fa:	371c      	adds	r7, #28
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005804:	b480      	push	{r7}
 8005806:	b087      	sub	sp, #28
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	f003 031f 	and.w	r3, r3, #31
 8005816:	2201      	movs	r2, #1
 8005818:	fa02 f303 	lsl.w	r3, r2, r3
 800581c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6a1a      	ldr	r2, [r3, #32]
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	43db      	mvns	r3, r3
 8005826:	401a      	ands	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6a1a      	ldr	r2, [r3, #32]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	f003 031f 	and.w	r3, r3, #31
 8005836:	6879      	ldr	r1, [r7, #4]
 8005838:	fa01 f303 	lsl.w	r3, r1, r3
 800583c:	431a      	orrs	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	621a      	str	r2, [r3, #32]
}
 8005842:	bf00      	nop
 8005844:	371c      	adds	r7, #28
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
	...

08005850 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005860:	2b01      	cmp	r3, #1
 8005862:	d101      	bne.n	8005868 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005864:	2302      	movs	r3, #2
 8005866:	e06d      	b.n	8005944 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2202      	movs	r2, #2
 8005874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a30      	ldr	r2, [pc, #192]	@ (8005950 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d009      	beq.n	80058a6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a2f      	ldr	r2, [pc, #188]	@ (8005954 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d004      	beq.n	80058a6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a2d      	ldr	r2, [pc, #180]	@ (8005958 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d108      	bne.n	80058b8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80058ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a1e      	ldr	r2, [pc, #120]	@ (8005950 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d01d      	beq.n	8005918 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058e4:	d018      	beq.n	8005918 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a1c      	ldr	r2, [pc, #112]	@ (800595c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d013      	beq.n	8005918 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a1a      	ldr	r2, [pc, #104]	@ (8005960 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d00e      	beq.n	8005918 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a15      	ldr	r2, [pc, #84]	@ (8005954 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d009      	beq.n	8005918 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a16      	ldr	r2, [pc, #88]	@ (8005964 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d004      	beq.n	8005918 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a11      	ldr	r2, [pc, #68]	@ (8005958 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d10c      	bne.n	8005932 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800591e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	4313      	orrs	r3, r2
 8005928:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	40012c00 	.word	0x40012c00
 8005954:	40013400 	.word	0x40013400
 8005958:	40015000 	.word	0x40015000
 800595c:	40000400 	.word	0x40000400
 8005960:	40000800 	.word	0x40000800
 8005964:	40014000 	.word	0x40014000

08005968 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005972:	2300      	movs	r3, #0
 8005974:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800597c:	2b01      	cmp	r3, #1
 800597e:	d101      	bne.n	8005984 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005980:	2302      	movs	r3, #2
 8005982:	e06a      	b.n	8005a5a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	4313      	orrs	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	4313      	orrs	r3, r2
 80059de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ea:	4313      	orrs	r3, r2
 80059ec:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	041b      	lsls	r3, r3, #16
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a19      	ldr	r2, [pc, #100]	@ (8005a68 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d009      	beq.n	8005a1c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a17      	ldr	r2, [pc, #92]	@ (8005a6c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d004      	beq.n	8005a1c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a16      	ldr	r2, [pc, #88]	@ (8005a70 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d115      	bne.n	8005a48 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a26:	051b      	lsls	r3, r3, #20
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	69db      	ldr	r3, [r3, #28]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3714      	adds	r7, #20
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop
 8005a68:	40012c00 	.word	0x40012c00
 8005a6c:	40013400 	.word	0x40013400
 8005a70:	40015000 	.word	0x40015000

08005a74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a7c:	bf00      	nop
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e040      	b.n	8005b44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d106      	bne.n	8005ad8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f7fb fc6e 	bl	80013b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2224      	movs	r2, #36	@ 0x24
 8005adc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f022 0201 	bic.w	r2, r2, #1
 8005aec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fc00 	bl	80062f4 <UART_SetConfig>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d101      	bne.n	8005afe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e022      	b.n	8005b44 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d002      	beq.n	8005b0c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 fdc8 	bl	800669c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689a      	ldr	r2, [r3, #8]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f042 0201 	orr.w	r2, r2, #1
 8005b3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 fe4f 	bl	80067e0 <UART_CheckIdleState>
 8005b42:	4603      	mov	r3, r0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b08a      	sub	sp, #40	@ 0x28
 8005b50:	af02      	add	r7, sp, #8
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	603b      	str	r3, [r7, #0]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b60:	2b20      	cmp	r3, #32
 8005b62:	d177      	bne.n	8005c54 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d002      	beq.n	8005b70 <HAL_UART_Transmit+0x24>
 8005b6a:	88fb      	ldrh	r3, [r7, #6]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e070      	b.n	8005c56 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2221      	movs	r2, #33	@ 0x21
 8005b80:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b82:	f7fb fd2f 	bl	80015e4 <HAL_GetTick>
 8005b86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	88fa      	ldrh	r2, [r7, #6]
 8005b8c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	88fa      	ldrh	r2, [r7, #6]
 8005b94:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ba0:	d108      	bne.n	8005bb4 <HAL_UART_Transmit+0x68>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d104      	bne.n	8005bb4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005baa:	2300      	movs	r3, #0
 8005bac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	61bb      	str	r3, [r7, #24]
 8005bb2:	e003      	b.n	8005bbc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005bbc:	e02f      	b.n	8005c1e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	9300      	str	r3, [sp, #0]
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	2180      	movs	r1, #128	@ 0x80
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f000 feb1 	bl	8006930 <UART_WaitOnFlagUntilTimeout>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d004      	beq.n	8005bde <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e03b      	b.n	8005c56 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10b      	bne.n	8005bfc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	881a      	ldrh	r2, [r3, #0]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bf0:	b292      	uxth	r2, r2
 8005bf2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	3302      	adds	r3, #2
 8005bf8:	61bb      	str	r3, [r7, #24]
 8005bfa:	e007      	b.n	8005c0c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	781a      	ldrb	r2, [r3, #0]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	3b01      	subs	r3, #1
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1c9      	bne.n	8005bbe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	9300      	str	r3, [sp, #0]
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	2200      	movs	r2, #0
 8005c32:	2140      	movs	r1, #64	@ 0x40
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f000 fe7b 	bl	8006930 <UART_WaitOnFlagUntilTimeout>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d004      	beq.n	8005c4a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2220      	movs	r2, #32
 8005c44:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e005      	b.n	8005c56 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005c50:	2300      	movs	r3, #0
 8005c52:	e000      	b.n	8005c56 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005c54:	2302      	movs	r3, #2
  }
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3720      	adds	r7, #32
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b08a      	sub	sp, #40	@ 0x28
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	60f8      	str	r0, [r7, #12]
 8005c66:	60b9      	str	r1, [r7, #8]
 8005c68:	4613      	mov	r3, r2
 8005c6a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c72:	2b20      	cmp	r3, #32
 8005c74:	d132      	bne.n	8005cdc <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d002      	beq.n	8005c82 <HAL_UART_Receive_IT+0x24>
 8005c7c:	88fb      	ldrh	r3, [r7, #6]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d101      	bne.n	8005c86 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e02b      	b.n	8005cde <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d018      	beq.n	8005ccc <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	e853 3f00 	ldrex	r3, [r3]
 8005ca6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005cae:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb8:	623b      	str	r3, [r7, #32]
 8005cba:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cbc:	69f9      	ldr	r1, [r7, #28]
 8005cbe:	6a3a      	ldr	r2, [r7, #32]
 8005cc0:	e841 2300 	strex	r3, r2, [r1]
 8005cc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1e6      	bne.n	8005c9a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005ccc:	88fb      	ldrh	r3, [r7, #6]
 8005cce:	461a      	mov	r2, r3
 8005cd0:	68b9      	ldr	r1, [r7, #8]
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f000 fe94 	bl	8006a00 <UART_Start_Receive_IT>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	e000      	b.n	8005cde <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005cdc:	2302      	movs	r3, #2
  }
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3728      	adds	r7, #40	@ 0x28
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
	...

08005ce8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b0ba      	sub	sp, #232	@ 0xe8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	69db      	ldr	r3, [r3, #28]
 8005cf6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005d12:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005d16:	4013      	ands	r3, r2
 8005d18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005d1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d115      	bne.n	8005d50 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d28:	f003 0320 	and.w	r3, r3, #32
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00f      	beq.n	8005d50 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d34:	f003 0320 	and.w	r3, r3, #32
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d009      	beq.n	8005d50 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 82ab 	beq.w	800629c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	4798      	blx	r3
      }
      return;
 8005d4e:	e2a5      	b.n	800629c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005d50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f000 8117 	beq.w	8005f88 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005d5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d106      	bne.n	8005d74 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005d66:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005d6a:	4b85      	ldr	r3, [pc, #532]	@ (8005f80 <HAL_UART_IRQHandler+0x298>)
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f000 810a 	beq.w	8005f88 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d011      	beq.n	8005da4 <HAL_UART_IRQHandler+0xbc>
 8005d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00b      	beq.n	8005da4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2201      	movs	r2, #1
 8005d92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d9a:	f043 0201 	orr.w	r2, r3, #1
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005da8:	f003 0302 	and.w	r3, r3, #2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d011      	beq.n	8005dd4 <HAL_UART_IRQHandler+0xec>
 8005db0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005db4:	f003 0301 	and.w	r3, r3, #1
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00b      	beq.n	8005dd4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2202      	movs	r2, #2
 8005dc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dca:	f043 0204 	orr.w	r2, r3, #4
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dd8:	f003 0304 	and.w	r3, r3, #4
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d011      	beq.n	8005e04 <HAL_UART_IRQHandler+0x11c>
 8005de0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00b      	beq.n	8005e04 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2204      	movs	r2, #4
 8005df2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dfa:	f043 0202 	orr.w	r2, r3, #2
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e08:	f003 0308 	and.w	r3, r3, #8
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d017      	beq.n	8005e40 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e14:	f003 0320 	and.w	r3, r3, #32
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d105      	bne.n	8005e28 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005e1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e20:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00b      	beq.n	8005e40 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2208      	movs	r2, #8
 8005e2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e36:	f043 0208 	orr.w	r2, r3, #8
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d012      	beq.n	8005e72 <HAL_UART_IRQHandler+0x18a>
 8005e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e50:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00c      	beq.n	8005e72 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005e60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e68:	f043 0220 	orr.w	r2, r3, #32
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 8211 	beq.w	80062a0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e82:	f003 0320 	and.w	r3, r3, #32
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00d      	beq.n	8005ea6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e8e:	f003 0320 	and.w	r3, r3, #32
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d007      	beq.n	8005ea6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d003      	beq.n	8005ea6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005eac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eba:	2b40      	cmp	r3, #64	@ 0x40
 8005ebc:	d005      	beq.n	8005eca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005ebe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ec2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d04f      	beq.n	8005f6a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 fe5e 	bl	8006b8c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eda:	2b40      	cmp	r3, #64	@ 0x40
 8005edc:	d141      	bne.n	8005f62 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	3308      	adds	r3, #8
 8005ee4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005eec:	e853 3f00 	ldrex	r3, [r3]
 8005ef0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005ef4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ef8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005efc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	3308      	adds	r3, #8
 8005f06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005f0a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005f0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005f16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005f1a:	e841 2300 	strex	r3, r2, [r1]
 8005f1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005f22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1d9      	bne.n	8005ede <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d013      	beq.n	8005f5a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f36:	4a13      	ldr	r2, [pc, #76]	@ (8005f84 <HAL_UART_IRQHandler+0x29c>)
 8005f38:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7fb fca6 	bl	8001890 <HAL_DMA_Abort_IT>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d017      	beq.n	8005f7a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005f54:	4610      	mov	r0, r2
 8005f56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f58:	e00f      	b.n	8005f7a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f9b4 	bl	80062c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f60:	e00b      	b.n	8005f7a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 f9b0 	bl	80062c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f68:	e007      	b.n	8005f7a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f9ac 	bl	80062c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005f78:	e192      	b.n	80062a0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f7a:	bf00      	nop
    return;
 8005f7c:	e190      	b.n	80062a0 <HAL_UART_IRQHandler+0x5b8>
 8005f7e:	bf00      	nop
 8005f80:	04000120 	.word	0x04000120
 8005f84:	08006c55 	.word	0x08006c55

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	f040 814b 	bne.w	8006228 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f96:	f003 0310 	and.w	r3, r3, #16
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	f000 8144 	beq.w	8006228 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fa4:	f003 0310 	and.w	r3, r3, #16
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f000 813d 	beq.w	8006228 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2210      	movs	r2, #16
 8005fb4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc0:	2b40      	cmp	r3, #64	@ 0x40
 8005fc2:	f040 80b5 	bne.w	8006130 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005fd2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	f000 8164 	beq.w	80062a4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005fe2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	f080 815c 	bcs.w	80062a4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005ff2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	2b20      	cmp	r3, #32
 8005ffe:	f000 8086 	beq.w	800610e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800600e:	e853 3f00 	ldrex	r3, [r3]
 8006012:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006016:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800601a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800601e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	461a      	mov	r2, r3
 8006028:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800602c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006030:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006034:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006038:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800603c:	e841 2300 	strex	r3, r2, [r1]
 8006040:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006044:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1da      	bne.n	8006002 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	3308      	adds	r3, #8
 8006052:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006054:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006056:	e853 3f00 	ldrex	r3, [r3]
 800605a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800605c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800605e:	f023 0301 	bic.w	r3, r3, #1
 8006062:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	3308      	adds	r3, #8
 800606c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006070:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006074:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006076:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006078:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800607c:	e841 2300 	strex	r3, r2, [r1]
 8006080:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006082:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1e1      	bne.n	800604c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	3308      	adds	r3, #8
 800608e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006090:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006092:	e853 3f00 	ldrex	r3, [r3]
 8006096:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006098:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800609a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800609e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	3308      	adds	r3, #8
 80060a8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80060ac:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80060ae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80060b2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80060b4:	e841 2300 	strex	r3, r2, [r1]
 80060b8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80060ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1e3      	bne.n	8006088 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2220      	movs	r2, #32
 80060c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060d6:	e853 3f00 	ldrex	r3, [r3]
 80060da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80060dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060de:	f023 0310 	bic.w	r3, r3, #16
 80060e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	461a      	mov	r2, r3
 80060ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80060f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80060f2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80060f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80060f8:	e841 2300 	strex	r3, r2, [r1]
 80060fc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80060fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006100:	2b00      	cmp	r3, #0
 8006102:	d1e4      	bne.n	80060ce <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006108:	4618      	mov	r0, r3
 800610a:	f7fb fb88 	bl	800181e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2202      	movs	r2, #2
 8006112:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006120:	b29b      	uxth	r3, r3
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	b29b      	uxth	r3, r3
 8006126:	4619      	mov	r1, r3
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 f8d7 	bl	80062dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800612e:	e0b9      	b.n	80062a4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800613c:	b29b      	uxth	r3, r3
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800614a:	b29b      	uxth	r3, r3
 800614c:	2b00      	cmp	r3, #0
 800614e:	f000 80ab 	beq.w	80062a8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8006152:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006156:	2b00      	cmp	r3, #0
 8006158:	f000 80a6 	beq.w	80062a8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006164:	e853 3f00 	ldrex	r3, [r3]
 8006168:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800616a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800616c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006170:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	461a      	mov	r2, r3
 800617a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800617e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006180:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006182:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006184:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006186:	e841 2300 	strex	r3, r2, [r1]
 800618a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800618c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1e4      	bne.n	800615c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	3308      	adds	r3, #8
 8006198:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619c:	e853 3f00 	ldrex	r3, [r3]
 80061a0:	623b      	str	r3, [r7, #32]
   return(result);
 80061a2:	6a3b      	ldr	r3, [r7, #32]
 80061a4:	f023 0301 	bic.w	r3, r3, #1
 80061a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	3308      	adds	r3, #8
 80061b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80061b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80061b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061be:	e841 2300 	strex	r3, r2, [r1]
 80061c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80061c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1e3      	bne.n	8006192 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2220      	movs	r2, #32
 80061ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	e853 3f00 	ldrex	r3, [r3]
 80061ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f023 0310 	bic.w	r3, r3, #16
 80061f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	461a      	mov	r2, r3
 80061fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006200:	61fb      	str	r3, [r7, #28]
 8006202:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006204:	69b9      	ldr	r1, [r7, #24]
 8006206:	69fa      	ldr	r2, [r7, #28]
 8006208:	e841 2300 	strex	r3, r2, [r1]
 800620c:	617b      	str	r3, [r7, #20]
   return(result);
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d1e4      	bne.n	80061de <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2202      	movs	r2, #2
 8006218:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800621a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800621e:	4619      	mov	r1, r3
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f85b 	bl	80062dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006226:	e03f      	b.n	80062a8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800622c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00e      	beq.n	8006252 <HAL_UART_IRQHandler+0x56a>
 8006234:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006238:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d008      	beq.n	8006252 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006248:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 feea 	bl	8007024 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006250:	e02d      	b.n	80062ae <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00e      	beq.n	800627c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800625e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006266:	2b00      	cmp	r3, #0
 8006268:	d008      	beq.n	800627c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800626e:	2b00      	cmp	r3, #0
 8006270:	d01c      	beq.n	80062ac <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	4798      	blx	r3
    }
    return;
 800627a:	e017      	b.n	80062ac <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800627c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006284:	2b00      	cmp	r3, #0
 8006286:	d012      	beq.n	80062ae <HAL_UART_IRQHandler+0x5c6>
 8006288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800628c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00c      	beq.n	80062ae <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 fcf3 	bl	8006c80 <UART_EndTransmit_IT>
    return;
 800629a:	e008      	b.n	80062ae <HAL_UART_IRQHandler+0x5c6>
      return;
 800629c:	bf00      	nop
 800629e:	e006      	b.n	80062ae <HAL_UART_IRQHandler+0x5c6>
    return;
 80062a0:	bf00      	nop
 80062a2:	e004      	b.n	80062ae <HAL_UART_IRQHandler+0x5c6>
      return;
 80062a4:	bf00      	nop
 80062a6:	e002      	b.n	80062ae <HAL_UART_IRQHandler+0x5c6>
      return;
 80062a8:	bf00      	nop
 80062aa:	e000      	b.n	80062ae <HAL_UART_IRQHandler+0x5c6>
    return;
 80062ac:	bf00      	nop
  }

}
 80062ae:	37e8      	adds	r7, #232	@ 0xe8
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	460b      	mov	r3, r1
 80062e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b088      	sub	sp, #32
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062fc:	2300      	movs	r3, #0
 80062fe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	689a      	ldr	r2, [r3, #8]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	431a      	orrs	r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	431a      	orrs	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	69db      	ldr	r3, [r3, #28]
 8006314:	4313      	orrs	r3, r2
 8006316:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	4b92      	ldr	r3, [pc, #584]	@ (8006568 <UART_SetConfig+0x274>)
 8006320:	4013      	ands	r3, r2
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	6812      	ldr	r2, [r2, #0]
 8006326:	6979      	ldr	r1, [r7, #20]
 8006328:	430b      	orrs	r3, r1
 800632a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	68da      	ldr	r2, [r3, #12]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	430a      	orrs	r2, r1
 8006340:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a1b      	ldr	r3, [r3, #32]
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	4313      	orrs	r3, r2
 8006350:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	697a      	ldr	r2, [r7, #20]
 8006362:	430a      	orrs	r2, r1
 8006364:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a80      	ldr	r2, [pc, #512]	@ (800656c <UART_SetConfig+0x278>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d120      	bne.n	80063b2 <UART_SetConfig+0xbe>
 8006370:	4b7f      	ldr	r3, [pc, #508]	@ (8006570 <UART_SetConfig+0x27c>)
 8006372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006374:	f003 0303 	and.w	r3, r3, #3
 8006378:	2b03      	cmp	r3, #3
 800637a:	d817      	bhi.n	80063ac <UART_SetConfig+0xb8>
 800637c:	a201      	add	r2, pc, #4	@ (adr r2, 8006384 <UART_SetConfig+0x90>)
 800637e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006382:	bf00      	nop
 8006384:	08006395 	.word	0x08006395
 8006388:	080063a1 	.word	0x080063a1
 800638c:	080063a7 	.word	0x080063a7
 8006390:	0800639b 	.word	0x0800639b
 8006394:	2301      	movs	r3, #1
 8006396:	77fb      	strb	r3, [r7, #31]
 8006398:	e0b5      	b.n	8006506 <UART_SetConfig+0x212>
 800639a:	2302      	movs	r3, #2
 800639c:	77fb      	strb	r3, [r7, #31]
 800639e:	e0b2      	b.n	8006506 <UART_SetConfig+0x212>
 80063a0:	2304      	movs	r3, #4
 80063a2:	77fb      	strb	r3, [r7, #31]
 80063a4:	e0af      	b.n	8006506 <UART_SetConfig+0x212>
 80063a6:	2308      	movs	r3, #8
 80063a8:	77fb      	strb	r3, [r7, #31]
 80063aa:	e0ac      	b.n	8006506 <UART_SetConfig+0x212>
 80063ac:	2310      	movs	r3, #16
 80063ae:	77fb      	strb	r3, [r7, #31]
 80063b0:	e0a9      	b.n	8006506 <UART_SetConfig+0x212>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a6f      	ldr	r2, [pc, #444]	@ (8006574 <UART_SetConfig+0x280>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d124      	bne.n	8006406 <UART_SetConfig+0x112>
 80063bc:	4b6c      	ldr	r3, [pc, #432]	@ (8006570 <UART_SetConfig+0x27c>)
 80063be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80063c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80063c8:	d011      	beq.n	80063ee <UART_SetConfig+0xfa>
 80063ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80063ce:	d817      	bhi.n	8006400 <UART_SetConfig+0x10c>
 80063d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063d4:	d011      	beq.n	80063fa <UART_SetConfig+0x106>
 80063d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063da:	d811      	bhi.n	8006400 <UART_SetConfig+0x10c>
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d003      	beq.n	80063e8 <UART_SetConfig+0xf4>
 80063e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063e4:	d006      	beq.n	80063f4 <UART_SetConfig+0x100>
 80063e6:	e00b      	b.n	8006400 <UART_SetConfig+0x10c>
 80063e8:	2300      	movs	r3, #0
 80063ea:	77fb      	strb	r3, [r7, #31]
 80063ec:	e08b      	b.n	8006506 <UART_SetConfig+0x212>
 80063ee:	2302      	movs	r3, #2
 80063f0:	77fb      	strb	r3, [r7, #31]
 80063f2:	e088      	b.n	8006506 <UART_SetConfig+0x212>
 80063f4:	2304      	movs	r3, #4
 80063f6:	77fb      	strb	r3, [r7, #31]
 80063f8:	e085      	b.n	8006506 <UART_SetConfig+0x212>
 80063fa:	2308      	movs	r3, #8
 80063fc:	77fb      	strb	r3, [r7, #31]
 80063fe:	e082      	b.n	8006506 <UART_SetConfig+0x212>
 8006400:	2310      	movs	r3, #16
 8006402:	77fb      	strb	r3, [r7, #31]
 8006404:	e07f      	b.n	8006506 <UART_SetConfig+0x212>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a5b      	ldr	r2, [pc, #364]	@ (8006578 <UART_SetConfig+0x284>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d124      	bne.n	800645a <UART_SetConfig+0x166>
 8006410:	4b57      	ldr	r3, [pc, #348]	@ (8006570 <UART_SetConfig+0x27c>)
 8006412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006414:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006418:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800641c:	d011      	beq.n	8006442 <UART_SetConfig+0x14e>
 800641e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006422:	d817      	bhi.n	8006454 <UART_SetConfig+0x160>
 8006424:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006428:	d011      	beq.n	800644e <UART_SetConfig+0x15a>
 800642a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800642e:	d811      	bhi.n	8006454 <UART_SetConfig+0x160>
 8006430:	2b00      	cmp	r3, #0
 8006432:	d003      	beq.n	800643c <UART_SetConfig+0x148>
 8006434:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006438:	d006      	beq.n	8006448 <UART_SetConfig+0x154>
 800643a:	e00b      	b.n	8006454 <UART_SetConfig+0x160>
 800643c:	2300      	movs	r3, #0
 800643e:	77fb      	strb	r3, [r7, #31]
 8006440:	e061      	b.n	8006506 <UART_SetConfig+0x212>
 8006442:	2302      	movs	r3, #2
 8006444:	77fb      	strb	r3, [r7, #31]
 8006446:	e05e      	b.n	8006506 <UART_SetConfig+0x212>
 8006448:	2304      	movs	r3, #4
 800644a:	77fb      	strb	r3, [r7, #31]
 800644c:	e05b      	b.n	8006506 <UART_SetConfig+0x212>
 800644e:	2308      	movs	r3, #8
 8006450:	77fb      	strb	r3, [r7, #31]
 8006452:	e058      	b.n	8006506 <UART_SetConfig+0x212>
 8006454:	2310      	movs	r3, #16
 8006456:	77fb      	strb	r3, [r7, #31]
 8006458:	e055      	b.n	8006506 <UART_SetConfig+0x212>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a47      	ldr	r2, [pc, #284]	@ (800657c <UART_SetConfig+0x288>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d124      	bne.n	80064ae <UART_SetConfig+0x1ba>
 8006464:	4b42      	ldr	r3, [pc, #264]	@ (8006570 <UART_SetConfig+0x27c>)
 8006466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006468:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800646c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006470:	d011      	beq.n	8006496 <UART_SetConfig+0x1a2>
 8006472:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006476:	d817      	bhi.n	80064a8 <UART_SetConfig+0x1b4>
 8006478:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800647c:	d011      	beq.n	80064a2 <UART_SetConfig+0x1ae>
 800647e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006482:	d811      	bhi.n	80064a8 <UART_SetConfig+0x1b4>
 8006484:	2b00      	cmp	r3, #0
 8006486:	d003      	beq.n	8006490 <UART_SetConfig+0x19c>
 8006488:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800648c:	d006      	beq.n	800649c <UART_SetConfig+0x1a8>
 800648e:	e00b      	b.n	80064a8 <UART_SetConfig+0x1b4>
 8006490:	2300      	movs	r3, #0
 8006492:	77fb      	strb	r3, [r7, #31]
 8006494:	e037      	b.n	8006506 <UART_SetConfig+0x212>
 8006496:	2302      	movs	r3, #2
 8006498:	77fb      	strb	r3, [r7, #31]
 800649a:	e034      	b.n	8006506 <UART_SetConfig+0x212>
 800649c:	2304      	movs	r3, #4
 800649e:	77fb      	strb	r3, [r7, #31]
 80064a0:	e031      	b.n	8006506 <UART_SetConfig+0x212>
 80064a2:	2308      	movs	r3, #8
 80064a4:	77fb      	strb	r3, [r7, #31]
 80064a6:	e02e      	b.n	8006506 <UART_SetConfig+0x212>
 80064a8:	2310      	movs	r3, #16
 80064aa:	77fb      	strb	r3, [r7, #31]
 80064ac:	e02b      	b.n	8006506 <UART_SetConfig+0x212>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a33      	ldr	r2, [pc, #204]	@ (8006580 <UART_SetConfig+0x28c>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d124      	bne.n	8006502 <UART_SetConfig+0x20e>
 80064b8:	4b2d      	ldr	r3, [pc, #180]	@ (8006570 <UART_SetConfig+0x27c>)
 80064ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064bc:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80064c0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80064c4:	d011      	beq.n	80064ea <UART_SetConfig+0x1f6>
 80064c6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80064ca:	d817      	bhi.n	80064fc <UART_SetConfig+0x208>
 80064cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80064d0:	d011      	beq.n	80064f6 <UART_SetConfig+0x202>
 80064d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80064d6:	d811      	bhi.n	80064fc <UART_SetConfig+0x208>
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d003      	beq.n	80064e4 <UART_SetConfig+0x1f0>
 80064dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064e0:	d006      	beq.n	80064f0 <UART_SetConfig+0x1fc>
 80064e2:	e00b      	b.n	80064fc <UART_SetConfig+0x208>
 80064e4:	2300      	movs	r3, #0
 80064e6:	77fb      	strb	r3, [r7, #31]
 80064e8:	e00d      	b.n	8006506 <UART_SetConfig+0x212>
 80064ea:	2302      	movs	r3, #2
 80064ec:	77fb      	strb	r3, [r7, #31]
 80064ee:	e00a      	b.n	8006506 <UART_SetConfig+0x212>
 80064f0:	2304      	movs	r3, #4
 80064f2:	77fb      	strb	r3, [r7, #31]
 80064f4:	e007      	b.n	8006506 <UART_SetConfig+0x212>
 80064f6:	2308      	movs	r3, #8
 80064f8:	77fb      	strb	r3, [r7, #31]
 80064fa:	e004      	b.n	8006506 <UART_SetConfig+0x212>
 80064fc:	2310      	movs	r3, #16
 80064fe:	77fb      	strb	r3, [r7, #31]
 8006500:	e001      	b.n	8006506 <UART_SetConfig+0x212>
 8006502:	2310      	movs	r3, #16
 8006504:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800650e:	d16b      	bne.n	80065e8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8006510:	7ffb      	ldrb	r3, [r7, #31]
 8006512:	2b08      	cmp	r3, #8
 8006514:	d838      	bhi.n	8006588 <UART_SetConfig+0x294>
 8006516:	a201      	add	r2, pc, #4	@ (adr r2, 800651c <UART_SetConfig+0x228>)
 8006518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651c:	08006541 	.word	0x08006541
 8006520:	08006549 	.word	0x08006549
 8006524:	08006551 	.word	0x08006551
 8006528:	08006589 	.word	0x08006589
 800652c:	08006557 	.word	0x08006557
 8006530:	08006589 	.word	0x08006589
 8006534:	08006589 	.word	0x08006589
 8006538:	08006589 	.word	0x08006589
 800653c:	0800655f 	.word	0x0800655f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006540:	f7fc fdcc 	bl	80030dc <HAL_RCC_GetPCLK1Freq>
 8006544:	61b8      	str	r0, [r7, #24]
        break;
 8006546:	e024      	b.n	8006592 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006548:	f7fc fdea 	bl	8003120 <HAL_RCC_GetPCLK2Freq>
 800654c:	61b8      	str	r0, [r7, #24]
        break;
 800654e:	e020      	b.n	8006592 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006550:	4b0c      	ldr	r3, [pc, #48]	@ (8006584 <UART_SetConfig+0x290>)
 8006552:	61bb      	str	r3, [r7, #24]
        break;
 8006554:	e01d      	b.n	8006592 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006556:	f7fc fd4b 	bl	8002ff0 <HAL_RCC_GetSysClockFreq>
 800655a:	61b8      	str	r0, [r7, #24]
        break;
 800655c:	e019      	b.n	8006592 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800655e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006562:	61bb      	str	r3, [r7, #24]
        break;
 8006564:	e015      	b.n	8006592 <UART_SetConfig+0x29e>
 8006566:	bf00      	nop
 8006568:	efff69f3 	.word	0xefff69f3
 800656c:	40013800 	.word	0x40013800
 8006570:	40021000 	.word	0x40021000
 8006574:	40004400 	.word	0x40004400
 8006578:	40004800 	.word	0x40004800
 800657c:	40004c00 	.word	0x40004c00
 8006580:	40005000 	.word	0x40005000
 8006584:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8006588:	2300      	movs	r3, #0
 800658a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	77bb      	strb	r3, [r7, #30]
        break;
 8006590:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d073      	beq.n	8006680 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	005a      	lsls	r2, r3, #1
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	085b      	lsrs	r3, r3, #1
 80065a2:	441a      	add	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	2b0f      	cmp	r3, #15
 80065b2:	d916      	bls.n	80065e2 <UART_SetConfig+0x2ee>
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065ba:	d212      	bcs.n	80065e2 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	b29b      	uxth	r3, r3
 80065c0:	f023 030f 	bic.w	r3, r3, #15
 80065c4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	085b      	lsrs	r3, r3, #1
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	f003 0307 	and.w	r3, r3, #7
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	89fb      	ldrh	r3, [r7, #14]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	89fa      	ldrh	r2, [r7, #14]
 80065de:	60da      	str	r2, [r3, #12]
 80065e0:	e04e      	b.n	8006680 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	77bb      	strb	r3, [r7, #30]
 80065e6:	e04b      	b.n	8006680 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80065e8:	7ffb      	ldrb	r3, [r7, #31]
 80065ea:	2b08      	cmp	r3, #8
 80065ec:	d827      	bhi.n	800663e <UART_SetConfig+0x34a>
 80065ee:	a201      	add	r2, pc, #4	@ (adr r2, 80065f4 <UART_SetConfig+0x300>)
 80065f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f4:	08006619 	.word	0x08006619
 80065f8:	08006621 	.word	0x08006621
 80065fc:	08006629 	.word	0x08006629
 8006600:	0800663f 	.word	0x0800663f
 8006604:	0800662f 	.word	0x0800662f
 8006608:	0800663f 	.word	0x0800663f
 800660c:	0800663f 	.word	0x0800663f
 8006610:	0800663f 	.word	0x0800663f
 8006614:	08006637 	.word	0x08006637
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006618:	f7fc fd60 	bl	80030dc <HAL_RCC_GetPCLK1Freq>
 800661c:	61b8      	str	r0, [r7, #24]
        break;
 800661e:	e013      	b.n	8006648 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006620:	f7fc fd7e 	bl	8003120 <HAL_RCC_GetPCLK2Freq>
 8006624:	61b8      	str	r0, [r7, #24]
        break;
 8006626:	e00f      	b.n	8006648 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006628:	4b1b      	ldr	r3, [pc, #108]	@ (8006698 <UART_SetConfig+0x3a4>)
 800662a:	61bb      	str	r3, [r7, #24]
        break;
 800662c:	e00c      	b.n	8006648 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800662e:	f7fc fcdf 	bl	8002ff0 <HAL_RCC_GetSysClockFreq>
 8006632:	61b8      	str	r0, [r7, #24]
        break;
 8006634:	e008      	b.n	8006648 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006636:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800663a:	61bb      	str	r3, [r7, #24]
        break;
 800663c:	e004      	b.n	8006648 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800663e:	2300      	movs	r3, #0
 8006640:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	77bb      	strb	r3, [r7, #30]
        break;
 8006646:	bf00      	nop
    }

    if (pclk != 0U)
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d018      	beq.n	8006680 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	085a      	lsrs	r2, r3, #1
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	441a      	add	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006660:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	2b0f      	cmp	r3, #15
 8006666:	d909      	bls.n	800667c <UART_SetConfig+0x388>
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800666e:	d205      	bcs.n	800667c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	b29a      	uxth	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	60da      	str	r2, [r3, #12]
 800667a:	e001      	b.n	8006680 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800668c:	7fbb      	ldrb	r3, [r7, #30]
}
 800668e:	4618      	mov	r0, r3
 8006690:	3720      	adds	r7, #32
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	007a1200 	.word	0x007a1200

0800669c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a8:	f003 0301 	and.w	r3, r3, #1
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00a      	beq.n	80066c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	430a      	orrs	r2, r1
 80066c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ca:	f003 0302 	and.w	r3, r3, #2
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00a      	beq.n	80066e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	430a      	orrs	r2, r1
 80066e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ec:	f003 0304 	and.w	r3, r3, #4
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00a      	beq.n	800670a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	430a      	orrs	r2, r1
 8006708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800670e:	f003 0308 	and.w	r3, r3, #8
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00a      	beq.n	800672c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	430a      	orrs	r2, r1
 800672a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006730:	f003 0310 	and.w	r3, r3, #16
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00a      	beq.n	800674e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	430a      	orrs	r2, r1
 800674c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006752:	f003 0320 	and.w	r3, r3, #32
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00a      	beq.n	8006770 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	430a      	orrs	r2, r1
 800676e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006778:	2b00      	cmp	r3, #0
 800677a:	d01a      	beq.n	80067b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	430a      	orrs	r2, r1
 8006790:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006796:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800679a:	d10a      	bne.n	80067b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00a      	beq.n	80067d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	430a      	orrs	r2, r1
 80067d2:	605a      	str	r2, [r3, #4]
  }
}
 80067d4:	bf00      	nop
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b098      	sub	sp, #96	@ 0x60
 80067e4:	af02      	add	r7, sp, #8
 80067e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067f0:	f7fa fef8 	bl	80015e4 <HAL_GetTick>
 80067f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0308 	and.w	r3, r3, #8
 8006800:	2b08      	cmp	r3, #8
 8006802:	d12e      	bne.n	8006862 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006804:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006808:	9300      	str	r3, [sp, #0]
 800680a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800680c:	2200      	movs	r2, #0
 800680e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 f88c 	bl	8006930 <UART_WaitOnFlagUntilTimeout>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d021      	beq.n	8006862 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006826:	e853 3f00 	ldrex	r3, [r3]
 800682a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800682c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800682e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006832:	653b      	str	r3, [r7, #80]	@ 0x50
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	461a      	mov	r2, r3
 800683a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800683c:	647b      	str	r3, [r7, #68]	@ 0x44
 800683e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006840:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006842:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006844:	e841 2300 	strex	r3, r2, [r1]
 8006848:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800684a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800684c:	2b00      	cmp	r3, #0
 800684e:	d1e6      	bne.n	800681e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2220      	movs	r2, #32
 8006854:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e062      	b.n	8006928 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 0304 	and.w	r3, r3, #4
 800686c:	2b04      	cmp	r3, #4
 800686e:	d149      	bne.n	8006904 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006870:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006874:	9300      	str	r3, [sp, #0]
 8006876:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006878:	2200      	movs	r2, #0
 800687a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f856 	bl	8006930 <UART_WaitOnFlagUntilTimeout>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d03c      	beq.n	8006904 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006892:	e853 3f00 	ldrex	r3, [r3]
 8006896:	623b      	str	r3, [r7, #32]
   return(result);
 8006898:	6a3b      	ldr	r3, [r7, #32]
 800689a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800689e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	461a      	mov	r2, r3
 80068a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80068aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068b0:	e841 2300 	strex	r3, r2, [r1]
 80068b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1e6      	bne.n	800688a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	3308      	adds	r3, #8
 80068c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	e853 3f00 	ldrex	r3, [r3]
 80068ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f023 0301 	bic.w	r3, r3, #1
 80068d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	3308      	adds	r3, #8
 80068da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068dc:	61fa      	str	r2, [r7, #28]
 80068de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e0:	69b9      	ldr	r1, [r7, #24]
 80068e2:	69fa      	ldr	r2, [r7, #28]
 80068e4:	e841 2300 	strex	r3, r2, [r1]
 80068e8:	617b      	str	r3, [r7, #20]
   return(result);
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1e5      	bne.n	80068bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2220      	movs	r2, #32
 80068f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	e011      	b.n	8006928 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2220      	movs	r2, #32
 8006908:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2220      	movs	r2, #32
 800690e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3758      	adds	r7, #88	@ 0x58
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	603b      	str	r3, [r7, #0]
 800693c:	4613      	mov	r3, r2
 800693e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006940:	e049      	b.n	80069d6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006948:	d045      	beq.n	80069d6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800694a:	f7fa fe4b 	bl	80015e4 <HAL_GetTick>
 800694e:	4602      	mov	r2, r0
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	69ba      	ldr	r2, [r7, #24]
 8006956:	429a      	cmp	r2, r3
 8006958:	d302      	bcc.n	8006960 <UART_WaitOnFlagUntilTimeout+0x30>
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d101      	bne.n	8006964 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	e048      	b.n	80069f6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0304 	and.w	r3, r3, #4
 800696e:	2b00      	cmp	r3, #0
 8006970:	d031      	beq.n	80069d6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	69db      	ldr	r3, [r3, #28]
 8006978:	f003 0308 	and.w	r3, r3, #8
 800697c:	2b08      	cmp	r3, #8
 800697e:	d110      	bne.n	80069a2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2208      	movs	r2, #8
 8006986:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f000 f8ff 	bl	8006b8c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2208      	movs	r2, #8
 8006992:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e029      	b.n	80069f6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	69db      	ldr	r3, [r3, #28]
 80069a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069b0:	d111      	bne.n	80069d6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80069ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f000 f8e5 	bl	8006b8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2220      	movs	r2, #32
 80069c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e00f      	b.n	80069f6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	69da      	ldr	r2, [r3, #28]
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	4013      	ands	r3, r2
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	bf0c      	ite	eq
 80069e6:	2301      	moveq	r3, #1
 80069e8:	2300      	movne	r3, #0
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	461a      	mov	r2, r3
 80069ee:	79fb      	ldrb	r3, [r7, #7]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d0a6      	beq.n	8006942 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
	...

08006a00 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b097      	sub	sp, #92	@ 0x5c
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	68ba      	ldr	r2, [r7, #8]
 8006a12:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	88fa      	ldrh	r2, [r7, #6]
 8006a18:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	88fa      	ldrh	r2, [r7, #6]
 8006a20:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a32:	d10e      	bne.n	8006a52 <UART_Start_Receive_IT+0x52>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d105      	bne.n	8006a48 <UART_Start_Receive_IT+0x48>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006a42:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006a46:	e02d      	b.n	8006aa4 <UART_Start_Receive_IT+0xa4>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	22ff      	movs	r2, #255	@ 0xff
 8006a4c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006a50:	e028      	b.n	8006aa4 <UART_Start_Receive_IT+0xa4>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10d      	bne.n	8006a76 <UART_Start_Receive_IT+0x76>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d104      	bne.n	8006a6c <UART_Start_Receive_IT+0x6c>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	22ff      	movs	r2, #255	@ 0xff
 8006a66:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006a6a:	e01b      	b.n	8006aa4 <UART_Start_Receive_IT+0xa4>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	227f      	movs	r2, #127	@ 0x7f
 8006a70:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006a74:	e016      	b.n	8006aa4 <UART_Start_Receive_IT+0xa4>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a7e:	d10d      	bne.n	8006a9c <UART_Start_Receive_IT+0x9c>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d104      	bne.n	8006a92 <UART_Start_Receive_IT+0x92>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	227f      	movs	r2, #127	@ 0x7f
 8006a8c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006a90:	e008      	b.n	8006aa4 <UART_Start_Receive_IT+0xa4>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	223f      	movs	r2, #63	@ 0x3f
 8006a96:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006a9a:	e003      	b.n	8006aa4 <UART_Start_Receive_IT+0xa4>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2222      	movs	r2, #34	@ 0x22
 8006ab0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	3308      	adds	r3, #8
 8006aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006abe:	e853 3f00 	ldrex	r3, [r3]
 8006ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac6:	f043 0301 	orr.w	r3, r3, #1
 8006aca:	657b      	str	r3, [r7, #84]	@ 0x54
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	3308      	adds	r3, #8
 8006ad2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006ad4:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006ad6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006ada:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006adc:	e841 2300 	strex	r3, r2, [r1]
 8006ae0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006ae2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1e5      	bne.n	8006ab4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006af0:	d107      	bne.n	8006b02 <UART_Start_Receive_IT+0x102>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d103      	bne.n	8006b02 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	4a21      	ldr	r2, [pc, #132]	@ (8006b84 <UART_Start_Receive_IT+0x184>)
 8006afe:	669a      	str	r2, [r3, #104]	@ 0x68
 8006b00:	e002      	b.n	8006b08 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	4a20      	ldr	r2, [pc, #128]	@ (8006b88 <UART_Start_Receive_IT+0x188>)
 8006b06:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d019      	beq.n	8006b44 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b18:	e853 3f00 	ldrex	r3, [r3]
 8006b1c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b20:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006b24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b30:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006b34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b36:	e841 2300 	strex	r3, r2, [r1]
 8006b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1e6      	bne.n	8006b10 <UART_Start_Receive_IT+0x110>
 8006b42:	e018      	b.n	8006b76 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	e853 3f00 	ldrex	r3, [r3]
 8006b50:	613b      	str	r3, [r7, #16]
   return(result);
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	f043 0320 	orr.w	r3, r3, #32
 8006b58:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b62:	623b      	str	r3, [r7, #32]
 8006b64:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b66:	69f9      	ldr	r1, [r7, #28]
 8006b68:	6a3a      	ldr	r2, [r7, #32]
 8006b6a:	e841 2300 	strex	r3, r2, [r1]
 8006b6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1e6      	bne.n	8006b44 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	375c      	adds	r7, #92	@ 0x5c
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr
 8006b84:	08006e7d 	.word	0x08006e7d
 8006b88:	08006cd5 	.word	0x08006cd5

08006b8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b095      	sub	sp, #84	@ 0x54
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b9c:	e853 3f00 	ldrex	r3, [r3]
 8006ba0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ba8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bb2:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bb4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006bb8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006bba:	e841 2300 	strex	r3, r2, [r1]
 8006bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1e6      	bne.n	8006b94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	3308      	adds	r3, #8
 8006bcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bce:	6a3b      	ldr	r3, [r7, #32]
 8006bd0:	e853 3f00 	ldrex	r3, [r3]
 8006bd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	f023 0301 	bic.w	r3, r3, #1
 8006bdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	3308      	adds	r3, #8
 8006be4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006be6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006be8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bee:	e841 2300 	strex	r3, r2, [r1]
 8006bf2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1e5      	bne.n	8006bc6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d118      	bne.n	8006c34 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	e853 3f00 	ldrex	r3, [r3]
 8006c0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	f023 0310 	bic.w	r3, r3, #16
 8006c16:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c20:	61bb      	str	r3, [r7, #24]
 8006c22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c24:	6979      	ldr	r1, [r7, #20]
 8006c26:	69ba      	ldr	r2, [r7, #24]
 8006c28:	e841 2300 	strex	r3, r2, [r1]
 8006c2c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1e6      	bne.n	8006c02 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2220      	movs	r2, #32
 8006c38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006c48:	bf00      	nop
 8006c4a:	3754      	adds	r7, #84	@ 0x54
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f7ff fb28 	bl	80062c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c78:	bf00      	nop
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b088      	sub	sp, #32
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	e853 3f00 	ldrex	r3, [r3]
 8006c94:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c9c:	61fb      	str	r3, [r7, #28]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	61bb      	str	r3, [r7, #24]
 8006ca8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006caa:	6979      	ldr	r1, [r7, #20]
 8006cac:	69ba      	ldr	r2, [r7, #24]
 8006cae:	e841 2300 	strex	r3, r2, [r1]
 8006cb2:	613b      	str	r3, [r7, #16]
   return(result);
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1e6      	bne.n	8006c88 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f7ff faf4 	bl	80062b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ccc:	bf00      	nop
 8006cce:	3720      	adds	r7, #32
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b09c      	sub	sp, #112	@ 0x70
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006ce2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cec:	2b22      	cmp	r3, #34	@ 0x22
 8006cee:	f040 80b9 	bne.w	8006e64 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006cf8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006cfc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006d00:	b2d9      	uxtb	r1, r3
 8006d02:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006d06:	b2da      	uxtb	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d0c:	400a      	ands	r2, r1
 8006d0e:	b2d2      	uxtb	r2, r2
 8006d10:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d16:	1c5a      	adds	r2, r3, #1
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	3b01      	subs	r3, #1
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f040 809c 	bne.w	8006e74 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d44:	e853 3f00 	ldrex	r3, [r3]
 8006d48:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006d4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	461a      	mov	r2, r3
 8006d58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d5a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d5c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006d60:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d62:	e841 2300 	strex	r3, r2, [r1]
 8006d66:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006d68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1e6      	bne.n	8006d3c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	3308      	adds	r3, #8
 8006d74:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d78:	e853 3f00 	ldrex	r3, [r3]
 8006d7c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d80:	f023 0301 	bic.w	r3, r3, #1
 8006d84:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	3308      	adds	r3, #8
 8006d8c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006d8e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006d90:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d96:	e841 2300 	strex	r3, r2, [r1]
 8006d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d1e5      	bne.n	8006d6e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2220      	movs	r2, #32
 8006da6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d018      	beq.n	8006df6 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dcc:	e853 3f00 	ldrex	r3, [r3]
 8006dd0:	623b      	str	r3, [r7, #32]
   return(result);
 8006dd2:	6a3b      	ldr	r3, [r7, #32]
 8006dd4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006dd8:	663b      	str	r3, [r7, #96]	@ 0x60
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	461a      	mov	r2, r3
 8006de0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006de2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006de4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006de8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dea:	e841 2300 	strex	r3, r2, [r1]
 8006dee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1e6      	bne.n	8006dc4 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d12e      	bne.n	8006e5c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	e853 3f00 	ldrex	r3, [r3]
 8006e10:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f023 0310 	bic.w	r3, r3, #16
 8006e18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	461a      	mov	r2, r3
 8006e20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e22:	61fb      	str	r3, [r7, #28]
 8006e24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e26:	69b9      	ldr	r1, [r7, #24]
 8006e28:	69fa      	ldr	r2, [r7, #28]
 8006e2a:	e841 2300 	strex	r3, r2, [r1]
 8006e2e:	617b      	str	r3, [r7, #20]
   return(result);
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1e6      	bne.n	8006e04 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	69db      	ldr	r3, [r3, #28]
 8006e3c:	f003 0310 	and.w	r3, r3, #16
 8006e40:	2b10      	cmp	r3, #16
 8006e42:	d103      	bne.n	8006e4c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2210      	movs	r2, #16
 8006e4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006e52:	4619      	mov	r1, r3
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f7ff fa41 	bl	80062dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e5a:	e00b      	b.n	8006e74 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f7fa fb19 	bl	8001494 <HAL_UART_RxCpltCallback>
}
 8006e62:	e007      	b.n	8006e74 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	699a      	ldr	r2, [r3, #24]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f042 0208 	orr.w	r2, r2, #8
 8006e72:	619a      	str	r2, [r3, #24]
}
 8006e74:	bf00      	nop
 8006e76:	3770      	adds	r7, #112	@ 0x70
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b09c      	sub	sp, #112	@ 0x70
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006e8a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e94:	2b22      	cmp	r3, #34	@ 0x22
 8006e96:	f040 80b9 	bne.w	800700c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006ea0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ea8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006eaa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006eae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006eb8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ebe:	1c9a      	adds	r2, r3, #2
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	f040 809c 	bne.w	800701c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006eec:	e853 3f00 	ldrex	r3, [r3]
 8006ef0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006ef2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ef4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ef8:	667b      	str	r3, [r7, #100]	@ 0x64
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	461a      	mov	r2, r3
 8006f00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f02:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f04:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f06:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006f08:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006f0a:	e841 2300 	strex	r3, r2, [r1]
 8006f0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006f10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1e6      	bne.n	8006ee4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	3308      	adds	r3, #8
 8006f1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f20:	e853 3f00 	ldrex	r3, [r3]
 8006f24:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f28:	f023 0301 	bic.w	r3, r3, #1
 8006f2c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	3308      	adds	r3, #8
 8006f34:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006f36:	643a      	str	r2, [r7, #64]	@ 0x40
 8006f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f3e:	e841 2300 	strex	r3, r2, [r1]
 8006f42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1e5      	bne.n	8006f16 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2220      	movs	r2, #32
 8006f4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d018      	beq.n	8006f9e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f72:	6a3b      	ldr	r3, [r7, #32]
 8006f74:	e853 3f00 	ldrex	r3, [r3]
 8006f78:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006f80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	461a      	mov	r2, r3
 8006f88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f8c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f92:	e841 2300 	strex	r3, r2, [r1]
 8006f96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1e6      	bne.n	8006f6c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d12e      	bne.n	8007004 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	e853 3f00 	ldrex	r3, [r3]
 8006fb8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	f023 0310 	bic.w	r3, r3, #16
 8006fc0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006fca:	61bb      	str	r3, [r7, #24]
 8006fcc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fce:	6979      	ldr	r1, [r7, #20]
 8006fd0:	69ba      	ldr	r2, [r7, #24]
 8006fd2:	e841 2300 	strex	r3, r2, [r1]
 8006fd6:	613b      	str	r3, [r7, #16]
   return(result);
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1e6      	bne.n	8006fac <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	69db      	ldr	r3, [r3, #28]
 8006fe4:	f003 0310 	and.w	r3, r3, #16
 8006fe8:	2b10      	cmp	r3, #16
 8006fea:	d103      	bne.n	8006ff4 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2210      	movs	r2, #16
 8006ff2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f7ff f96d 	bl	80062dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007002:	e00b      	b.n	800701c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f7fa fa45 	bl	8001494 <HAL_UART_RxCpltCallback>
}
 800700a:	e007      	b.n	800701c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	699a      	ldr	r2, [r3, #24]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f042 0208 	orr.w	r2, r2, #8
 800701a:	619a      	str	r2, [r3, #24]
}
 800701c:	bf00      	nop
 800701e:	3770      	adds	r7, #112	@ 0x70
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <memset>:
 8007038:	4402      	add	r2, r0
 800703a:	4603      	mov	r3, r0
 800703c:	4293      	cmp	r3, r2
 800703e:	d100      	bne.n	8007042 <memset+0xa>
 8007040:	4770      	bx	lr
 8007042:	f803 1b01 	strb.w	r1, [r3], #1
 8007046:	e7f9      	b.n	800703c <memset+0x4>

08007048 <__libc_init_array>:
 8007048:	b570      	push	{r4, r5, r6, lr}
 800704a:	4d0d      	ldr	r5, [pc, #52]	@ (8007080 <__libc_init_array+0x38>)
 800704c:	4c0d      	ldr	r4, [pc, #52]	@ (8007084 <__libc_init_array+0x3c>)
 800704e:	1b64      	subs	r4, r4, r5
 8007050:	10a4      	asrs	r4, r4, #2
 8007052:	2600      	movs	r6, #0
 8007054:	42a6      	cmp	r6, r4
 8007056:	d109      	bne.n	800706c <__libc_init_array+0x24>
 8007058:	4d0b      	ldr	r5, [pc, #44]	@ (8007088 <__libc_init_array+0x40>)
 800705a:	4c0c      	ldr	r4, [pc, #48]	@ (800708c <__libc_init_array+0x44>)
 800705c:	f000 f818 	bl	8007090 <_init>
 8007060:	1b64      	subs	r4, r4, r5
 8007062:	10a4      	asrs	r4, r4, #2
 8007064:	2600      	movs	r6, #0
 8007066:	42a6      	cmp	r6, r4
 8007068:	d105      	bne.n	8007076 <__libc_init_array+0x2e>
 800706a:	bd70      	pop	{r4, r5, r6, pc}
 800706c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007070:	4798      	blx	r3
 8007072:	3601      	adds	r6, #1
 8007074:	e7ee      	b.n	8007054 <__libc_init_array+0xc>
 8007076:	f855 3b04 	ldr.w	r3, [r5], #4
 800707a:	4798      	blx	r3
 800707c:	3601      	adds	r6, #1
 800707e:	e7f2      	b.n	8007066 <__libc_init_array+0x1e>
 8007080:	080070e0 	.word	0x080070e0
 8007084:	080070e0 	.word	0x080070e0
 8007088:	080070e0 	.word	0x080070e0
 800708c:	080070e4 	.word	0x080070e4

08007090 <_init>:
 8007090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007092:	bf00      	nop
 8007094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007096:	bc08      	pop	{r3}
 8007098:	469e      	mov	lr, r3
 800709a:	4770      	bx	lr

0800709c <_fini>:
 800709c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709e:	bf00      	nop
 80070a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070a2:	bc08      	pop	{r3}
 80070a4:	469e      	mov	lr, r3
 80070a6:	4770      	bx	lr
